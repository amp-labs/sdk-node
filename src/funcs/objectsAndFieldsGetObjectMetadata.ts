/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { GetObjectMetadataServerList } from "../models/operations/getobjectmetadata.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

export enum GetObjectMetadataAcceptEnum {
  applicationJson = "application/json",
  applicationProblemPlusJson = "application/problem+json",
}

/**
 * Get object and field data
 *
 * @remarks
 * Retrieves metadata about an object in a customer's SaaS instance, including its fields
 */
export async function objectsAndFieldsGetObjectMetadata(
  client: SDKCore,
  request: operations.GetObjectMetadataRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: GetObjectMetadataAcceptEnum;
  },
): Promise<
  Result<
    operations.GetObjectMetadataResponse,
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetObjectMetadataRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const baseURL = options?.serverURL
    || pathToFunc(GetObjectMetadataServerList[0], {
      charEncoding: "percent",
    })();

  const pathParams = {
    integrationId: encodeSimple("integrationId", payload.integrationId, {
      explode: false,
      charEncoding: "percent",
    }),
    objectName: encodeSimple("objectName", payload.objectName, {
      explode: false,
      charEncoding: "percent",
    }),
    projectIdOrName: encodeSimple("projectIdOrName", payload.projectIdOrName, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/projects/{projectIdOrName}/integrations/{integrationId}/objects/{objectName}/metadata",
  )(pathParams);

  const query = encodeFormQuery({
    "groupRef": payload.groupRef,
  });

  const headers = new Headers(compactMap({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/problem+json;q=0",
  }));

  const secConfig = await extractSecurity(client._options.apiKeyHeader);
  const securityInput = secConfig == null ? {} : { apiKeyHeader: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "getObjectMetadata",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKeyHeader,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 3600000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: baseURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.GetObjectMetadataResponse,
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.GetObjectMetadataResponse$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
    M.json("default", operations.GetObjectMetadataResponse$inboundSchema, {
      ctype: "application/problem+json",
    }),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
