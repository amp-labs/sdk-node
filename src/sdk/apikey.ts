/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  apiKeyCreateAPIKey,
  CreateApiKeyAcceptEnum,
} from "../funcs/apiKeyCreateAPIKey.js";
import { apiKeyDeleteAPIKey } from "../funcs/apiKeyDeleteAPIKey.js";
import {
  apiKeyGetAPIKey,
  GetApiKeyAcceptEnum,
} from "../funcs/apiKeyGetAPIKey.js";
import {
  apiKeyListAPIKeys,
  ListApiKeysAcceptEnum,
} from "../funcs/apiKeyListAPIKeys.js";
import {
  apiKeyUpdateAPIKey,
  UpdateApiKeyAcceptEnum,
} from "../funcs/apiKeyUpdateAPIKey.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ListApiKeysAcceptEnum } from "../funcs/apiKeyListAPIKeys.js";

export { CreateApiKeyAcceptEnum } from "../funcs/apiKeyCreateAPIKey.js";

export { GetApiKeyAcceptEnum } from "../funcs/apiKeyGetAPIKey.js";

export { UpdateApiKeyAcceptEnum } from "../funcs/apiKeyUpdateAPIKey.js";

export class APIKey extends ClientSDK {
  /**
   * List API keys
   */
  async listApiKeys(
    request: operations.ListApiKeysRequest,
    options?: RequestOptions & { acceptHeaderOverride?: ListApiKeysAcceptEnum },
  ): Promise<operations.ListApiKeysResponse> {
    return unwrapAsync(apiKeyListAPIKeys(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new API key
   */
  async createApiKey(
    request: operations.CreateApiKeyRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateApiKeyAcceptEnum;
    },
  ): Promise<operations.CreateApiKeyResponse> {
    return unwrapAsync(apiKeyCreateAPIKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an API key
   */
  async getApiKey(
    request: operations.GetApiKeyRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetApiKeyAcceptEnum },
  ): Promise<operations.GetApiKeyResponse> {
    return unwrapAsync(apiKeyGetAPIKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an API key
   */
  async deleteApiKey(
    request: operations.DeleteApiKeyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(apiKeyDeleteAPIKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an API key
   */
  async updateApiKey(
    request: operations.UpdateApiKeyRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateApiKeyAcceptEnum;
    },
  ): Promise<operations.UpdateApiKeyResponse> {
    return unwrapAsync(apiKeyUpdateAPIKey(
      this,
      request,
      options,
    ));
  }
}
