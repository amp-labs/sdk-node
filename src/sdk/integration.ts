/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  BatchUpsertIntegrationsAcceptEnum,
  integrationBatchUpsertIntegrations,
} from "../funcs/integrationBatchUpsertIntegrations.js";
import { integrationCreateIntegration } from "../funcs/integrationCreateIntegration.js";
import { integrationDeleteIntegration } from "../funcs/integrationDeleteIntegration.js";
import {
  integrationListIntegrations,
  ListIntegrationsAcceptEnum,
} from "../funcs/integrationListIntegrations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ListIntegrationsAcceptEnum } from "../funcs/integrationListIntegrations.js";

export { BatchUpsertIntegrationsAcceptEnum } from "../funcs/integrationBatchUpsertIntegrations.js";

export class Integration extends ClientSDK {
  /**
   * List integrations
   */
  async listIntegrations(
    request: operations.ListIntegrationsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: ListIntegrationsAcceptEnum;
    },
  ): Promise<operations.ListIntegrationsResponse> {
    return unwrapAsync(integrationListIntegrations(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new integration
   */
  async createIntegration(
    request: operations.CreateIntegrationRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateIntegrationResponseBody | undefined> {
    return unwrapAsync(integrationCreateIntegration(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an integration
   */
  async deleteIntegration(
    request: operations.DeleteIntegrationRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteIntegrationResponseBody | undefined> {
    return unwrapAsync(integrationDeleteIntegration(
      this,
      request,
      options,
    ));
  }

  /**
   * Batch upsert a group of integrations
   */
  async batchUpsertIntegrations(
    request: operations.BatchUpsertIntegrationsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: BatchUpsertIntegrationsAcceptEnum;
    },
  ): Promise<operations.BatchUpsertIntegrationsResponse> {
    return unwrapAsync(integrationBatchUpsertIntegrations(
      this,
      request,
      options,
    ));
  }
}
