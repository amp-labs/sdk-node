/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { CreateOrgAcceptEnum, orgCreateOrg } from "../funcs/orgCreateOrg.js";
import {
  CreateOrgInviteAcceptEnum,
  orgCreateOrgInvite,
} from "../funcs/orgCreateOrgInvite.js";
import { orgDeleteOrgInvite } from "../funcs/orgDeleteOrgInvite.js";
import { GetOrgAcceptEnum, orgGetOrg } from "../funcs/orgGetOrg.js";
import {
  GetOrgInviteAcceptEnum,
  orgGetOrgInvite,
} from "../funcs/orgGetOrgInvite.js";
import {
  ListOrgBuildersAcceptEnum,
  orgListOrgBuilders,
} from "../funcs/orgListOrgBuilders.js";
import {
  ListOrgInvitesAcceptEnum,
  orgListOrgInvites,
} from "../funcs/orgListOrgInvites.js";
import { orgUpdateOrg, UpdateOrgAcceptEnum } from "../funcs/orgUpdateOrg.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { CreateOrgAcceptEnum } from "../funcs/orgCreateOrg.js";

export { GetOrgAcceptEnum } from "../funcs/orgGetOrg.js";

export { UpdateOrgAcceptEnum } from "../funcs/orgUpdateOrg.js";

export { ListOrgBuildersAcceptEnum } from "../funcs/orgListOrgBuilders.js";

export { CreateOrgInviteAcceptEnum } from "../funcs/orgCreateOrgInvite.js";

export { ListOrgInvitesAcceptEnum } from "../funcs/orgListOrgInvites.js";

export { GetOrgInviteAcceptEnum } from "../funcs/orgGetOrgInvite.js";

export class Org extends ClientSDK {
  /**
   * Create a new organization
   */
  async createOrg(
    request: operations.CreateOrgRequestBody,
    options?: RequestOptions & { acceptHeaderOverride?: CreateOrgAcceptEnum },
  ): Promise<operations.CreateOrgResponse> {
    return unwrapAsync(orgCreateOrg(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an organization
   */
  async getOrg(
    request: operations.GetOrgRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetOrgAcceptEnum },
  ): Promise<operations.GetOrgResponse> {
    return unwrapAsync(orgGetOrg(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   */
  async updateOrg(
    request: operations.UpdateOrgRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateOrgAcceptEnum },
  ): Promise<operations.UpdateOrgResponse> {
    return unwrapAsync(orgUpdateOrg(
      this,
      request,
      options,
    ));
  }

  /**
   * List builders for an organization
   */
  async listOrgBuilders(
    request: operations.ListOrgBuildersRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: ListOrgBuildersAcceptEnum;
    },
  ): Promise<operations.ListOrgBuildersResponse> {
    return unwrapAsync(orgListOrgBuilders(
      this,
      request,
      options,
    ));
  }

  /**
   * Invite a user to an organization
   */
  async createOrgInvite(
    request: operations.CreateOrgInviteRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateOrgInviteAcceptEnum;
    },
  ): Promise<operations.CreateOrgInviteResponse> {
    return unwrapAsync(orgCreateOrgInvite(
      this,
      request,
      options,
    ));
  }

  /**
   * List invites for an organization
   */
  async listOrgInvites(
    request: operations.ListOrgInvitesRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: ListOrgInvitesAcceptEnum;
    },
  ): Promise<operations.ListOrgInvitesResponse> {
    return unwrapAsync(orgListOrgInvites(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an invite
   */
  async getOrgInvite(
    request: operations.GetOrgInviteRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetOrgInviteAcceptEnum;
    },
  ): Promise<operations.GetOrgInviteResponse> {
    return unwrapAsync(orgGetOrgInvite(
      this,
      request,
      options,
    ));
  }

  /**
   * Revoke an invite
   */
  async deleteOrgInvite(
    request: operations.DeleteOrgInviteRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteOrgInviteResponseBody | undefined> {
    return unwrapAsync(orgDeleteOrgInvite(
      this,
      request,
      options,
    ));
  }
}
