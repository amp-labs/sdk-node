/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreateProviderAppAcceptEnum,
  providerAppCreateProviderApp,
} from "../funcs/providerAppCreateProviderApp.js";
import { providerAppDeleteProviderApp } from "../funcs/providerAppDeleteProviderApp.js";
import {
  ListProviderAppsAcceptEnum,
  providerAppListProviderApps,
} from "../funcs/providerAppListProviderApps.js";
import {
  providerAppUpdateProviderApp,
  UpdateProviderAppAcceptEnum,
} from "../funcs/providerAppUpdateProviderApp.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ListProviderAppsAcceptEnum } from "../funcs/providerAppListProviderApps.js";

export { CreateProviderAppAcceptEnum } from "../funcs/providerAppCreateProviderApp.js";

export { UpdateProviderAppAcceptEnum } from "../funcs/providerAppUpdateProviderApp.js";

export class ProviderApp extends ClientSDK {
  /**
   * List provider apps
   */
  async listProviderApps(
    request: operations.ListProviderAppsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: ListProviderAppsAcceptEnum;
    },
  ): Promise<operations.ListProviderAppsResponse> {
    return unwrapAsync(providerAppListProviderApps(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new provider app
   */
  async createProviderApp(
    request: operations.CreateProviderAppRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateProviderAppAcceptEnum;
    },
  ): Promise<operations.CreateProviderAppResponse> {
    return unwrapAsync(providerAppCreateProviderApp(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a provider app
   */
  async deleteProviderApp(
    request: operations.DeleteProviderAppRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteProviderAppResponseBody | undefined> {
    return unwrapAsync(providerAppDeleteProviderApp(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a provider app
   */
  async updateProviderApp(
    request: operations.UpdateProviderAppRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateProviderAppAcceptEnum;
    },
  ): Promise<operations.UpdateProviderAppResponse> {
    return unwrapAsync(providerAppUpdateProviderApp(
      this,
      request,
      options,
    ));
  }
}
