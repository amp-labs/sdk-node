/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { connectionDeleteConnection } from "../funcs/connectionDeleteConnection.js";
import {
  connectionGenerateConnection,
  GenerateConnectionAcceptEnum,
} from "../funcs/connectionGenerateConnection.js";
import {
  connectionGetConnection,
  GetConnectionAcceptEnum,
} from "../funcs/connectionGetConnection.js";
import {
  connectionListConnections,
  ListConnectionsAcceptEnum,
} from "../funcs/connectionListConnections.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ListConnectionsAcceptEnum } from "../funcs/connectionListConnections.js";

export { GenerateConnectionAcceptEnum } from "../funcs/connectionGenerateConnection.js";

export { GetConnectionAcceptEnum } from "../funcs/connectionGetConnection.js";

export class Connection extends ClientSDK {
  /**
   * List connections
   */
  async listConnections(
    request: operations.ListConnectionsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: ListConnectionsAcceptEnum;
    },
  ): Promise<operations.ListConnectionsResponse> {
    return unwrapAsync(connectionListConnections(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate a new connection
   *
   * @remarks
   * For providers which support OAuth2 Authorization Code, it is recommended that you use the [/oauth-connect endpoint](https://docs.withampersand.com/reference/oauth/get-url-for-oauth-flow) instead, unless you already have the refresh token and are importing it into Ampersand.
   */
  async generateConnection(
    request: operations.GenerateConnectionRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GenerateConnectionAcceptEnum;
    },
  ): Promise<operations.GenerateConnectionResponse> {
    return unwrapAsync(connectionGenerateConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a connection
   */
  async getConnection(
    request: operations.GetConnectionRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetConnectionAcceptEnum;
    },
  ): Promise<operations.GetConnectionResponse> {
    return unwrapAsync(connectionGetConnection(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a connection
   */
  async deleteConnection(
    request: operations.DeleteConnectionRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteConnectionResponseBody | undefined> {
    return unwrapAsync(connectionDeleteConnection(
      this,
      request,
      options,
    ));
  }
}
