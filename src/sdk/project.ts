/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreateProjectAcceptEnum,
  projectCreateProject,
} from "../funcs/projectCreateProject.js";
import { projectDeleteProject } from "../funcs/projectDeleteProject.js";
import {
  GetProjectAcceptEnum,
  projectGetProject,
} from "../funcs/projectGetProject.js";
import {
  ListProjectsAcceptEnum,
  projectListProjects,
} from "../funcs/projectListProjects.js";
import {
  projectUpdateProject,
  UpdateProjectAcceptEnum,
} from "../funcs/projectUpdateProject.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { ListProjectsAcceptEnum } from "../funcs/projectListProjects.js";

export { CreateProjectAcceptEnum } from "../funcs/projectCreateProject.js";

export { GetProjectAcceptEnum } from "../funcs/projectGetProject.js";

export { UpdateProjectAcceptEnum } from "../funcs/projectUpdateProject.js";

export class Project extends ClientSDK {
  /**
   * List all projects that the API key or user credential has access to
   */
  async listProjects(
    options?: RequestOptions & {
      acceptHeaderOverride?: ListProjectsAcceptEnum;
    },
  ): Promise<operations.ListProjectsResponse> {
    return unwrapAsync(projectListProjects(
      this,
      options,
    ));
  }

  /**
   * Create a new project
   */
  async createProject(
    request: operations.CreateProjectRequestBody,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateProjectAcceptEnum;
    },
  ): Promise<operations.CreateProjectResponse> {
    return unwrapAsync(projectCreateProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a project
   */
  async getProject(
    request: operations.GetProjectRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetProjectAcceptEnum },
  ): Promise<operations.GetProjectResponse> {
    return unwrapAsync(projectGetProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a project
   */
  async deleteProject(
    request: operations.DeleteProjectRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteProjectResponseBody | undefined> {
    return unwrapAsync(projectDeleteProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a project
   */
  async updateProject(
    request: operations.UpdateProjectRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateProjectAcceptEnum;
    },
  ): Promise<operations.UpdateProjectResponse> {
    return unwrapAsync(projectUpdateProject(
      this,
      request,
      options,
    ));
  }
}
