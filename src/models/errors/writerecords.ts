/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The data returned by the operation
 */
export type Data = {};

export type Result = {
  /**
   * Whether the operation was successful
   */
  success: boolean;
  /**
   * The data returned by the operation
   */
  data?: Data | undefined;
  /**
   * The ID of the object
   */
  recordId?: string | undefined;
};

/**
 * Error encountered while creating records
 */
export type WriteRecordsResponseBodyData = {
  /**
   * Error messages resulted in failures
   */
  errors: Array<string>;
  result?: Result | undefined;
  /**
   * Warnings messages when some unexpected event happened, but not blocking failures
   */
  warnings?: Array<string> | undefined;
  /**
   * The operation ID
   */
  operationId?: string | undefined;
};

/**
 * Error encountered while creating records
 */
export class WriteRecordsResponseBody extends Error {
  /**
   * Error messages resulted in failures
   */
  errors: Array<string>;
  result?: Result | undefined;
  /**
   * Warnings messages when some unexpected event happened, but not blocking failures
   */
  warnings?: Array<string> | undefined;
  /**
   * The operation ID
   */
  operationId?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: WriteRecordsResponseBodyData;

  constructor(err: WriteRecordsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.errors = err.errors;
    if (err.result != null) this.result = err.result;
    if (err.warnings != null) this.warnings = err.warnings;
    if (err.operationId != null) this.operationId = err.operationId;

    this.name = "WriteRecordsResponseBody";
  }
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    success: z.boolean(),
    data: z.lazy(() => Data$inboundSchema).optional(),
    recordId: z.string().optional(),
  });

/** @internal */
export type Result$Outbound = {
  success: boolean;
  data?: Data$Outbound | undefined;
  recordId?: string | undefined;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  success: z.boolean(),
  data: z.lazy(() => Data$outboundSchema).optional(),
  recordId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const WriteRecordsResponseBody$inboundSchema: z.ZodType<
  WriteRecordsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()),
  result: z.lazy(() => Result$inboundSchema).optional(),
  warnings: z.array(z.string()).optional(),
  operationId: z.string().optional(),
})
  .transform((v) => {
    return new WriteRecordsResponseBody(v);
  });

/** @internal */
export type WriteRecordsResponseBody$Outbound = {
  errors: Array<string>;
  result?: Result$Outbound | undefined;
  warnings?: Array<string> | undefined;
  operationId?: string | undefined;
};

/** @internal */
export const WriteRecordsResponseBody$outboundSchema: z.ZodType<
  WriteRecordsResponseBody$Outbound,
  z.ZodTypeDef,
  WriteRecordsResponseBody
> = z.instanceof(WriteRecordsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    errors: z.array(z.string()),
    result: z.lazy(() => Result$outboundSchema).optional(),
    warnings: z.array(z.string()).optional(),
    operationId: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteRecordsResponseBody$ {
  /** @deprecated use `WriteRecordsResponseBody$inboundSchema` instead. */
  export const inboundSchema = WriteRecordsResponseBody$inboundSchema;
  /** @deprecated use `WriteRecordsResponseBody$outboundSchema` instead. */
  export const outboundSchema = WriteRecordsResponseBody$outboundSchema;
  /** @deprecated use `WriteRecordsResponseBody$Outbound` instead. */
  export type Outbound = WriteRecordsResponseBody$Outbound;
}
