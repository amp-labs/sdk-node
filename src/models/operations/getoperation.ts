/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetOperationServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetOperationRequest = {
  projectIdOrName: string;
  operationId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetOperationOperationsResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Metadata associated with the operation.
 */
export type GetOperationMetadata = {};

/**
 * Operation
 */
export type GetOperationResponseBody = {
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  /**
   * The config ID.
   */
  configId: string;
  /**
   * The action type to perform for the given object.
   */
  actionType: string;
  /**
   * The operation ID.
   */
  id: string;
  /**
   * The Ampersand installation ID.
   */
  installationId: string;
  /**
   * The status of the operation.
   */
  status: string;
  /**
   * The result of the operation.
   */
  result?: string | undefined;
  /**
   * Metadata associated with the operation.
   */
  metadata?: GetOperationMetadata | undefined;
  /**
   * The time the operation was created.
   */
  createTime?: Date | undefined;
};

export type GetOperationResponse =
  | GetOperationResponseBody
  | GetOperationOperationsResponseBody;

/** @internal */
export const GetOperationRequest$inboundSchema: z.ZodType<
  GetOperationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  operationId: z.string(),
});

/** @internal */
export type GetOperationRequest$Outbound = {
  projectIdOrName: string;
  operationId: string;
};

/** @internal */
export const GetOperationRequest$outboundSchema: z.ZodType<
  GetOperationRequest$Outbound,
  z.ZodTypeDef,
  GetOperationRequest
> = z.object({
  projectIdOrName: z.string(),
  operationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOperationRequest$ {
  /** @deprecated use `GetOperationRequest$inboundSchema` instead. */
  export const inboundSchema = GetOperationRequest$inboundSchema;
  /** @deprecated use `GetOperationRequest$outboundSchema` instead. */
  export const outboundSchema = GetOperationRequest$outboundSchema;
  /** @deprecated use `GetOperationRequest$Outbound` instead. */
  export type Outbound = GetOperationRequest$Outbound;
}

export function getOperationRequestToJSON(
  getOperationRequest: GetOperationRequest,
): string {
  return JSON.stringify(
    GetOperationRequest$outboundSchema.parse(getOperationRequest),
  );
}

export function getOperationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOperationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOperationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOperationRequest' from JSON`,
  );
}

/** @internal */
export const GetOperationOperationsResponseBody$inboundSchema: z.ZodType<
  GetOperationOperationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetOperationOperationsResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetOperationOperationsResponseBody$outboundSchema: z.ZodType<
  GetOperationOperationsResponseBody$Outbound,
  z.ZodTypeDef,
  GetOperationOperationsResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOperationOperationsResponseBody$ {
  /** @deprecated use `GetOperationOperationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOperationOperationsResponseBody$inboundSchema;
  /** @deprecated use `GetOperationOperationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetOperationOperationsResponseBody$outboundSchema;
  /** @deprecated use `GetOperationOperationsResponseBody$Outbound` instead. */
  export type Outbound = GetOperationOperationsResponseBody$Outbound;
}

export function getOperationOperationsResponseBodyToJSON(
  getOperationOperationsResponseBody: GetOperationOperationsResponseBody,
): string {
  return JSON.stringify(
    GetOperationOperationsResponseBody$outboundSchema.parse(
      getOperationOperationsResponseBody,
    ),
  );
}

export function getOperationOperationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOperationOperationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetOperationOperationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOperationOperationsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOperationMetadata$inboundSchema: z.ZodType<
  GetOperationMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetOperationMetadata$Outbound = {};

/** @internal */
export const GetOperationMetadata$outboundSchema: z.ZodType<
  GetOperationMetadata$Outbound,
  z.ZodTypeDef,
  GetOperationMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOperationMetadata$ {
  /** @deprecated use `GetOperationMetadata$inboundSchema` instead. */
  export const inboundSchema = GetOperationMetadata$inboundSchema;
  /** @deprecated use `GetOperationMetadata$outboundSchema` instead. */
  export const outboundSchema = GetOperationMetadata$outboundSchema;
  /** @deprecated use `GetOperationMetadata$Outbound` instead. */
  export type Outbound = GetOperationMetadata$Outbound;
}

export function getOperationMetadataToJSON(
  getOperationMetadata: GetOperationMetadata,
): string {
  return JSON.stringify(
    GetOperationMetadata$outboundSchema.parse(getOperationMetadata),
  );
}

export function getOperationMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetOperationMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOperationMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOperationMetadata' from JSON`,
  );
}

/** @internal */
export const GetOperationResponseBody$inboundSchema: z.ZodType<
  GetOperationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  integrationId: z.string(),
  configId: z.string(),
  actionType: z.string(),
  id: z.string(),
  installationId: z.string(),
  status: z.string(),
  result: z.string().optional(),
  metadata: z.lazy(() => GetOperationMetadata$inboundSchema).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetOperationResponseBody$Outbound = {
  projectId: string;
  integrationId: string;
  configId: string;
  actionType: string;
  id: string;
  installationId: string;
  status: string;
  result?: string | undefined;
  metadata?: GetOperationMetadata$Outbound | undefined;
  createTime?: string | undefined;
};

/** @internal */
export const GetOperationResponseBody$outboundSchema: z.ZodType<
  GetOperationResponseBody$Outbound,
  z.ZodTypeDef,
  GetOperationResponseBody
> = z.object({
  projectId: z.string(),
  integrationId: z.string(),
  configId: z.string(),
  actionType: z.string(),
  id: z.string(),
  installationId: z.string(),
  status: z.string(),
  result: z.string().optional(),
  metadata: z.lazy(() => GetOperationMetadata$outboundSchema).optional(),
  createTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOperationResponseBody$ {
  /** @deprecated use `GetOperationResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOperationResponseBody$inboundSchema;
  /** @deprecated use `GetOperationResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOperationResponseBody$outboundSchema;
  /** @deprecated use `GetOperationResponseBody$Outbound` instead. */
  export type Outbound = GetOperationResponseBody$Outbound;
}

export function getOperationResponseBodyToJSON(
  getOperationResponseBody: GetOperationResponseBody,
): string {
  return JSON.stringify(
    GetOperationResponseBody$outboundSchema.parse(getOperationResponseBody),
  );
}

export function getOperationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOperationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOperationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOperationResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOperationResponse$inboundSchema: z.ZodType<
  GetOperationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetOperationResponseBody$inboundSchema),
  z.lazy(() => GetOperationOperationsResponseBody$inboundSchema),
]);

/** @internal */
export type GetOperationResponse$Outbound =
  | GetOperationResponseBody$Outbound
  | GetOperationOperationsResponseBody$Outbound;

/** @internal */
export const GetOperationResponse$outboundSchema: z.ZodType<
  GetOperationResponse$Outbound,
  z.ZodTypeDef,
  GetOperationResponse
> = z.union([
  z.lazy(() => GetOperationResponseBody$outboundSchema),
  z.lazy(() => GetOperationOperationsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOperationResponse$ {
  /** @deprecated use `GetOperationResponse$inboundSchema` instead. */
  export const inboundSchema = GetOperationResponse$inboundSchema;
  /** @deprecated use `GetOperationResponse$outboundSchema` instead. */
  export const outboundSchema = GetOperationResponse$outboundSchema;
  /** @deprecated use `GetOperationResponse$Outbound` instead. */
  export type Outbound = GetOperationResponse$Outbound;
}

export function getOperationResponseToJSON(
  getOperationResponse: GetOperationResponse,
): string {
  return JSON.stringify(
    GetOperationResponse$outboundSchema.parse(getOperationResponse),
  );
}

export function getOperationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOperationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOperationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOperationResponse' from JSON`,
  );
}
