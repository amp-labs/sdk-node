/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateProjectServerList = [
  "https://api.withampersand.com/v1",
] as const;

/**
 * The project fields to update. (Only include the fields you'd like to update.)
 */
export type Project = {
  /**
   * The app name.
   */
  appName?: string | undefined;
  /**
   * The project name.
   */
  name?: string | undefined;
};

export type UpdateProjectRequestBody = {
  updateMask: Array<string>;
  /**
   * The project fields to update. (Only include the fields you'd like to update.)
   */
  project: Project;
};

export type UpdateProjectRequest = {
  projectIdOrName: string;
  requestBody: UpdateProjectRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type UpdateProjectProjectResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The updated project
 */
export type UpdateProjectResponseBody = {
  /**
   * The project ID.
   */
  id: string;
  /**
   * The project name.
   */
  name: string;
  /**
   * The name of the application, which is displayed to end users.
   */
  appName: string;
  /**
   * The organization ID that this project belongs to.
   */
  orgId?: string | undefined;
  /**
   * The time the project was created.
   */
  createTime: Date;
  /**
   * The time the project was updated.
   */
  updateTime?: Date | undefined;
};

export type UpdateProjectResponse =
  | UpdateProjectResponseBody
  | UpdateProjectProjectResponseBody;

/** @internal */
export const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> =
  z.object({
    appName: z.string().optional(),
    name: z.string().optional(),
  });

/** @internal */
export type Project$Outbound = {
  appName?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Project$outboundSchema: z.ZodType<
  Project$Outbound,
  z.ZodTypeDef,
  Project
> = z.object({
  appName: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Project$ {
  /** @deprecated use `Project$inboundSchema` instead. */
  export const inboundSchema = Project$inboundSchema;
  /** @deprecated use `Project$outboundSchema` instead. */
  export const outboundSchema = Project$outboundSchema;
  /** @deprecated use `Project$Outbound` instead. */
  export type Outbound = Project$Outbound;
}

export function projectToJSON(project: Project): string {
  return JSON.stringify(Project$outboundSchema.parse(project));
}

export function projectFromJSON(
  jsonString: string,
): SafeParseResult<Project, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Project$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Project' from JSON`,
  );
}

/** @internal */
export const UpdateProjectRequestBody$inboundSchema: z.ZodType<
  UpdateProjectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  updateMask: z.array(z.string()),
  project: z.lazy(() => Project$inboundSchema),
});

/** @internal */
export type UpdateProjectRequestBody$Outbound = {
  updateMask: Array<string>;
  project: Project$Outbound;
};

/** @internal */
export const UpdateProjectRequestBody$outboundSchema: z.ZodType<
  UpdateProjectRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateProjectRequestBody
> = z.object({
  updateMask: z.array(z.string()),
  project: z.lazy(() => Project$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectRequestBody$ {
  /** @deprecated use `UpdateProjectRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectRequestBody$inboundSchema;
  /** @deprecated use `UpdateProjectRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectRequestBody$outboundSchema;
  /** @deprecated use `UpdateProjectRequestBody$Outbound` instead. */
  export type Outbound = UpdateProjectRequestBody$Outbound;
}

export function updateProjectRequestBodyToJSON(
  updateProjectRequestBody: UpdateProjectRequestBody,
): string {
  return JSON.stringify(
    UpdateProjectRequestBody$outboundSchema.parse(updateProjectRequestBody),
  );
}

export function updateProjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateProjectRequest$inboundSchema: z.ZodType<
  UpdateProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() => UpdateProjectRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateProjectRequest$Outbound = {
  projectIdOrName: string;
  RequestBody: UpdateProjectRequestBody$Outbound;
};

/** @internal */
export const UpdateProjectRequest$outboundSchema: z.ZodType<
  UpdateProjectRequest$Outbound,
  z.ZodTypeDef,
  UpdateProjectRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() => UpdateProjectRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectRequest$ {
  /** @deprecated use `UpdateProjectRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectRequest$inboundSchema;
  /** @deprecated use `UpdateProjectRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectRequest$outboundSchema;
  /** @deprecated use `UpdateProjectRequest$Outbound` instead. */
  export type Outbound = UpdateProjectRequest$Outbound;
}

export function updateProjectRequestToJSON(
  updateProjectRequest: UpdateProjectRequest,
): string {
  return JSON.stringify(
    UpdateProjectRequest$outboundSchema.parse(updateProjectRequest),
  );
}

export function updateProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectRequest' from JSON`,
  );
}

/** @internal */
export const UpdateProjectProjectResponseBody$inboundSchema: z.ZodType<
  UpdateProjectProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type UpdateProjectProjectResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const UpdateProjectProjectResponseBody$outboundSchema: z.ZodType<
  UpdateProjectProjectResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateProjectProjectResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectProjectResponseBody$ {
  /** @deprecated use `UpdateProjectProjectResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectProjectResponseBody$inboundSchema;
  /** @deprecated use `UpdateProjectProjectResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectProjectResponseBody$outboundSchema;
  /** @deprecated use `UpdateProjectProjectResponseBody$Outbound` instead. */
  export type Outbound = UpdateProjectProjectResponseBody$Outbound;
}

export function updateProjectProjectResponseBodyToJSON(
  updateProjectProjectResponseBody: UpdateProjectProjectResponseBody,
): string {
  return JSON.stringify(
    UpdateProjectProjectResponseBody$outboundSchema.parse(
      updateProjectProjectResponseBody,
    ),
  );
}

export function updateProjectProjectResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectProjectResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectProjectResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectProjectResponseBody' from JSON`,
  );
}

/** @internal */
export const UpdateProjectResponseBody$inboundSchema: z.ZodType<
  UpdateProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  appName: z.string(),
  orgId: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type UpdateProjectResponseBody$Outbound = {
  id: string;
  name: string;
  appName: string;
  orgId?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const UpdateProjectResponseBody$outboundSchema: z.ZodType<
  UpdateProjectResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateProjectResponseBody
> = z.object({
  id: z.string(),
  name: z.string(),
  appName: z.string(),
  orgId: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectResponseBody$ {
  /** @deprecated use `UpdateProjectResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectResponseBody$inboundSchema;
  /** @deprecated use `UpdateProjectResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectResponseBody$outboundSchema;
  /** @deprecated use `UpdateProjectResponseBody$Outbound` instead. */
  export type Outbound = UpdateProjectResponseBody$Outbound;
}

export function updateProjectResponseBodyToJSON(
  updateProjectResponseBody: UpdateProjectResponseBody,
): string {
  return JSON.stringify(
    UpdateProjectResponseBody$outboundSchema.parse(updateProjectResponseBody),
  );
}

export function updateProjectResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectResponseBody' from JSON`,
  );
}

/** @internal */
export const UpdateProjectResponse$inboundSchema: z.ZodType<
  UpdateProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateProjectResponseBody$inboundSchema),
  z.lazy(() => UpdateProjectProjectResponseBody$inboundSchema),
]);

/** @internal */
export type UpdateProjectResponse$Outbound =
  | UpdateProjectResponseBody$Outbound
  | UpdateProjectProjectResponseBody$Outbound;

/** @internal */
export const UpdateProjectResponse$outboundSchema: z.ZodType<
  UpdateProjectResponse$Outbound,
  z.ZodTypeDef,
  UpdateProjectResponse
> = z.union([
  z.lazy(() => UpdateProjectResponseBody$outboundSchema),
  z.lazy(() => UpdateProjectProjectResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateProjectResponse$ {
  /** @deprecated use `UpdateProjectResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateProjectResponse$inboundSchema;
  /** @deprecated use `UpdateProjectResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateProjectResponse$outboundSchema;
  /** @deprecated use `UpdateProjectResponse$Outbound` instead. */
  export type Outbound = UpdateProjectResponse$Outbound;
}

export function updateProjectResponseToJSON(
  updateProjectResponse: UpdateProjectResponse,
): string {
  return JSON.stringify(
    UpdateProjectResponse$outboundSchema.parse(updateProjectResponse),
  );
}

export function updateProjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateProjectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateProjectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateProjectResponse' from JSON`,
  );
}
