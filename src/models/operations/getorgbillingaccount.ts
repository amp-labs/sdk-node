/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetOrgBillingAccountServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetOrgBillingAccountRequest = {
  orgId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetOrgBillingAccountBillingAccountResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Billing account
 */
export type GetOrgBillingAccountResponseBody = {
  /**
   * The billing account ID.
   */
  id: string;
  /**
   * The display name of the billing account.
   */
  displayName: string;
  /**
   * The billing provider that this account is associated with.
   */
  billingProvider: string;
  /**
   * The ID used by the billing provider to identify the account.
   */
  billingProviderRef: string;
  /**
   * The time the billing account was created.
   */
  createTime?: Date | undefined;
  /**
   * The time the billing account was last updated.
   */
  updateTime?: Date | undefined;
};

export type GetOrgBillingAccountResponse =
  | GetOrgBillingAccountResponseBody
  | GetOrgBillingAccountBillingAccountResponseBody;

/** @internal */
export const GetOrgBillingAccountRequest$inboundSchema: z.ZodType<
  GetOrgBillingAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string(),
});

/** @internal */
export type GetOrgBillingAccountRequest$Outbound = {
  orgId: string;
};

/** @internal */
export const GetOrgBillingAccountRequest$outboundSchema: z.ZodType<
  GetOrgBillingAccountRequest$Outbound,
  z.ZodTypeDef,
  GetOrgBillingAccountRequest
> = z.object({
  orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgBillingAccountRequest$ {
  /** @deprecated use `GetOrgBillingAccountRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrgBillingAccountRequest$inboundSchema;
  /** @deprecated use `GetOrgBillingAccountRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrgBillingAccountRequest$outboundSchema;
  /** @deprecated use `GetOrgBillingAccountRequest$Outbound` instead. */
  export type Outbound = GetOrgBillingAccountRequest$Outbound;
}

export function getOrgBillingAccountRequestToJSON(
  getOrgBillingAccountRequest: GetOrgBillingAccountRequest,
): string {
  return JSON.stringify(
    GetOrgBillingAccountRequest$outboundSchema.parse(
      getOrgBillingAccountRequest,
    ),
  );
}

export function getOrgBillingAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgBillingAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgBillingAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgBillingAccountRequest' from JSON`,
  );
}

/** @internal */
export const GetOrgBillingAccountBillingAccountResponseBody$inboundSchema:
  z.ZodType<
    GetOrgBillingAccountBillingAccountResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string().default("about:blank"),
    href: z.string().optional(),
    title: z.string().optional(),
    status: z.number().int().optional(),
    detail: z.string().optional(),
    instance: z.string().optional(),
    subsystem: z.string().optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requestId: z.string().optional(),
    causes: z.array(z.string()).optional(),
    remedy: z.string().optional(),
    supportEmail: z.string().optional(),
    supportPhone: z.string().optional(),
    supportUrl: z.string().optional(),
    retryable: z.boolean().optional(),
    retryAfter: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    context: z.record(z.any()).optional(),
  });

/** @internal */
export type GetOrgBillingAccountBillingAccountResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetOrgBillingAccountBillingAccountResponseBody$outboundSchema:
  z.ZodType<
    GetOrgBillingAccountBillingAccountResponseBody$Outbound,
    z.ZodTypeDef,
    GetOrgBillingAccountBillingAccountResponseBody
  > = z.object({
    type: z.string().default("about:blank"),
    href: z.string().optional(),
    title: z.string().optional(),
    status: z.number().int().optional(),
    detail: z.string().optional(),
    instance: z.string().optional(),
    subsystem: z.string().optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    requestId: z.string().optional(),
    causes: z.array(z.string()).optional(),
    remedy: z.string().optional(),
    supportEmail: z.string().optional(),
    supportPhone: z.string().optional(),
    supportUrl: z.string().optional(),
    retryable: z.boolean().optional(),
    retryAfter: z.date().transform(v => v.toISOString()).optional(),
    context: z.record(z.any()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgBillingAccountBillingAccountResponseBody$ {
  /** @deprecated use `GetOrgBillingAccountBillingAccountResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetOrgBillingAccountBillingAccountResponseBody$inboundSchema;
  /** @deprecated use `GetOrgBillingAccountBillingAccountResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetOrgBillingAccountBillingAccountResponseBody$outboundSchema;
  /** @deprecated use `GetOrgBillingAccountBillingAccountResponseBody$Outbound` instead. */
  export type Outbound =
    GetOrgBillingAccountBillingAccountResponseBody$Outbound;
}

export function getOrgBillingAccountBillingAccountResponseBodyToJSON(
  getOrgBillingAccountBillingAccountResponseBody:
    GetOrgBillingAccountBillingAccountResponseBody,
): string {
  return JSON.stringify(
    GetOrgBillingAccountBillingAccountResponseBody$outboundSchema.parse(
      getOrgBillingAccountBillingAccountResponseBody,
    ),
  );
}

export function getOrgBillingAccountBillingAccountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetOrgBillingAccountBillingAccountResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetOrgBillingAccountBillingAccountResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetOrgBillingAccountBillingAccountResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOrgBillingAccountResponseBody$inboundSchema: z.ZodType<
  GetOrgBillingAccountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  displayName: z.string(),
  billingProvider: z.string(),
  billingProviderRef: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetOrgBillingAccountResponseBody$Outbound = {
  id: string;
  displayName: string;
  billingProvider: string;
  billingProviderRef: string;
  createTime?: string | undefined;
  updateTime?: string | undefined;
};

/** @internal */
export const GetOrgBillingAccountResponseBody$outboundSchema: z.ZodType<
  GetOrgBillingAccountResponseBody$Outbound,
  z.ZodTypeDef,
  GetOrgBillingAccountResponseBody
> = z.object({
  id: z.string(),
  displayName: z.string(),
  billingProvider: z.string(),
  billingProviderRef: z.string(),
  createTime: z.date().transform(v => v.toISOString()).optional(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgBillingAccountResponseBody$ {
  /** @deprecated use `GetOrgBillingAccountResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOrgBillingAccountResponseBody$inboundSchema;
  /** @deprecated use `GetOrgBillingAccountResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOrgBillingAccountResponseBody$outboundSchema;
  /** @deprecated use `GetOrgBillingAccountResponseBody$Outbound` instead. */
  export type Outbound = GetOrgBillingAccountResponseBody$Outbound;
}

export function getOrgBillingAccountResponseBodyToJSON(
  getOrgBillingAccountResponseBody: GetOrgBillingAccountResponseBody,
): string {
  return JSON.stringify(
    GetOrgBillingAccountResponseBody$outboundSchema.parse(
      getOrgBillingAccountResponseBody,
    ),
  );
}

export function getOrgBillingAccountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgBillingAccountResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgBillingAccountResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgBillingAccountResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOrgBillingAccountResponse$inboundSchema: z.ZodType<
  GetOrgBillingAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetOrgBillingAccountResponseBody$inboundSchema),
  z.lazy(() => GetOrgBillingAccountBillingAccountResponseBody$inboundSchema),
]);

/** @internal */
export type GetOrgBillingAccountResponse$Outbound =
  | GetOrgBillingAccountResponseBody$Outbound
  | GetOrgBillingAccountBillingAccountResponseBody$Outbound;

/** @internal */
export const GetOrgBillingAccountResponse$outboundSchema: z.ZodType<
  GetOrgBillingAccountResponse$Outbound,
  z.ZodTypeDef,
  GetOrgBillingAccountResponse
> = z.union([
  z.lazy(() => GetOrgBillingAccountResponseBody$outboundSchema),
  z.lazy(() => GetOrgBillingAccountBillingAccountResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgBillingAccountResponse$ {
  /** @deprecated use `GetOrgBillingAccountResponse$inboundSchema` instead. */
  export const inboundSchema = GetOrgBillingAccountResponse$inboundSchema;
  /** @deprecated use `GetOrgBillingAccountResponse$outboundSchema` instead. */
  export const outboundSchema = GetOrgBillingAccountResponse$outboundSchema;
  /** @deprecated use `GetOrgBillingAccountResponse$Outbound` instead. */
  export type Outbound = GetOrgBillingAccountResponse$Outbound;
}

export function getOrgBillingAccountResponseToJSON(
  getOrgBillingAccountResponse: GetOrgBillingAccountResponse,
): string {
  return JSON.stringify(
    GetOrgBillingAccountResponse$outboundSchema.parse(
      getOrgBillingAccountResponse,
    ),
  );
}

export function getOrgBillingAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgBillingAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgBillingAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgBillingAccountResponse' from JSON`,
  );
}
