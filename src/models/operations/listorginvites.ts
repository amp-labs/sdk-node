/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListOrgInvitesServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type ListOrgInvitesRequest = {
  orgId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListOrgInvitesResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The type of entity that the person is invited to.
 */
export const ListOrgInvitesParentType = {
  Org: "org",
} as const;
/**
 * The type of entity that the person is invited to.
 */
export type ListOrgInvitesParentType = ClosedEnum<
  typeof ListOrgInvitesParentType
>;

/**
 * The status of the invite.
 */
export const ListOrgInvitesStatus = {
  Pending: "pending",
  Accepted: "accepted",
  Revoked: "revoked",
  Expired: "expired",
} as const;
/**
 * The status of the invite.
 */
export type ListOrgInvitesStatus = ClosedEnum<typeof ListOrgInvitesStatus>;

export type ListOrgInvitesOrgResponseBody = {
  /**
   * The invite ID.
   */
  id: string;
  /**
   * The email address of the person invited.
   */
  invitedEmail: string;
  /**
   * The type of entity that the person is invited to.
   */
  parentType: ListOrgInvitesParentType;
  /**
   * The ID of the parent (e.g. org ID).
   */
  parentId: string;
  /**
   * The status of the invite.
   */
  status: ListOrgInvitesStatus;
  /**
   * The time the invite was created.
   */
  createTime: Date;
  /**
   * The time the invite was updated.
   */
  updateTime?: Date | undefined;
};

export type ListOrgInvitesResponse =
  | ListOrgInvitesResponseBody
  | Array<ListOrgInvitesOrgResponseBody>;

/** @internal */
export const ListOrgInvitesRequest$inboundSchema: z.ZodType<
  ListOrgInvitesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string(),
});

/** @internal */
export type ListOrgInvitesRequest$Outbound = {
  orgId: string;
};

/** @internal */
export const ListOrgInvitesRequest$outboundSchema: z.ZodType<
  ListOrgInvitesRequest$Outbound,
  z.ZodTypeDef,
  ListOrgInvitesRequest
> = z.object({
  orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgInvitesRequest$ {
  /** @deprecated use `ListOrgInvitesRequest$inboundSchema` instead. */
  export const inboundSchema = ListOrgInvitesRequest$inboundSchema;
  /** @deprecated use `ListOrgInvitesRequest$outboundSchema` instead. */
  export const outboundSchema = ListOrgInvitesRequest$outboundSchema;
  /** @deprecated use `ListOrgInvitesRequest$Outbound` instead. */
  export type Outbound = ListOrgInvitesRequest$Outbound;
}

export function listOrgInvitesRequestToJSON(
  listOrgInvitesRequest: ListOrgInvitesRequest,
): string {
  return JSON.stringify(
    ListOrgInvitesRequest$outboundSchema.parse(listOrgInvitesRequest),
  );
}

export function listOrgInvitesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgInvitesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgInvitesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgInvitesRequest' from JSON`,
  );
}

/** @internal */
export const ListOrgInvitesResponseBody$inboundSchema: z.ZodType<
  ListOrgInvitesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListOrgInvitesResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListOrgInvitesResponseBody$outboundSchema: z.ZodType<
  ListOrgInvitesResponseBody$Outbound,
  z.ZodTypeDef,
  ListOrgInvitesResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgInvitesResponseBody$ {
  /** @deprecated use `ListOrgInvitesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListOrgInvitesResponseBody$inboundSchema;
  /** @deprecated use `ListOrgInvitesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListOrgInvitesResponseBody$outboundSchema;
  /** @deprecated use `ListOrgInvitesResponseBody$Outbound` instead. */
  export type Outbound = ListOrgInvitesResponseBody$Outbound;
}

export function listOrgInvitesResponseBodyToJSON(
  listOrgInvitesResponseBody: ListOrgInvitesResponseBody,
): string {
  return JSON.stringify(
    ListOrgInvitesResponseBody$outboundSchema.parse(listOrgInvitesResponseBody),
  );
}

export function listOrgInvitesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgInvitesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgInvitesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgInvitesResponseBody' from JSON`,
  );
}

/** @internal */
export const ListOrgInvitesParentType$inboundSchema: z.ZodNativeEnum<
  typeof ListOrgInvitesParentType
> = z.nativeEnum(ListOrgInvitesParentType);

/** @internal */
export const ListOrgInvitesParentType$outboundSchema: z.ZodNativeEnum<
  typeof ListOrgInvitesParentType
> = ListOrgInvitesParentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgInvitesParentType$ {
  /** @deprecated use `ListOrgInvitesParentType$inboundSchema` instead. */
  export const inboundSchema = ListOrgInvitesParentType$inboundSchema;
  /** @deprecated use `ListOrgInvitesParentType$outboundSchema` instead. */
  export const outboundSchema = ListOrgInvitesParentType$outboundSchema;
}

/** @internal */
export const ListOrgInvitesStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListOrgInvitesStatus
> = z.nativeEnum(ListOrgInvitesStatus);

/** @internal */
export const ListOrgInvitesStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListOrgInvitesStatus
> = ListOrgInvitesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgInvitesStatus$ {
  /** @deprecated use `ListOrgInvitesStatus$inboundSchema` instead. */
  export const inboundSchema = ListOrgInvitesStatus$inboundSchema;
  /** @deprecated use `ListOrgInvitesStatus$outboundSchema` instead. */
  export const outboundSchema = ListOrgInvitesStatus$outboundSchema;
}

/** @internal */
export const ListOrgInvitesOrgResponseBody$inboundSchema: z.ZodType<
  ListOrgInvitesOrgResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  invitedEmail: z.string(),
  parentType: ListOrgInvitesParentType$inboundSchema,
  parentId: z.string(),
  status: ListOrgInvitesStatus$inboundSchema,
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListOrgInvitesOrgResponseBody$Outbound = {
  id: string;
  invitedEmail: string;
  parentType: string;
  parentId: string;
  status: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListOrgInvitesOrgResponseBody$outboundSchema: z.ZodType<
  ListOrgInvitesOrgResponseBody$Outbound,
  z.ZodTypeDef,
  ListOrgInvitesOrgResponseBody
> = z.object({
  id: z.string(),
  invitedEmail: z.string(),
  parentType: ListOrgInvitesParentType$outboundSchema,
  parentId: z.string(),
  status: ListOrgInvitesStatus$outboundSchema,
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgInvitesOrgResponseBody$ {
  /** @deprecated use `ListOrgInvitesOrgResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListOrgInvitesOrgResponseBody$inboundSchema;
  /** @deprecated use `ListOrgInvitesOrgResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListOrgInvitesOrgResponseBody$outboundSchema;
  /** @deprecated use `ListOrgInvitesOrgResponseBody$Outbound` instead. */
  export type Outbound = ListOrgInvitesOrgResponseBody$Outbound;
}

export function listOrgInvitesOrgResponseBodyToJSON(
  listOrgInvitesOrgResponseBody: ListOrgInvitesOrgResponseBody,
): string {
  return JSON.stringify(
    ListOrgInvitesOrgResponseBody$outboundSchema.parse(
      listOrgInvitesOrgResponseBody,
    ),
  );
}

export function listOrgInvitesOrgResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgInvitesOrgResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgInvitesOrgResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgInvitesOrgResponseBody' from JSON`,
  );
}

/** @internal */
export const ListOrgInvitesResponse$inboundSchema: z.ZodType<
  ListOrgInvitesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListOrgInvitesResponseBody$inboundSchema),
  z.array(z.lazy(() => ListOrgInvitesOrgResponseBody$inboundSchema)),
]);

/** @internal */
export type ListOrgInvitesResponse$Outbound =
  | ListOrgInvitesResponseBody$Outbound
  | Array<ListOrgInvitesOrgResponseBody$Outbound>;

/** @internal */
export const ListOrgInvitesResponse$outboundSchema: z.ZodType<
  ListOrgInvitesResponse$Outbound,
  z.ZodTypeDef,
  ListOrgInvitesResponse
> = z.union([
  z.lazy(() => ListOrgInvitesResponseBody$outboundSchema),
  z.array(z.lazy(() => ListOrgInvitesOrgResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgInvitesResponse$ {
  /** @deprecated use `ListOrgInvitesResponse$inboundSchema` instead. */
  export const inboundSchema = ListOrgInvitesResponse$inboundSchema;
  /** @deprecated use `ListOrgInvitesResponse$outboundSchema` instead. */
  export const outboundSchema = ListOrgInvitesResponse$outboundSchema;
  /** @deprecated use `ListOrgInvitesResponse$Outbound` instead. */
  export type Outbound = ListOrgInvitesResponse$Outbound;
}

export function listOrgInvitesResponseToJSON(
  listOrgInvitesResponse: ListOrgInvitesResponse,
): string {
  return JSON.stringify(
    ListOrgInvitesResponse$outboundSchema.parse(listOrgInvitesResponse),
  );
}

export function listOrgInvitesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgInvitesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgInvitesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgInvitesResponse' from JSON`,
  );
}
