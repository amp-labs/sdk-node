/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListInstallationsServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type ListInstallationsRequest = {
  projectIdOrName: string;
  integrationId: string;
  groupRef?: string | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListInstallationsResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type Group = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type ListInstallationsProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type ListInstallationsGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type ListInstallationsConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const ListInstallationsAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type ListInstallationsAuthScheme = ClosedEnum<
  typeof ListInstallationsAuthScheme
>;

/**
 * The status of the connection.
 */
export const ListInstallationsStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type ListInstallationsStatus = ClosedEnum<
  typeof ListInstallationsStatus
>;

/**
 * The access token for the connection.
 */
export type ListInstallationsAccessToken = {
  token: string;
};

/**
 * The refresh token to use for the connection.
 */
export type ListInstallationsRefreshToken = {
  token: string;
};

export type ListInstallationsOauth2AuthorizationCode = {
  /**
   * The access token for the connection.
   */
  accessToken?: ListInstallationsAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: ListInstallationsRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type Connection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: ListInstallationsProviderApp | undefined;
  group: ListInstallationsGroup;
  consumer: ListInstallationsConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. "salesforce-instance-domain")
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: ListInstallationsAuthScheme;
  /**
   * The status of the connection.
   */
  status: ListInstallationsStatus;
  oauth2AuthorizationCode?:
    | ListInstallationsOauth2AuthorizationCode
    | undefined;
};

export type ListInstallationsProxy = {
  enabled?: boolean | undefined;
};

export type ListInstallationsContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: ListInstallationsProxy | undefined;
};

export type ListInstallationsConfig = {
  /**
   * The config ID.
   */
  id: string;
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId: string;
  /**
   * The time the config was created.
   */
  createTime: Date;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy: string;
  content: ListInstallationsContent;
};

export type ListInstallationsInstallationResponseBody = {
  /**
   * The installation ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  group?: Group | undefined;
  /**
   * The health status of the installation ("healthy", "unhealthy").
   */
  healthStatus: string;
  connection: Connection;
  /**
   * The time the integration was first installed.
   */
  createTime: Date;
  /**
   * The person who did the installation, in the format of "consumer:{consumer-id}".
   */
  createdBy: string;
  /**
   * The time the installation was last updated with a new config.
   */
  updateTime?: Date | undefined;
  config: ListInstallationsConfig;
};

export type ListInstallationsResponse =
  | ListInstallationsResponseBody
  | Array<ListInstallationsInstallationResponseBody>;

/** @internal */
export const ListInstallationsRequest$inboundSchema: z.ZodType<
  ListInstallationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  groupRef: z.string().optional(),
});

/** @internal */
export type ListInstallationsRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  groupRef?: string | undefined;
};

/** @internal */
export const ListInstallationsRequest$outboundSchema: z.ZodType<
  ListInstallationsRequest$Outbound,
  z.ZodTypeDef,
  ListInstallationsRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  groupRef: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsRequest$ {
  /** @deprecated use `ListInstallationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsRequest$inboundSchema;
  /** @deprecated use `ListInstallationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsRequest$outboundSchema;
  /** @deprecated use `ListInstallationsRequest$Outbound` instead. */
  export type Outbound = ListInstallationsRequest$Outbound;
}

export function listInstallationsRequestToJSON(
  listInstallationsRequest: ListInstallationsRequest,
): string {
  return JSON.stringify(
    ListInstallationsRequest$outboundSchema.parse(listInstallationsRequest),
  );
}

export function listInstallationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsRequest' from JSON`,
  );
}

/** @internal */
export const ListInstallationsResponseBody$inboundSchema: z.ZodType<
  ListInstallationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListInstallationsResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListInstallationsResponseBody$outboundSchema: z.ZodType<
  ListInstallationsResponseBody$Outbound,
  z.ZodTypeDef,
  ListInstallationsResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsResponseBody$ {
  /** @deprecated use `ListInstallationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsResponseBody$inboundSchema;
  /** @deprecated use `ListInstallationsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsResponseBody$outboundSchema;
  /** @deprecated use `ListInstallationsResponseBody$Outbound` instead. */
  export type Outbound = ListInstallationsResponseBody$Outbound;
}

export function listInstallationsResponseBodyToJSON(
  listInstallationsResponseBody: ListInstallationsResponseBody,
): string {
  return JSON.stringify(
    ListInstallationsResponseBody$outboundSchema.parse(
      listInstallationsResponseBody,
    ),
  );
}

export function listInstallationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsResponseBody' from JSON`,
  );
}

/** @internal */
export const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z
  .object({
    groupRef: z.string(),
    groupName: z.string(),
    projectId: z.string(),
    createTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updateTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type Group$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const Group$outboundSchema: z.ZodType<
  Group$Outbound,
  z.ZodTypeDef,
  Group
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Group$ {
  /** @deprecated use `Group$inboundSchema` instead. */
  export const inboundSchema = Group$inboundSchema;
  /** @deprecated use `Group$outboundSchema` instead. */
  export const outboundSchema = Group$outboundSchema;
  /** @deprecated use `Group$Outbound` instead. */
  export type Outbound = Group$Outbound;
}

export function groupToJSON(group: Group): string {
  return JSON.stringify(Group$outboundSchema.parse(group));
}

export function groupFromJSON(
  jsonString: string,
): SafeParseResult<Group, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Group$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Group' from JSON`,
  );
}

/** @internal */
export const ListInstallationsProviderApp$inboundSchema: z.ZodType<
  ListInstallationsProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListInstallationsProviderApp$outboundSchema: z.ZodType<
  ListInstallationsProviderApp$Outbound,
  z.ZodTypeDef,
  ListInstallationsProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsProviderApp$ {
  /** @deprecated use `ListInstallationsProviderApp$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsProviderApp$inboundSchema;
  /** @deprecated use `ListInstallationsProviderApp$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsProviderApp$outboundSchema;
  /** @deprecated use `ListInstallationsProviderApp$Outbound` instead. */
  export type Outbound = ListInstallationsProviderApp$Outbound;
}

export function listInstallationsProviderAppToJSON(
  listInstallationsProviderApp: ListInstallationsProviderApp,
): string {
  return JSON.stringify(
    ListInstallationsProviderApp$outboundSchema.parse(
      listInstallationsProviderApp,
    ),
  );
}

export function listInstallationsProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsProviderApp' from JSON`,
  );
}

/** @internal */
export const ListInstallationsGroup$inboundSchema: z.ZodType<
  ListInstallationsGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListInstallationsGroup$outboundSchema: z.ZodType<
  ListInstallationsGroup$Outbound,
  z.ZodTypeDef,
  ListInstallationsGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsGroup$ {
  /** @deprecated use `ListInstallationsGroup$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsGroup$inboundSchema;
  /** @deprecated use `ListInstallationsGroup$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsGroup$outboundSchema;
  /** @deprecated use `ListInstallationsGroup$Outbound` instead. */
  export type Outbound = ListInstallationsGroup$Outbound;
}

export function listInstallationsGroupToJSON(
  listInstallationsGroup: ListInstallationsGroup,
): string {
  return JSON.stringify(
    ListInstallationsGroup$outboundSchema.parse(listInstallationsGroup),
  );
}

export function listInstallationsGroupFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsGroup' from JSON`,
  );
}

/** @internal */
export const ListInstallationsConsumer$inboundSchema: z.ZodType<
  ListInstallationsConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ListInstallationsConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const ListInstallationsConsumer$outboundSchema: z.ZodType<
  ListInstallationsConsumer$Outbound,
  z.ZodTypeDef,
  ListInstallationsConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsConsumer$ {
  /** @deprecated use `ListInstallationsConsumer$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsConsumer$inboundSchema;
  /** @deprecated use `ListInstallationsConsumer$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsConsumer$outboundSchema;
  /** @deprecated use `ListInstallationsConsumer$Outbound` instead. */
  export type Outbound = ListInstallationsConsumer$Outbound;
}

export function listInstallationsConsumerToJSON(
  listInstallationsConsumer: ListInstallationsConsumer,
): string {
  return JSON.stringify(
    ListInstallationsConsumer$outboundSchema.parse(listInstallationsConsumer),
  );
}

export function listInstallationsConsumerFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsConsumer' from JSON`,
  );
}

/** @internal */
export const ListInstallationsAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsAuthScheme
> = z.nativeEnum(ListInstallationsAuthScheme);

/** @internal */
export const ListInstallationsAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsAuthScheme
> = ListInstallationsAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsAuthScheme$ {
  /** @deprecated use `ListInstallationsAuthScheme$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsAuthScheme$inboundSchema;
  /** @deprecated use `ListInstallationsAuthScheme$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsAuthScheme$outboundSchema;
}

/** @internal */
export const ListInstallationsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsStatus
> = z.nativeEnum(ListInstallationsStatus);

/** @internal */
export const ListInstallationsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListInstallationsStatus
> = ListInstallationsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsStatus$ {
  /** @deprecated use `ListInstallationsStatus$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsStatus$inboundSchema;
  /** @deprecated use `ListInstallationsStatus$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsStatus$outboundSchema;
}

/** @internal */
export const ListInstallationsAccessToken$inboundSchema: z.ZodType<
  ListInstallationsAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type ListInstallationsAccessToken$Outbound = {
  token: string;
};

/** @internal */
export const ListInstallationsAccessToken$outboundSchema: z.ZodType<
  ListInstallationsAccessToken$Outbound,
  z.ZodTypeDef,
  ListInstallationsAccessToken
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsAccessToken$ {
  /** @deprecated use `ListInstallationsAccessToken$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsAccessToken$inboundSchema;
  /** @deprecated use `ListInstallationsAccessToken$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsAccessToken$outboundSchema;
  /** @deprecated use `ListInstallationsAccessToken$Outbound` instead. */
  export type Outbound = ListInstallationsAccessToken$Outbound;
}

export function listInstallationsAccessTokenToJSON(
  listInstallationsAccessToken: ListInstallationsAccessToken,
): string {
  return JSON.stringify(
    ListInstallationsAccessToken$outboundSchema.parse(
      listInstallationsAccessToken,
    ),
  );
}

export function listInstallationsAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsAccessToken' from JSON`,
  );
}

/** @internal */
export const ListInstallationsRefreshToken$inboundSchema: z.ZodType<
  ListInstallationsRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type ListInstallationsRefreshToken$Outbound = {
  token: string;
};

/** @internal */
export const ListInstallationsRefreshToken$outboundSchema: z.ZodType<
  ListInstallationsRefreshToken$Outbound,
  z.ZodTypeDef,
  ListInstallationsRefreshToken
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsRefreshToken$ {
  /** @deprecated use `ListInstallationsRefreshToken$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsRefreshToken$inboundSchema;
  /** @deprecated use `ListInstallationsRefreshToken$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsRefreshToken$outboundSchema;
  /** @deprecated use `ListInstallationsRefreshToken$Outbound` instead. */
  export type Outbound = ListInstallationsRefreshToken$Outbound;
}

export function listInstallationsRefreshTokenToJSON(
  listInstallationsRefreshToken: ListInstallationsRefreshToken,
): string {
  return JSON.stringify(
    ListInstallationsRefreshToken$outboundSchema.parse(
      listInstallationsRefreshToken,
    ),
  );
}

export function listInstallationsRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsRefreshToken' from JSON`,
  );
}

/** @internal */
export const ListInstallationsOauth2AuthorizationCode$inboundSchema: z.ZodType<
  ListInstallationsOauth2AuthorizationCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.lazy(() => ListInstallationsAccessToken$inboundSchema)
    .optional(),
  refreshToken: z.lazy(() => ListInstallationsRefreshToken$inboundSchema)
    .optional(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type ListInstallationsOauth2AuthorizationCode$Outbound = {
  accessToken?: ListInstallationsAccessToken$Outbound | undefined;
  refreshToken?: ListInstallationsRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ListInstallationsOauth2AuthorizationCode$outboundSchema: z.ZodType<
  ListInstallationsOauth2AuthorizationCode$Outbound,
  z.ZodTypeDef,
  ListInstallationsOauth2AuthorizationCode
> = z.object({
  accessToken: z.lazy(() => ListInstallationsAccessToken$outboundSchema)
    .optional(),
  refreshToken: z.lazy(() => ListInstallationsRefreshToken$outboundSchema)
    .optional(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsOauth2AuthorizationCode$ {
  /** @deprecated use `ListInstallationsOauth2AuthorizationCode$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsOauth2AuthorizationCode$inboundSchema;
  /** @deprecated use `ListInstallationsOauth2AuthorizationCode$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsOauth2AuthorizationCode$outboundSchema;
  /** @deprecated use `ListInstallationsOauth2AuthorizationCode$Outbound` instead. */
  export type Outbound = ListInstallationsOauth2AuthorizationCode$Outbound;
}

export function listInstallationsOauth2AuthorizationCodeToJSON(
  listInstallationsOauth2AuthorizationCode:
    ListInstallationsOauth2AuthorizationCode,
): string {
  return JSON.stringify(
    ListInstallationsOauth2AuthorizationCode$outboundSchema.parse(
      listInstallationsOauth2AuthorizationCode,
    ),
  );
}

export function listInstallationsOauth2AuthorizationCodeFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstallationsOauth2AuthorizationCode,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsOauth2AuthorizationCode$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListInstallationsOauth2AuthorizationCode' from JSON`,
  );
}

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => ListInstallationsProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => ListInstallationsGroup$inboundSchema),
  consumer: z.lazy(() => ListInstallationsConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: ListInstallationsAuthScheme$inboundSchema,
  status: ListInstallationsStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    ListInstallationsOauth2AuthorizationCode$inboundSchema
  ).optional(),
});

/** @internal */
export type Connection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: ListInstallationsProviderApp$Outbound | undefined;
  group: ListInstallationsGroup$Outbound;
  consumer: ListInstallationsConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | ListInstallationsOauth2AuthorizationCode$Outbound
    | undefined;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => ListInstallationsProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => ListInstallationsGroup$outboundSchema),
  consumer: z.lazy(() => ListInstallationsConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: ListInstallationsAuthScheme$outboundSchema,
  status: ListInstallationsStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    ListInstallationsOauth2AuthorizationCode$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}

/** @internal */
export const ListInstallationsProxy$inboundSchema: z.ZodType<
  ListInstallationsProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type ListInstallationsProxy$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const ListInstallationsProxy$outboundSchema: z.ZodType<
  ListInstallationsProxy$Outbound,
  z.ZodTypeDef,
  ListInstallationsProxy
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsProxy$ {
  /** @deprecated use `ListInstallationsProxy$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsProxy$inboundSchema;
  /** @deprecated use `ListInstallationsProxy$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsProxy$outboundSchema;
  /** @deprecated use `ListInstallationsProxy$Outbound` instead. */
  export type Outbound = ListInstallationsProxy$Outbound;
}

export function listInstallationsProxyToJSON(
  listInstallationsProxy: ListInstallationsProxy,
): string {
  return JSON.stringify(
    ListInstallationsProxy$outboundSchema.parse(listInstallationsProxy),
  );
}

export function listInstallationsProxyFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsProxy' from JSON`,
  );
}

/** @internal */
export const ListInstallationsContent$inboundSchema: z.ZodType<
  ListInstallationsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => ListInstallationsProxy$inboundSchema).optional(),
});

/** @internal */
export type ListInstallationsContent$Outbound = {
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: ListInstallationsProxy$Outbound | undefined;
};

/** @internal */
export const ListInstallationsContent$outboundSchema: z.ZodType<
  ListInstallationsContent$Outbound,
  z.ZodTypeDef,
  ListInstallationsContent
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => ListInstallationsProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsContent$ {
  /** @deprecated use `ListInstallationsContent$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsContent$inboundSchema;
  /** @deprecated use `ListInstallationsContent$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsContent$outboundSchema;
  /** @deprecated use `ListInstallationsContent$Outbound` instead. */
  export type Outbound = ListInstallationsContent$Outbound;
}

export function listInstallationsContentToJSON(
  listInstallationsContent: ListInstallationsContent,
): string {
  return JSON.stringify(
    ListInstallationsContent$outboundSchema.parse(listInstallationsContent),
  );
}

export function listInstallationsContentFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsContent' from JSON`,
  );
}

/** @internal */
export const ListInstallationsConfig$inboundSchema: z.ZodType<
  ListInstallationsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  content: z.lazy(() => ListInstallationsContent$inboundSchema),
});

/** @internal */
export type ListInstallationsConfig$Outbound = {
  id: string;
  revisionId: string;
  createTime: string;
  createdBy: string;
  content: ListInstallationsContent$Outbound;
};

/** @internal */
export const ListInstallationsConfig$outboundSchema: z.ZodType<
  ListInstallationsConfig$Outbound,
  z.ZodTypeDef,
  ListInstallationsConfig
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  content: z.lazy(() => ListInstallationsContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsConfig$ {
  /** @deprecated use `ListInstallationsConfig$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsConfig$inboundSchema;
  /** @deprecated use `ListInstallationsConfig$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsConfig$outboundSchema;
  /** @deprecated use `ListInstallationsConfig$Outbound` instead. */
  export type Outbound = ListInstallationsConfig$Outbound;
}

export function listInstallationsConfigToJSON(
  listInstallationsConfig: ListInstallationsConfig,
): string {
  return JSON.stringify(
    ListInstallationsConfig$outboundSchema.parse(listInstallationsConfig),
  );
}

export function listInstallationsConfigFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsConfig' from JSON`,
  );
}

/** @internal */
export const ListInstallationsInstallationResponseBody$inboundSchema: z.ZodType<
  ListInstallationsInstallationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => Group$inboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => Connection$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  config: z.lazy(() => ListInstallationsConfig$inboundSchema),
});

/** @internal */
export type ListInstallationsInstallationResponseBody$Outbound = {
  id: string;
  projectId: string;
  integrationId: string;
  group?: Group$Outbound | undefined;
  healthStatus: string;
  connection: Connection$Outbound;
  createTime: string;
  createdBy: string;
  updateTime?: string | undefined;
  config: ListInstallationsConfig$Outbound;
};

/** @internal */
export const ListInstallationsInstallationResponseBody$outboundSchema:
  z.ZodType<
    ListInstallationsInstallationResponseBody$Outbound,
    z.ZodTypeDef,
    ListInstallationsInstallationResponseBody
  > = z.object({
    id: z.string(),
    projectId: z.string(),
    integrationId: z.string(),
    group: z.lazy(() => Group$outboundSchema).optional(),
    healthStatus: z.string(),
    connection: z.lazy(() => Connection$outboundSchema),
    createTime: z.date().transform(v => v.toISOString()),
    createdBy: z.string(),
    updateTime: z.date().transform(v => v.toISOString()).optional(),
    config: z.lazy(() => ListInstallationsConfig$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsInstallationResponseBody$ {
  /** @deprecated use `ListInstallationsInstallationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListInstallationsInstallationResponseBody$inboundSchema;
  /** @deprecated use `ListInstallationsInstallationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListInstallationsInstallationResponseBody$outboundSchema;
  /** @deprecated use `ListInstallationsInstallationResponseBody$Outbound` instead. */
  export type Outbound = ListInstallationsInstallationResponseBody$Outbound;
}

export function listInstallationsInstallationResponseBodyToJSON(
  listInstallationsInstallationResponseBody:
    ListInstallationsInstallationResponseBody,
): string {
  return JSON.stringify(
    ListInstallationsInstallationResponseBody$outboundSchema.parse(
      listInstallationsInstallationResponseBody,
    ),
  );
}

export function listInstallationsInstallationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListInstallationsInstallationResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListInstallationsInstallationResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListInstallationsInstallationResponseBody' from JSON`,
  );
}

/** @internal */
export const ListInstallationsResponse$inboundSchema: z.ZodType<
  ListInstallationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListInstallationsResponseBody$inboundSchema),
  z.array(
    z.lazy(() => ListInstallationsInstallationResponseBody$inboundSchema),
  ),
]);

/** @internal */
export type ListInstallationsResponse$Outbound =
  | ListInstallationsResponseBody$Outbound
  | Array<ListInstallationsInstallationResponseBody$Outbound>;

/** @internal */
export const ListInstallationsResponse$outboundSchema: z.ZodType<
  ListInstallationsResponse$Outbound,
  z.ZodTypeDef,
  ListInstallationsResponse
> = z.union([
  z.lazy(() => ListInstallationsResponseBody$outboundSchema),
  z.array(
    z.lazy(() => ListInstallationsInstallationResponseBody$outboundSchema),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInstallationsResponse$ {
  /** @deprecated use `ListInstallationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListInstallationsResponse$inboundSchema;
  /** @deprecated use `ListInstallationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListInstallationsResponse$outboundSchema;
  /** @deprecated use `ListInstallationsResponse$Outbound` instead. */
  export type Outbound = ListInstallationsResponse$Outbound;
}

export function listInstallationsResponseToJSON(
  listInstallationsResponse: ListInstallationsResponse,
): string {
  return JSON.stringify(
    ListInstallationsResponse$outboundSchema.parse(listInstallationsResponse),
  );
}

export function listInstallationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInstallationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInstallationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInstallationsResponse' from JSON`,
  );
}
