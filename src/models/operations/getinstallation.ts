/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetInstallationServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetInstallationRequest = {
  projectIdOrName: string;
  integrationId: string;
  installationId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetInstallationInstallationResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type GetInstallationGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type GetInstallationProviderApp = {
  /**
   * The provider app ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The ID used by the provider to identify the app (optional).
   */
  externalRef?: string | undefined;
  /**
   * The SaaS provider that this app connects to.
   */
  provider: string;
  /**
   * The OAuth client ID for this app.
   */
  clientId: string;
  /**
   * The OAuth scopes for this app.
   */
  scopes?: Array<string> | undefined;
  /**
   * The time the provider app was created.
   */
  createTime: Date;
  /**
   * The time the provider app was updated.
   */
  updateTime?: Date | undefined;
};

export type GetInstallationInstallationGroup = {
  /**
   * The ID of the user group that has access to this installation.
   */
  groupRef: string;
  /**
   * The name of the user group that has access to this installation.
   */
  groupName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the group was created.
   */
  createTime: Date;
  /**
   * The time the group was last updated.
   */
  updateTime?: Date | undefined;
};

export type GetInstallationConsumer = {
  /**
   * The consumer reference.
   */
  consumerRef: string;
  /**
   * The name of the consumer.
   */
  consumerName: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The time the consumer was created.
   */
  createTime: Date;
  /**
   * The time the consumer was last updated.
   */
  updateTime?: Date | undefined;
};

/**
 * The authentication scheme used for this connection.
 */
export const GetInstallationAuthScheme = {
  None: "none",
  ApiKey: "apiKey",
  Basic: "basic",
  Oauth2AuthorizationCode: "oauth2/authorizationCode",
  Oauth2AuthorizationCodePKCE: "oauth2/authorizationCodePKCE",
  Oauth2ClientCredentials: "oauth2/clientCredentials",
  Oauth2Password: "oauth2/password",
} as const;
/**
 * The authentication scheme used for this connection.
 */
export type GetInstallationAuthScheme = ClosedEnum<
  typeof GetInstallationAuthScheme
>;

/**
 * The status of the connection.
 */
export const GetInstallationStatus = {
  Created: "created",
  Working: "working",
  BadCredentials: "bad_credentials",
} as const;
/**
 * The status of the connection.
 */
export type GetInstallationStatus = ClosedEnum<typeof GetInstallationStatus>;

/**
 * The access token for the connection.
 */
export type GetInstallationAccessToken = {
  token: string;
};

/**
 * The refresh token to use for the connection.
 */
export type GetInstallationRefreshToken = {
  token: string;
};

export type GetInstallationOauth2AuthorizationCode = {
  /**
   * The access token for the connection.
   */
  accessToken?: GetInstallationAccessToken | undefined;
  /**
   * The refresh token to use for the connection.
   */
  refreshToken?: GetInstallationRefreshToken | undefined;
  /**
   * The scopes for the tokens.
   */
  scopes?: Array<string> | undefined;
};

export type GetInstallationConnection = {
  /**
   * The connection ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The SaaS provider that this Connection is for.
   */
  provider: string;
  providerApp?: GetInstallationProviderApp | undefined;
  group: GetInstallationInstallationGroup;
  consumer: GetInstallationConsumer;
  /**
   * If available, the identifier for the provider workspace (e.g. "salesforce-instance-domain")
   */
  providerWorkspaceRef?: string | undefined;
  /**
   * If available, the ID that Salesforce/Hubspot uses to identify this user (e.g. Salesforce has IDs in the form of https://login.salesforce.com/id/00D4x0000019CQTEA2/0054x000000orJ4AA)
   */
  providerConsumerRef?: string | undefined;
  /**
   * The time the connection was created.
   */
  createTime: Date;
  /**
   * The time the connection was last updated.
   */
  updateTime?: Date | undefined;
  /**
   * The authentication scheme used for this connection.
   */
  authScheme: GetInstallationAuthScheme;
  /**
   * The status of the connection.
   */
  status: GetInstallationStatus;
  oauth2AuthorizationCode?: GetInstallationOauth2AuthorizationCode | undefined;
  /**
   * The API key used while making the connection.
   */
  apiKey?: string | undefined;
};

export type GetInstallationProxy = {
  enabled?: boolean | undefined;
};

export type GetInstallationContent = {
  /**
   * The SaaS API that we are integrating with.
   */
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: GetInstallationProxy | undefined;
};

export type GetInstallationConfig = {
  /**
   * The config ID.
   */
  id: string;
  /**
   * The ID of the revision that this config is based on.
   */
  revisionId: string;
  /**
   * The time the config was created.
   */
  createTime: Date;
  /**
   * The person who created the config, in the format of "consumer:{consumer-id}" or "builder:{builder-id}".
   */
  createdBy: string;
  content: GetInstallationContent;
};

/**
 * The installation
 */
export type GetInstallationResponseBody = {
  /**
   * The installation ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration ID.
   */
  integrationId: string;
  group?: GetInstallationGroup | undefined;
  /**
   * The health status of the installation ("healthy", "unhealthy").
   */
  healthStatus: string;
  connection: GetInstallationConnection;
  /**
   * The time the integration was first installed.
   */
  createTime: Date;
  /**
   * The person who did the installation, in the format of "consumer:{consumer-id}".
   */
  createdBy: string;
  /**
   * The time the installation was last updated with a new config.
   */
  updateTime?: Date | undefined;
  config: GetInstallationConfig;
};

export type GetInstallationResponse =
  | GetInstallationResponseBody
  | GetInstallationInstallationResponseBody;

/** @internal */
export const GetInstallationRequest$inboundSchema: z.ZodType<
  GetInstallationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  installationId: z.string(),
});

/** @internal */
export type GetInstallationRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  installationId: string;
};

/** @internal */
export const GetInstallationRequest$outboundSchema: z.ZodType<
  GetInstallationRequest$Outbound,
  z.ZodTypeDef,
  GetInstallationRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  installationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationRequest$ {
  /** @deprecated use `GetInstallationRequest$inboundSchema` instead. */
  export const inboundSchema = GetInstallationRequest$inboundSchema;
  /** @deprecated use `GetInstallationRequest$outboundSchema` instead. */
  export const outboundSchema = GetInstallationRequest$outboundSchema;
  /** @deprecated use `GetInstallationRequest$Outbound` instead. */
  export type Outbound = GetInstallationRequest$Outbound;
}

export function getInstallationRequestToJSON(
  getInstallationRequest: GetInstallationRequest,
): string {
  return JSON.stringify(
    GetInstallationRequest$outboundSchema.parse(getInstallationRequest),
  );
}

export function getInstallationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationRequest' from JSON`,
  );
}

/** @internal */
export const GetInstallationInstallationResponseBody$inboundSchema: z.ZodType<
  GetInstallationInstallationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetInstallationInstallationResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetInstallationInstallationResponseBody$outboundSchema: z.ZodType<
  GetInstallationInstallationResponseBody$Outbound,
  z.ZodTypeDef,
  GetInstallationInstallationResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationInstallationResponseBody$ {
  /** @deprecated use `GetInstallationInstallationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetInstallationInstallationResponseBody$inboundSchema;
  /** @deprecated use `GetInstallationInstallationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetInstallationInstallationResponseBody$outboundSchema;
  /** @deprecated use `GetInstallationInstallationResponseBody$Outbound` instead. */
  export type Outbound = GetInstallationInstallationResponseBody$Outbound;
}

export function getInstallationInstallationResponseBodyToJSON(
  getInstallationInstallationResponseBody:
    GetInstallationInstallationResponseBody,
): string {
  return JSON.stringify(
    GetInstallationInstallationResponseBody$outboundSchema.parse(
      getInstallationInstallationResponseBody,
    ),
  );
}

export function getInstallationInstallationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetInstallationInstallationResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetInstallationInstallationResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetInstallationInstallationResponseBody' from JSON`,
  );
}

/** @internal */
export const GetInstallationGroup$inboundSchema: z.ZodType<
  GetInstallationGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetInstallationGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GetInstallationGroup$outboundSchema: z.ZodType<
  GetInstallationGroup$Outbound,
  z.ZodTypeDef,
  GetInstallationGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationGroup$ {
  /** @deprecated use `GetInstallationGroup$inboundSchema` instead. */
  export const inboundSchema = GetInstallationGroup$inboundSchema;
  /** @deprecated use `GetInstallationGroup$outboundSchema` instead. */
  export const outboundSchema = GetInstallationGroup$outboundSchema;
  /** @deprecated use `GetInstallationGroup$Outbound` instead. */
  export type Outbound = GetInstallationGroup$Outbound;
}

export function getInstallationGroupToJSON(
  getInstallationGroup: GetInstallationGroup,
): string {
  return JSON.stringify(
    GetInstallationGroup$outboundSchema.parse(getInstallationGroup),
  );
}

export function getInstallationGroupFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationGroup' from JSON`,
  );
}

/** @internal */
export const GetInstallationProviderApp$inboundSchema: z.ZodType<
  GetInstallationProviderApp,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetInstallationProviderApp$Outbound = {
  id: string;
  projectId: string;
  externalRef?: string | undefined;
  provider: string;
  clientId: string;
  scopes?: Array<string> | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GetInstallationProviderApp$outboundSchema: z.ZodType<
  GetInstallationProviderApp$Outbound,
  z.ZodTypeDef,
  GetInstallationProviderApp
> = z.object({
  id: z.string(),
  projectId: z.string(),
  externalRef: z.string().optional(),
  provider: z.string(),
  clientId: z.string(),
  scopes: z.array(z.string()).optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationProviderApp$ {
  /** @deprecated use `GetInstallationProviderApp$inboundSchema` instead. */
  export const inboundSchema = GetInstallationProviderApp$inboundSchema;
  /** @deprecated use `GetInstallationProviderApp$outboundSchema` instead. */
  export const outboundSchema = GetInstallationProviderApp$outboundSchema;
  /** @deprecated use `GetInstallationProviderApp$Outbound` instead. */
  export type Outbound = GetInstallationProviderApp$Outbound;
}

export function getInstallationProviderAppToJSON(
  getInstallationProviderApp: GetInstallationProviderApp,
): string {
  return JSON.stringify(
    GetInstallationProviderApp$outboundSchema.parse(getInstallationProviderApp),
  );
}

export function getInstallationProviderAppFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationProviderApp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationProviderApp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationProviderApp' from JSON`,
  );
}

/** @internal */
export const GetInstallationInstallationGroup$inboundSchema: z.ZodType<
  GetInstallationInstallationGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetInstallationInstallationGroup$Outbound = {
  groupRef: string;
  groupName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GetInstallationInstallationGroup$outboundSchema: z.ZodType<
  GetInstallationInstallationGroup$Outbound,
  z.ZodTypeDef,
  GetInstallationInstallationGroup
> = z.object({
  groupRef: z.string(),
  groupName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationInstallationGroup$ {
  /** @deprecated use `GetInstallationInstallationGroup$inboundSchema` instead. */
  export const inboundSchema = GetInstallationInstallationGroup$inboundSchema;
  /** @deprecated use `GetInstallationInstallationGroup$outboundSchema` instead. */
  export const outboundSchema = GetInstallationInstallationGroup$outboundSchema;
  /** @deprecated use `GetInstallationInstallationGroup$Outbound` instead. */
  export type Outbound = GetInstallationInstallationGroup$Outbound;
}

export function getInstallationInstallationGroupToJSON(
  getInstallationInstallationGroup: GetInstallationInstallationGroup,
): string {
  return JSON.stringify(
    GetInstallationInstallationGroup$outboundSchema.parse(
      getInstallationInstallationGroup,
    ),
  );
}

export function getInstallationInstallationGroupFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationInstallationGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationInstallationGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationInstallationGroup' from JSON`,
  );
}

/** @internal */
export const GetInstallationConsumer$inboundSchema: z.ZodType<
  GetInstallationConsumer,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetInstallationConsumer$Outbound = {
  consumerRef: string;
  consumerName: string;
  projectId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GetInstallationConsumer$outboundSchema: z.ZodType<
  GetInstallationConsumer$Outbound,
  z.ZodTypeDef,
  GetInstallationConsumer
> = z.object({
  consumerRef: z.string(),
  consumerName: z.string(),
  projectId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationConsumer$ {
  /** @deprecated use `GetInstallationConsumer$inboundSchema` instead. */
  export const inboundSchema = GetInstallationConsumer$inboundSchema;
  /** @deprecated use `GetInstallationConsumer$outboundSchema` instead. */
  export const outboundSchema = GetInstallationConsumer$outboundSchema;
  /** @deprecated use `GetInstallationConsumer$Outbound` instead. */
  export type Outbound = GetInstallationConsumer$Outbound;
}

export function getInstallationConsumerToJSON(
  getInstallationConsumer: GetInstallationConsumer,
): string {
  return JSON.stringify(
    GetInstallationConsumer$outboundSchema.parse(getInstallationConsumer),
  );
}

export function getInstallationConsumerFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationConsumer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationConsumer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationConsumer' from JSON`,
  );
}

/** @internal */
export const GetInstallationAuthScheme$inboundSchema: z.ZodNativeEnum<
  typeof GetInstallationAuthScheme
> = z.nativeEnum(GetInstallationAuthScheme);

/** @internal */
export const GetInstallationAuthScheme$outboundSchema: z.ZodNativeEnum<
  typeof GetInstallationAuthScheme
> = GetInstallationAuthScheme$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationAuthScheme$ {
  /** @deprecated use `GetInstallationAuthScheme$inboundSchema` instead. */
  export const inboundSchema = GetInstallationAuthScheme$inboundSchema;
  /** @deprecated use `GetInstallationAuthScheme$outboundSchema` instead. */
  export const outboundSchema = GetInstallationAuthScheme$outboundSchema;
}

/** @internal */
export const GetInstallationStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetInstallationStatus
> = z.nativeEnum(GetInstallationStatus);

/** @internal */
export const GetInstallationStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetInstallationStatus
> = GetInstallationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationStatus$ {
  /** @deprecated use `GetInstallationStatus$inboundSchema` instead. */
  export const inboundSchema = GetInstallationStatus$inboundSchema;
  /** @deprecated use `GetInstallationStatus$outboundSchema` instead. */
  export const outboundSchema = GetInstallationStatus$outboundSchema;
}

/** @internal */
export const GetInstallationAccessToken$inboundSchema: z.ZodType<
  GetInstallationAccessToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type GetInstallationAccessToken$Outbound = {
  token: string;
};

/** @internal */
export const GetInstallationAccessToken$outboundSchema: z.ZodType<
  GetInstallationAccessToken$Outbound,
  z.ZodTypeDef,
  GetInstallationAccessToken
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationAccessToken$ {
  /** @deprecated use `GetInstallationAccessToken$inboundSchema` instead. */
  export const inboundSchema = GetInstallationAccessToken$inboundSchema;
  /** @deprecated use `GetInstallationAccessToken$outboundSchema` instead. */
  export const outboundSchema = GetInstallationAccessToken$outboundSchema;
  /** @deprecated use `GetInstallationAccessToken$Outbound` instead. */
  export type Outbound = GetInstallationAccessToken$Outbound;
}

export function getInstallationAccessTokenToJSON(
  getInstallationAccessToken: GetInstallationAccessToken,
): string {
  return JSON.stringify(
    GetInstallationAccessToken$outboundSchema.parse(getInstallationAccessToken),
  );
}

export function getInstallationAccessTokenFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationAccessToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationAccessToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationAccessToken' from JSON`,
  );
}

/** @internal */
export const GetInstallationRefreshToken$inboundSchema: z.ZodType<
  GetInstallationRefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type GetInstallationRefreshToken$Outbound = {
  token: string;
};

/** @internal */
export const GetInstallationRefreshToken$outboundSchema: z.ZodType<
  GetInstallationRefreshToken$Outbound,
  z.ZodTypeDef,
  GetInstallationRefreshToken
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationRefreshToken$ {
  /** @deprecated use `GetInstallationRefreshToken$inboundSchema` instead. */
  export const inboundSchema = GetInstallationRefreshToken$inboundSchema;
  /** @deprecated use `GetInstallationRefreshToken$outboundSchema` instead. */
  export const outboundSchema = GetInstallationRefreshToken$outboundSchema;
  /** @deprecated use `GetInstallationRefreshToken$Outbound` instead. */
  export type Outbound = GetInstallationRefreshToken$Outbound;
}

export function getInstallationRefreshTokenToJSON(
  getInstallationRefreshToken: GetInstallationRefreshToken,
): string {
  return JSON.stringify(
    GetInstallationRefreshToken$outboundSchema.parse(
      getInstallationRefreshToken,
    ),
  );
}

export function getInstallationRefreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationRefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationRefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationRefreshToken' from JSON`,
  );
}

/** @internal */
export const GetInstallationOauth2AuthorizationCode$inboundSchema: z.ZodType<
  GetInstallationOauth2AuthorizationCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.lazy(() => GetInstallationAccessToken$inboundSchema)
    .optional(),
  refreshToken: z.lazy(() => GetInstallationRefreshToken$inboundSchema)
    .optional(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type GetInstallationOauth2AuthorizationCode$Outbound = {
  accessToken?: GetInstallationAccessToken$Outbound | undefined;
  refreshToken?: GetInstallationRefreshToken$Outbound | undefined;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const GetInstallationOauth2AuthorizationCode$outboundSchema: z.ZodType<
  GetInstallationOauth2AuthorizationCode$Outbound,
  z.ZodTypeDef,
  GetInstallationOauth2AuthorizationCode
> = z.object({
  accessToken: z.lazy(() => GetInstallationAccessToken$outboundSchema)
    .optional(),
  refreshToken: z.lazy(() => GetInstallationRefreshToken$outboundSchema)
    .optional(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationOauth2AuthorizationCode$ {
  /** @deprecated use `GetInstallationOauth2AuthorizationCode$inboundSchema` instead. */
  export const inboundSchema =
    GetInstallationOauth2AuthorizationCode$inboundSchema;
  /** @deprecated use `GetInstallationOauth2AuthorizationCode$outboundSchema` instead. */
  export const outboundSchema =
    GetInstallationOauth2AuthorizationCode$outboundSchema;
  /** @deprecated use `GetInstallationOauth2AuthorizationCode$Outbound` instead. */
  export type Outbound = GetInstallationOauth2AuthorizationCode$Outbound;
}

export function getInstallationOauth2AuthorizationCodeToJSON(
  getInstallationOauth2AuthorizationCode:
    GetInstallationOauth2AuthorizationCode,
): string {
  return JSON.stringify(
    GetInstallationOauth2AuthorizationCode$outboundSchema.parse(
      getInstallationOauth2AuthorizationCode,
    ),
  );
}

export function getInstallationOauth2AuthorizationCodeFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationOauth2AuthorizationCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetInstallationOauth2AuthorizationCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationOauth2AuthorizationCode' from JSON`,
  );
}

/** @internal */
export const GetInstallationConnection$inboundSchema: z.ZodType<
  GetInstallationConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => GetInstallationProviderApp$inboundSchema)
    .optional(),
  group: z.lazy(() => GetInstallationInstallationGroup$inboundSchema),
  consumer: z.lazy(() => GetInstallationConsumer$inboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  authScheme: GetInstallationAuthScheme$inboundSchema,
  status: GetInstallationStatus$inboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    GetInstallationOauth2AuthorizationCode$inboundSchema
  ).optional(),
  apiKey: z.string().optional(),
});

/** @internal */
export type GetInstallationConnection$Outbound = {
  id: string;
  projectId: string;
  provider: string;
  providerApp?: GetInstallationProviderApp$Outbound | undefined;
  group: GetInstallationInstallationGroup$Outbound;
  consumer: GetInstallationConsumer$Outbound;
  providerWorkspaceRef?: string | undefined;
  providerConsumerRef?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
  authScheme: string;
  status: string;
  oauth2AuthorizationCode?:
    | GetInstallationOauth2AuthorizationCode$Outbound
    | undefined;
  apiKey?: string | undefined;
};

/** @internal */
export const GetInstallationConnection$outboundSchema: z.ZodType<
  GetInstallationConnection$Outbound,
  z.ZodTypeDef,
  GetInstallationConnection
> = z.object({
  id: z.string(),
  projectId: z.string(),
  provider: z.string(),
  providerApp: z.lazy(() => GetInstallationProviderApp$outboundSchema)
    .optional(),
  group: z.lazy(() => GetInstallationInstallationGroup$outboundSchema),
  consumer: z.lazy(() => GetInstallationConsumer$outboundSchema),
  providerWorkspaceRef: z.string().optional(),
  providerConsumerRef: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  authScheme: GetInstallationAuthScheme$outboundSchema,
  status: GetInstallationStatus$outboundSchema,
  oauth2AuthorizationCode: z.lazy(() =>
    GetInstallationOauth2AuthorizationCode$outboundSchema
  ).optional(),
  apiKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationConnection$ {
  /** @deprecated use `GetInstallationConnection$inboundSchema` instead. */
  export const inboundSchema = GetInstallationConnection$inboundSchema;
  /** @deprecated use `GetInstallationConnection$outboundSchema` instead. */
  export const outboundSchema = GetInstallationConnection$outboundSchema;
  /** @deprecated use `GetInstallationConnection$Outbound` instead. */
  export type Outbound = GetInstallationConnection$Outbound;
}

export function getInstallationConnectionToJSON(
  getInstallationConnection: GetInstallationConnection,
): string {
  return JSON.stringify(
    GetInstallationConnection$outboundSchema.parse(getInstallationConnection),
  );
}

export function getInstallationConnectionFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationConnection' from JSON`,
  );
}

/** @internal */
export const GetInstallationProxy$inboundSchema: z.ZodType<
  GetInstallationProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type GetInstallationProxy$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const GetInstallationProxy$outboundSchema: z.ZodType<
  GetInstallationProxy$Outbound,
  z.ZodTypeDef,
  GetInstallationProxy
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationProxy$ {
  /** @deprecated use `GetInstallationProxy$inboundSchema` instead. */
  export const inboundSchema = GetInstallationProxy$inboundSchema;
  /** @deprecated use `GetInstallationProxy$outboundSchema` instead. */
  export const outboundSchema = GetInstallationProxy$outboundSchema;
  /** @deprecated use `GetInstallationProxy$Outbound` instead. */
  export type Outbound = GetInstallationProxy$Outbound;
}

export function getInstallationProxyToJSON(
  getInstallationProxy: GetInstallationProxy,
): string {
  return JSON.stringify(
    GetInstallationProxy$outboundSchema.parse(getInstallationProxy),
  );
}

export function getInstallationProxyFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationProxy' from JSON`,
  );
}

/** @internal */
export const GetInstallationContent$inboundSchema: z.ZodType<
  GetInstallationContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => GetInstallationProxy$inboundSchema).optional(),
});

/** @internal */
export type GetInstallationContent$Outbound = {
  provider: string;
  read?: any | undefined;
  write?: any | undefined;
  proxy?: GetInstallationProxy$Outbound | undefined;
};

/** @internal */
export const GetInstallationContent$outboundSchema: z.ZodType<
  GetInstallationContent$Outbound,
  z.ZodTypeDef,
  GetInstallationContent
> = z.object({
  provider: z.string(),
  read: z.any().optional(),
  write: z.any().optional(),
  proxy: z.lazy(() => GetInstallationProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationContent$ {
  /** @deprecated use `GetInstallationContent$inboundSchema` instead. */
  export const inboundSchema = GetInstallationContent$inboundSchema;
  /** @deprecated use `GetInstallationContent$outboundSchema` instead. */
  export const outboundSchema = GetInstallationContent$outboundSchema;
  /** @deprecated use `GetInstallationContent$Outbound` instead. */
  export type Outbound = GetInstallationContent$Outbound;
}

export function getInstallationContentToJSON(
  getInstallationContent: GetInstallationContent,
): string {
  return JSON.stringify(
    GetInstallationContent$outboundSchema.parse(getInstallationContent),
  );
}

export function getInstallationContentFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationContent' from JSON`,
  );
}

/** @internal */
export const GetInstallationConfig$inboundSchema: z.ZodType<
  GetInstallationConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  content: z.lazy(() => GetInstallationContent$inboundSchema),
});

/** @internal */
export type GetInstallationConfig$Outbound = {
  id: string;
  revisionId: string;
  createTime: string;
  createdBy: string;
  content: GetInstallationContent$Outbound;
};

/** @internal */
export const GetInstallationConfig$outboundSchema: z.ZodType<
  GetInstallationConfig$Outbound,
  z.ZodTypeDef,
  GetInstallationConfig
> = z.object({
  id: z.string(),
  revisionId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  content: z.lazy(() => GetInstallationContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationConfig$ {
  /** @deprecated use `GetInstallationConfig$inboundSchema` instead. */
  export const inboundSchema = GetInstallationConfig$inboundSchema;
  /** @deprecated use `GetInstallationConfig$outboundSchema` instead. */
  export const outboundSchema = GetInstallationConfig$outboundSchema;
  /** @deprecated use `GetInstallationConfig$Outbound` instead. */
  export type Outbound = GetInstallationConfig$Outbound;
}

export function getInstallationConfigToJSON(
  getInstallationConfig: GetInstallationConfig,
): string {
  return JSON.stringify(
    GetInstallationConfig$outboundSchema.parse(getInstallationConfig),
  );
}

export function getInstallationConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationConfig' from JSON`,
  );
}

/** @internal */
export const GetInstallationResponseBody$inboundSchema: z.ZodType<
  GetInstallationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => GetInstallationGroup$inboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => GetInstallationConnection$inboundSchema),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  config: z.lazy(() => GetInstallationConfig$inboundSchema),
});

/** @internal */
export type GetInstallationResponseBody$Outbound = {
  id: string;
  projectId: string;
  integrationId: string;
  group?: GetInstallationGroup$Outbound | undefined;
  healthStatus: string;
  connection: GetInstallationConnection$Outbound;
  createTime: string;
  createdBy: string;
  updateTime?: string | undefined;
  config: GetInstallationConfig$Outbound;
};

/** @internal */
export const GetInstallationResponseBody$outboundSchema: z.ZodType<
  GetInstallationResponseBody$Outbound,
  z.ZodTypeDef,
  GetInstallationResponseBody
> = z.object({
  id: z.string(),
  projectId: z.string(),
  integrationId: z.string(),
  group: z.lazy(() => GetInstallationGroup$outboundSchema).optional(),
  healthStatus: z.string(),
  connection: z.lazy(() => GetInstallationConnection$outboundSchema),
  createTime: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  config: z.lazy(() => GetInstallationConfig$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationResponseBody$ {
  /** @deprecated use `GetInstallationResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetInstallationResponseBody$inboundSchema;
  /** @deprecated use `GetInstallationResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetInstallationResponseBody$outboundSchema;
  /** @deprecated use `GetInstallationResponseBody$Outbound` instead. */
  export type Outbound = GetInstallationResponseBody$Outbound;
}

export function getInstallationResponseBodyToJSON(
  getInstallationResponseBody: GetInstallationResponseBody,
): string {
  return JSON.stringify(
    GetInstallationResponseBody$outboundSchema.parse(
      getInstallationResponseBody,
    ),
  );
}

export function getInstallationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationResponseBody' from JSON`,
  );
}

/** @internal */
export const GetInstallationResponse$inboundSchema: z.ZodType<
  GetInstallationResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetInstallationResponseBody$inboundSchema),
  z.lazy(() => GetInstallationInstallationResponseBody$inboundSchema),
]);

/** @internal */
export type GetInstallationResponse$Outbound =
  | GetInstallationResponseBody$Outbound
  | GetInstallationInstallationResponseBody$Outbound;

/** @internal */
export const GetInstallationResponse$outboundSchema: z.ZodType<
  GetInstallationResponse$Outbound,
  z.ZodTypeDef,
  GetInstallationResponse
> = z.union([
  z.lazy(() => GetInstallationResponseBody$outboundSchema),
  z.lazy(() => GetInstallationInstallationResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInstallationResponse$ {
  /** @deprecated use `GetInstallationResponse$inboundSchema` instead. */
  export const inboundSchema = GetInstallationResponse$inboundSchema;
  /** @deprecated use `GetInstallationResponse$outboundSchema` instead. */
  export const outboundSchema = GetInstallationResponse$outboundSchema;
  /** @deprecated use `GetInstallationResponse$Outbound` instead. */
  export type Outbound = GetInstallationResponse$Outbound;
}

export function getInstallationResponseToJSON(
  getInstallationResponse: GetInstallationResponse,
): string {
  return JSON.stringify(
    GetInstallationResponse$outboundSchema.parse(getInstallationResponse),
  );
}

export function getInstallationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInstallationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInstallationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInstallationResponse' from JSON`,
  );
}
