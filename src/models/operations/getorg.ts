/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetOrgServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetOrgRequest = {
  orgId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetOrgOrgResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Organization
 */
export type GetOrgResponseBody = {
  /**
   * The organization ID.
   */
  id: string;
  /**
   * The organization label.
   */
  label: string;
  /**
   * The ID of the Everyone team for the org.
   */
  defaultTeamId: string;
  /**
   * The time the organization was created.
   */
  createTime: Date;
  /**
   * The time the organization was updated.
   */
  updateTime?: Date | undefined;
};

export type GetOrgResponse = GetOrgResponseBody | GetOrgOrgResponseBody;

/** @internal */
export const GetOrgRequest$inboundSchema: z.ZodType<
  GetOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string(),
});

/** @internal */
export type GetOrgRequest$Outbound = {
  orgId: string;
};

/** @internal */
export const GetOrgRequest$outboundSchema: z.ZodType<
  GetOrgRequest$Outbound,
  z.ZodTypeDef,
  GetOrgRequest
> = z.object({
  orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgRequest$ {
  /** @deprecated use `GetOrgRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrgRequest$inboundSchema;
  /** @deprecated use `GetOrgRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrgRequest$outboundSchema;
  /** @deprecated use `GetOrgRequest$Outbound` instead. */
  export type Outbound = GetOrgRequest$Outbound;
}

export function getOrgRequestToJSON(getOrgRequest: GetOrgRequest): string {
  return JSON.stringify(GetOrgRequest$outboundSchema.parse(getOrgRequest));
}

export function getOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgRequest' from JSON`,
  );
}

/** @internal */
export const GetOrgOrgResponseBody$inboundSchema: z.ZodType<
  GetOrgOrgResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetOrgOrgResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetOrgOrgResponseBody$outboundSchema: z.ZodType<
  GetOrgOrgResponseBody$Outbound,
  z.ZodTypeDef,
  GetOrgOrgResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgOrgResponseBody$ {
  /** @deprecated use `GetOrgOrgResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOrgOrgResponseBody$inboundSchema;
  /** @deprecated use `GetOrgOrgResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOrgOrgResponseBody$outboundSchema;
  /** @deprecated use `GetOrgOrgResponseBody$Outbound` instead. */
  export type Outbound = GetOrgOrgResponseBody$Outbound;
}

export function getOrgOrgResponseBodyToJSON(
  getOrgOrgResponseBody: GetOrgOrgResponseBody,
): string {
  return JSON.stringify(
    GetOrgOrgResponseBody$outboundSchema.parse(getOrgOrgResponseBody),
  );
}

export function getOrgOrgResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgOrgResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgOrgResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgOrgResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOrgResponseBody$inboundSchema: z.ZodType<
  GetOrgResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  label: z.string(),
  defaultTeamId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetOrgResponseBody$Outbound = {
  id: string;
  label: string;
  defaultTeamId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const GetOrgResponseBody$outboundSchema: z.ZodType<
  GetOrgResponseBody$Outbound,
  z.ZodTypeDef,
  GetOrgResponseBody
> = z.object({
  id: z.string(),
  label: z.string(),
  defaultTeamId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgResponseBody$ {
  /** @deprecated use `GetOrgResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOrgResponseBody$inboundSchema;
  /** @deprecated use `GetOrgResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOrgResponseBody$outboundSchema;
  /** @deprecated use `GetOrgResponseBody$Outbound` instead. */
  export type Outbound = GetOrgResponseBody$Outbound;
}

export function getOrgResponseBodyToJSON(
  getOrgResponseBody: GetOrgResponseBody,
): string {
  return JSON.stringify(
    GetOrgResponseBody$outboundSchema.parse(getOrgResponseBody),
  );
}

export function getOrgResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOrgResponse$inboundSchema: z.ZodType<
  GetOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetOrgResponseBody$inboundSchema),
  z.lazy(() => GetOrgOrgResponseBody$inboundSchema),
]);

/** @internal */
export type GetOrgResponse$Outbound =
  | GetOrgResponseBody$Outbound
  | GetOrgOrgResponseBody$Outbound;

/** @internal */
export const GetOrgResponse$outboundSchema: z.ZodType<
  GetOrgResponse$Outbound,
  z.ZodTypeDef,
  GetOrgResponse
> = z.union([
  z.lazy(() => GetOrgResponseBody$outboundSchema),
  z.lazy(() => GetOrgOrgResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgResponse$ {
  /** @deprecated use `GetOrgResponse$inboundSchema` instead. */
  export const inboundSchema = GetOrgResponse$inboundSchema;
  /** @deprecated use `GetOrgResponse$outboundSchema` instead. */
  export const outboundSchema = GetOrgResponse$outboundSchema;
  /** @deprecated use `GetOrgResponse$Outbound` instead. */
  export type Outbound = GetOrgResponse$Outbound;
}

export function getOrgResponseToJSON(getOrgResponse: GetOrgResponse): string {
  return JSON.stringify(GetOrgResponse$outboundSchema.parse(getOrgResponse));
}

export function getOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgResponse' from JSON`,
  );
}
