/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetApiKeyServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetApiKeyRequest = {
  projectIdOrName: string;
  apiKey: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetAPIKeyAPIKeyResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * API key
 */
export type GetApiKeyResponseBody = {
  /**
   * The API key.
   */
  key: string;
  /**
   * A short name for the API key.
   */
  label: string;
  /**
   * The scopes for the API key.
   */
  scopes: Array<string>;
  /**
   * The project ID.
   */
  projectId: string;
  /**
   * Whether the API key is active.
   */
  active?: boolean | undefined;
};

export type GetApiKeyResponse =
  | GetApiKeyResponseBody
  | GetAPIKeyAPIKeyResponseBody;

/** @internal */
export const GetApiKeyRequest$inboundSchema: z.ZodType<
  GetApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  apiKey: z.string(),
});

/** @internal */
export type GetApiKeyRequest$Outbound = {
  projectIdOrName: string;
  apiKey: string;
};

/** @internal */
export const GetApiKeyRequest$outboundSchema: z.ZodType<
  GetApiKeyRequest$Outbound,
  z.ZodTypeDef,
  GetApiKeyRequest
> = z.object({
  projectIdOrName: z.string(),
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiKeyRequest$ {
  /** @deprecated use `GetApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiKeyRequest$inboundSchema;
  /** @deprecated use `GetApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiKeyRequest$outboundSchema;
  /** @deprecated use `GetApiKeyRequest$Outbound` instead. */
  export type Outbound = GetApiKeyRequest$Outbound;
}

export function getApiKeyRequestToJSON(
  getApiKeyRequest: GetApiKeyRequest,
): string {
  return JSON.stringify(
    GetApiKeyRequest$outboundSchema.parse(getApiKeyRequest),
  );
}

export function getApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiKeyRequest' from JSON`,
  );
}

/** @internal */
export const GetAPIKeyAPIKeyResponseBody$inboundSchema: z.ZodType<
  GetAPIKeyAPIKeyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetAPIKeyAPIKeyResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetAPIKeyAPIKeyResponseBody$outboundSchema: z.ZodType<
  GetAPIKeyAPIKeyResponseBody$Outbound,
  z.ZodTypeDef,
  GetAPIKeyAPIKeyResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAPIKeyAPIKeyResponseBody$ {
  /** @deprecated use `GetAPIKeyAPIKeyResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAPIKeyAPIKeyResponseBody$inboundSchema;
  /** @deprecated use `GetAPIKeyAPIKeyResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAPIKeyAPIKeyResponseBody$outboundSchema;
  /** @deprecated use `GetAPIKeyAPIKeyResponseBody$Outbound` instead. */
  export type Outbound = GetAPIKeyAPIKeyResponseBody$Outbound;
}

export function getAPIKeyAPIKeyResponseBodyToJSON(
  getAPIKeyAPIKeyResponseBody: GetAPIKeyAPIKeyResponseBody,
): string {
  return JSON.stringify(
    GetAPIKeyAPIKeyResponseBody$outboundSchema.parse(
      getAPIKeyAPIKeyResponseBody,
    ),
  );
}

export function getAPIKeyAPIKeyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAPIKeyAPIKeyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAPIKeyAPIKeyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAPIKeyAPIKeyResponseBody' from JSON`,
  );
}

/** @internal */
export const GetApiKeyResponseBody$inboundSchema: z.ZodType<
  GetApiKeyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  label: z.string(),
  scopes: z.array(z.string()),
  projectId: z.string(),
  active: z.boolean().optional(),
});

/** @internal */
export type GetApiKeyResponseBody$Outbound = {
  key: string;
  label: string;
  scopes: Array<string>;
  projectId: string;
  active?: boolean | undefined;
};

/** @internal */
export const GetApiKeyResponseBody$outboundSchema: z.ZodType<
  GetApiKeyResponseBody$Outbound,
  z.ZodTypeDef,
  GetApiKeyResponseBody
> = z.object({
  key: z.string(),
  label: z.string(),
  scopes: z.array(z.string()),
  projectId: z.string(),
  active: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiKeyResponseBody$ {
  /** @deprecated use `GetApiKeyResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetApiKeyResponseBody$inboundSchema;
  /** @deprecated use `GetApiKeyResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetApiKeyResponseBody$outboundSchema;
  /** @deprecated use `GetApiKeyResponseBody$Outbound` instead. */
  export type Outbound = GetApiKeyResponseBody$Outbound;
}

export function getApiKeyResponseBodyToJSON(
  getApiKeyResponseBody: GetApiKeyResponseBody,
): string {
  return JSON.stringify(
    GetApiKeyResponseBody$outboundSchema.parse(getApiKeyResponseBody),
  );
}

export function getApiKeyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetApiKeyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiKeyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiKeyResponseBody' from JSON`,
  );
}

/** @internal */
export const GetApiKeyResponse$inboundSchema: z.ZodType<
  GetApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetApiKeyResponseBody$inboundSchema),
  z.lazy(() => GetAPIKeyAPIKeyResponseBody$inboundSchema),
]);

/** @internal */
export type GetApiKeyResponse$Outbound =
  | GetApiKeyResponseBody$Outbound
  | GetAPIKeyAPIKeyResponseBody$Outbound;

/** @internal */
export const GetApiKeyResponse$outboundSchema: z.ZodType<
  GetApiKeyResponse$Outbound,
  z.ZodTypeDef,
  GetApiKeyResponse
> = z.union([
  z.lazy(() => GetApiKeyResponseBody$outboundSchema),
  z.lazy(() => GetAPIKeyAPIKeyResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiKeyResponse$ {
  /** @deprecated use `GetApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiKeyResponse$inboundSchema;
  /** @deprecated use `GetApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiKeyResponse$outboundSchema;
  /** @deprecated use `GetApiKeyResponse$Outbound` instead. */
  export type Outbound = GetApiKeyResponse$Outbound;
}

export function getApiKeyResponseToJSON(
  getApiKeyResponse: GetApiKeyResponse,
): string {
  return JSON.stringify(
    GetApiKeyResponse$outboundSchema.parse(getApiKeyResponse),
  );
}

export function getApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiKeyResponse' from JSON`,
  );
}
