/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetObjectMetadataForConnectionServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetObjectMetadataForConnectionRequest = {
  /**
   * Project ID or name
   */
  projectIdOrName: string;
  /**
   * The API Provider
   */
  provider: string;
  /**
   * Object name (mapped or unmapped)
   */
  objectName: string;
  /**
   * The groupRef for the connection
   */
  groupRef?: string | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetObjectMetadataForConnectionObjectsAndFieldsResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * A normalized field type
 */
export const GetObjectMetadataForConnectionValueType = {
  String: "string",
  Boolean: "boolean",
  SingleSelect: "singleSelect",
  MultiSelect: "multiSelect",
  Date: "date",
  Datetime: "datetime",
  Int: "int",
  Float: "float",
  Other: "other",
} as const;
/**
 * A normalized field type
 */
export type GetObjectMetadataForConnectionValueType = ClosedEnum<
  typeof GetObjectMetadataForConnectionValueType
>;

/**
 * Represents a field value
 */
export type GetObjectMetadataForConnectionValues = {
  /**
   * The internal value used by the system
   */
  value: string;
  /**
   * The human-readable display value
   */
  displayValue: string;
};

export type GetObjectMetadataForConnectionFields = {
  /**
   * The name of the field from the provider API.
   */
  fieldName: string;
  /**
   * The display name of the field from the provider API.
   */
  displayName: string;
  /**
   * A normalized field type
   */
  valueType?: GetObjectMetadataForConnectionValueType | undefined;
  /**
   * Raw field type from the provider API.
   */
  providerType?: string | undefined;
  /**
   * Whether the field is read-only.
   */
  readOnly?: boolean | undefined;
  /**
   * If the valueType is singleSelect or multiSelect, this is a list of possible values
   */
  values?: Array<GetObjectMetadataForConnectionValues> | undefined;
};

/**
 * The retrieved object metadata
 */
export type GetObjectMetadataForConnectionResponseBody = {
  /**
   * The provider name of the object
   */
  name: string;
  /**
   * Human-readable name of the object
   */
  displayName?: string | undefined;
  mappedObjectName?: string | undefined;
  /**
   * Map of field metadata keyed by field name
   */
  fields: { [k: string]: GetObjectMetadataForConnectionFields };
};

export type GetObjectMetadataForConnectionResponse =
  | GetObjectMetadataForConnectionResponseBody
  | GetObjectMetadataForConnectionObjectsAndFieldsResponseBody;

/** @internal */
export const GetObjectMetadataForConnectionRequest$inboundSchema: z.ZodType<
  GetObjectMetadataForConnectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  provider: z.string(),
  objectName: z.string(),
  groupRef: z.string().optional(),
});

/** @internal */
export type GetObjectMetadataForConnectionRequest$Outbound = {
  projectIdOrName: string;
  provider: string;
  objectName: string;
  groupRef?: string | undefined;
};

/** @internal */
export const GetObjectMetadataForConnectionRequest$outboundSchema: z.ZodType<
  GetObjectMetadataForConnectionRequest$Outbound,
  z.ZodTypeDef,
  GetObjectMetadataForConnectionRequest
> = z.object({
  projectIdOrName: z.string(),
  provider: z.string(),
  objectName: z.string(),
  groupRef: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionRequest$ {
  /** @deprecated use `GetObjectMetadataForConnectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionRequest$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionRequest$outboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionRequest$Outbound` instead. */
  export type Outbound = GetObjectMetadataForConnectionRequest$Outbound;
}

export function getObjectMetadataForConnectionRequestToJSON(
  getObjectMetadataForConnectionRequest: GetObjectMetadataForConnectionRequest,
): string {
  return JSON.stringify(
    GetObjectMetadataForConnectionRequest$outboundSchema.parse(
      getObjectMetadataForConnectionRequest,
    ),
  );
}

export function getObjectMetadataForConnectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetObjectMetadataForConnectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForConnectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetObjectMetadataForConnectionRequest' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$inboundSchema:
  z.ZodType<
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string().default("about:blank"),
    href: z.string().optional(),
    title: z.string().optional(),
    status: z.number().int().optional(),
    detail: z.string().optional(),
    instance: z.string().optional(),
    subsystem: z.string().optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requestId: z.string().optional(),
    causes: z.array(z.string()).optional(),
    remedy: z.string().optional(),
    supportEmail: z.string().optional(),
    supportPhone: z.string().optional(),
    supportUrl: z.string().optional(),
    retryable: z.boolean().optional(),
    retryAfter: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    context: z.record(z.any()).optional(),
  });

/** @internal */
export type GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$Outbound =
  {
    type: string;
    href?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    subsystem?: string | undefined;
    time?: string | undefined;
    requestId?: string | undefined;
    causes?: Array<string> | undefined;
    remedy?: string | undefined;
    supportEmail?: string | undefined;
    supportPhone?: string | undefined;
    supportUrl?: string | undefined;
    retryable?: boolean | undefined;
    retryAfter?: string | undefined;
    context?: { [k: string]: any } | undefined;
  };

/** @internal */
export const GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$outboundSchema:
  z.ZodType<
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody
  > = z.object({
    type: z.string().default("about:blank"),
    href: z.string().optional(),
    title: z.string().optional(),
    status: z.number().int().optional(),
    detail: z.string().optional(),
    instance: z.string().optional(),
    subsystem: z.string().optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    requestId: z.string().optional(),
    causes: z.array(z.string()).optional(),
    remedy: z.string().optional(),
    supportEmail: z.string().optional(),
    supportPhone: z.string().optional(),
    supportUrl: z.string().optional(),
    retryable: z.boolean().optional(),
    retryAfter: z.date().transform(v => v.toISOString()).optional(),
    context: z.record(z.any()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$ {
  /** @deprecated use `GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$outboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$Outbound;
}

export function getObjectMetadataForConnectionObjectsAndFieldsResponseBodyToJSON(
  getObjectMetadataForConnectionObjectsAndFieldsResponseBody:
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody,
): string {
  return JSON.stringify(
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$outboundSchema
      .parse(getObjectMetadataForConnectionObjectsAndFieldsResponseBody),
  );
}

export function getObjectMetadataForConnectionObjectsAndFieldsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetObjectMetadataForConnectionObjectsAndFieldsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetObjectMetadataForConnectionObjectsAndFieldsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForConnectionValueType$inboundSchema:
  z.ZodNativeEnum<typeof GetObjectMetadataForConnectionValueType> = z
    .nativeEnum(GetObjectMetadataForConnectionValueType);

/** @internal */
export const GetObjectMetadataForConnectionValueType$outboundSchema:
  z.ZodNativeEnum<typeof GetObjectMetadataForConnectionValueType> =
    GetObjectMetadataForConnectionValueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionValueType$ {
  /** @deprecated use `GetObjectMetadataForConnectionValueType$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionValueType$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionValueType$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionValueType$outboundSchema;
}

/** @internal */
export const GetObjectMetadataForConnectionValues$inboundSchema: z.ZodType<
  GetObjectMetadataForConnectionValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/** @internal */
export type GetObjectMetadataForConnectionValues$Outbound = {
  value: string;
  displayValue: string;
};

/** @internal */
export const GetObjectMetadataForConnectionValues$outboundSchema: z.ZodType<
  GetObjectMetadataForConnectionValues$Outbound,
  z.ZodTypeDef,
  GetObjectMetadataForConnectionValues
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionValues$ {
  /** @deprecated use `GetObjectMetadataForConnectionValues$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionValues$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionValues$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionValues$outboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionValues$Outbound` instead. */
  export type Outbound = GetObjectMetadataForConnectionValues$Outbound;
}

export function getObjectMetadataForConnectionValuesToJSON(
  getObjectMetadataForConnectionValues: GetObjectMetadataForConnectionValues,
): string {
  return JSON.stringify(
    GetObjectMetadataForConnectionValues$outboundSchema.parse(
      getObjectMetadataForConnectionValues,
    ),
  );
}

export function getObjectMetadataForConnectionValuesFromJSON(
  jsonString: string,
): SafeParseResult<GetObjectMetadataForConnectionValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForConnectionValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetObjectMetadataForConnectionValues' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForConnectionFields$inboundSchema: z.ZodType<
  GetObjectMetadataForConnectionFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: GetObjectMetadataForConnectionValueType$inboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(
    z.lazy(() => GetObjectMetadataForConnectionValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetObjectMetadataForConnectionFields$Outbound = {
  fieldName: string;
  displayName: string;
  valueType?: string | undefined;
  providerType?: string | undefined;
  readOnly?: boolean | undefined;
  values?: Array<GetObjectMetadataForConnectionValues$Outbound> | undefined;
};

/** @internal */
export const GetObjectMetadataForConnectionFields$outboundSchema: z.ZodType<
  GetObjectMetadataForConnectionFields$Outbound,
  z.ZodTypeDef,
  GetObjectMetadataForConnectionFields
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: GetObjectMetadataForConnectionValueType$outboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(
    z.lazy(() => GetObjectMetadataForConnectionValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionFields$ {
  /** @deprecated use `GetObjectMetadataForConnectionFields$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionFields$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionFields$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionFields$outboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionFields$Outbound` instead. */
  export type Outbound = GetObjectMetadataForConnectionFields$Outbound;
}

export function getObjectMetadataForConnectionFieldsToJSON(
  getObjectMetadataForConnectionFields: GetObjectMetadataForConnectionFields,
): string {
  return JSON.stringify(
    GetObjectMetadataForConnectionFields$outboundSchema.parse(
      getObjectMetadataForConnectionFields,
    ),
  );
}

export function getObjectMetadataForConnectionFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetObjectMetadataForConnectionFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForConnectionFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetObjectMetadataForConnectionFields' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForConnectionResponseBody$inboundSchema:
  z.ZodType<GetObjectMetadataForConnectionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string(),
      displayName: z.string().optional(),
      mappedObjectName: z.string().optional(),
      fields: z.record(
        z.lazy(() => GetObjectMetadataForConnectionFields$inboundSchema),
      ),
    });

/** @internal */
export type GetObjectMetadataForConnectionResponseBody$Outbound = {
  name: string;
  displayName?: string | undefined;
  mappedObjectName?: string | undefined;
  fields: { [k: string]: GetObjectMetadataForConnectionFields$Outbound };
};

/** @internal */
export const GetObjectMetadataForConnectionResponseBody$outboundSchema:
  z.ZodType<
    GetObjectMetadataForConnectionResponseBody$Outbound,
    z.ZodTypeDef,
    GetObjectMetadataForConnectionResponseBody
  > = z.object({
    name: z.string(),
    displayName: z.string().optional(),
    mappedObjectName: z.string().optional(),
    fields: z.record(
      z.lazy(() => GetObjectMetadataForConnectionFields$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionResponseBody$ {
  /** @deprecated use `GetObjectMetadataForConnectionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionResponseBody$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionResponseBody$outboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionResponseBody$Outbound` instead. */
  export type Outbound = GetObjectMetadataForConnectionResponseBody$Outbound;
}

export function getObjectMetadataForConnectionResponseBodyToJSON(
  getObjectMetadataForConnectionResponseBody:
    GetObjectMetadataForConnectionResponseBody,
): string {
  return JSON.stringify(
    GetObjectMetadataForConnectionResponseBody$outboundSchema.parse(
      getObjectMetadataForConnectionResponseBody,
    ),
  );
}

export function getObjectMetadataForConnectionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetObjectMetadataForConnectionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForConnectionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetObjectMetadataForConnectionResponseBody' from JSON`,
  );
}

/** @internal */
export const GetObjectMetadataForConnectionResponse$inboundSchema: z.ZodType<
  GetObjectMetadataForConnectionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetObjectMetadataForConnectionResponseBody$inboundSchema),
  z.lazy(() =>
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$inboundSchema
  ),
]);

/** @internal */
export type GetObjectMetadataForConnectionResponse$Outbound =
  | GetObjectMetadataForConnectionResponseBody$Outbound
  | GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$Outbound;

/** @internal */
export const GetObjectMetadataForConnectionResponse$outboundSchema: z.ZodType<
  GetObjectMetadataForConnectionResponse$Outbound,
  z.ZodTypeDef,
  GetObjectMetadataForConnectionResponse
> = z.union([
  z.lazy(() => GetObjectMetadataForConnectionResponseBody$outboundSchema),
  z.lazy(() =>
    GetObjectMetadataForConnectionObjectsAndFieldsResponseBody$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetObjectMetadataForConnectionResponse$ {
  /** @deprecated use `GetObjectMetadataForConnectionResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetObjectMetadataForConnectionResponse$inboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetObjectMetadataForConnectionResponse$outboundSchema;
  /** @deprecated use `GetObjectMetadataForConnectionResponse$Outbound` instead. */
  export type Outbound = GetObjectMetadataForConnectionResponse$Outbound;
}

export function getObjectMetadataForConnectionResponseToJSON(
  getObjectMetadataForConnectionResponse:
    GetObjectMetadataForConnectionResponse,
): string {
  return JSON.stringify(
    GetObjectMetadataForConnectionResponse$outboundSchema.parse(
      getObjectMetadataForConnectionResponse,
    ),
  );
}

export function getObjectMetadataForConnectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetObjectMetadataForConnectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetObjectMetadataForConnectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetObjectMetadataForConnectionResponse' from JSON`,
  );
}
