/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const BatchUpsertIntegrationsServerList = [
  "https://api.withampersand.com/v1",
] as const;

/**
 * The source of the integrations to upsert. One of sourceZipUrl or sourceYaml is required.
 */
export type BatchUpsertIntegrationsRequestBody = {
  /**
   * URL of where a zip of the source files can be downloaded (e.g. Google Cloud Storage URL).
   */
  sourceZipUrl?: string | undefined;
  /**
   * A YAML string that defines the integrations.
   */
  sourceYaml?: string | undefined;
};

export type BatchUpsertIntegrationsRequest = {
  projectIdOrName: string;
  requestBody: BatchUpsertIntegrationsRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type BatchUpsertIntegrationsResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type BatchUpsertIntegrationsRequiredFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type BatchUpsertIntegrationsRequiredFields1 = {
  fieldName: string;
  /**
   * The field name to map to.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to.
   */
  mapToDisplayName?: string | undefined;
};

export type BatchUpsertIntegrationsRequiredFields =
  | BatchUpsertIntegrationsRequiredFields1
  | BatchUpsertIntegrationsRequiredFields2;

export type BatchUpsertIntegrationsOptionalFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type BatchUpsertIntegrationsOptionalFields1 = {
  fieldName: string;
  /**
   * The field name to map to.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to.
   */
  mapToDisplayName?: string | undefined;
};

export type BatchUpsertIntegrationsOptionalFields =
  | BatchUpsertIntegrationsOptionalFields1
  | BatchUpsertIntegrationsOptionalFields2;

export const BatchUpsertIntegrationsOptionalFieldsAuto = {
  All: "all",
} as const;
export type BatchUpsertIntegrationsOptionalFieldsAuto = ClosedEnum<
  typeof BatchUpsertIntegrationsOptionalFieldsAuto
>;

export type BatchUpsertIntegrationsDefaultPeriod = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type BatchUpsertIntegrationsBackfill = {
  defaultPeriod: BatchUpsertIntegrationsDefaultPeriod;
};

/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export const BatchUpsertIntegrationsMode = {
  OnRequest: "onRequest",
  Auto: "auto",
} as const;
/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export type BatchUpsertIntegrationsMode = ClosedEnum<
  typeof BatchUpsertIntegrationsMode
>;

export type BatchUpsertIntegrationsDelivery = {
  /**
   * The data delivery mode for this object. If not specified, defaults to automatic.
   */
  mode?: BatchUpsertIntegrationsMode | undefined;
  /**
   * The number of records to receive per data delivery.
   */
  pageSize?: number | undefined;
};

export type BatchUpsertIntegrationsObjects = {
  objectName: string;
  destination: string;
  schedule: string;
  /**
   * An object name to map to.
   */
  mapToName?: string | undefined;
  /**
   * A display name to map to.
   */
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | BatchUpsertIntegrationsRequiredFields1
      | BatchUpsertIntegrationsRequiredFields2
    >
    | undefined;
  optionalFields?:
    | Array<
      | BatchUpsertIntegrationsOptionalFields1
      | BatchUpsertIntegrationsOptionalFields2
    >
    | undefined;
  optionalFieldsAuto?: BatchUpsertIntegrationsOptionalFieldsAuto | undefined;
  backfill?: BatchUpsertIntegrationsBackfill | undefined;
  delivery?: BatchUpsertIntegrationsDelivery | undefined;
};

export type BatchUpsertIntegrationsRead = {
  objects?: Array<BatchUpsertIntegrationsObjects> | undefined;
};

/**
 * Configuration to set default write values for object fields.
 */
export type BatchUpsertIntegrationsValueDefaults = {
  /**
   * If true, users can set default values for any field.
   */
  allowAnyFields?: boolean | undefined;
};

export type BatchUpsertIntegrationsIntegrationsObjects = {
  objectName: string;
  /**
   * If true, the write object will inherit the mapping from the read object. If false, the write object will have no mapping.
   */
  inheritMapping?: boolean | undefined;
  /**
   * Configuration to set default write values for object fields.
   */
  valueDefaults?: BatchUpsertIntegrationsValueDefaults | undefined;
};

export type BatchUpsertIntegrationsWrite = {
  objects?: Array<BatchUpsertIntegrationsIntegrationsObjects> | undefined;
};

export type BatchUpsertIntegrationsProxy = {
  enabled?: boolean | undefined;
};

export type BatchUpsertIntegrationsContent = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: BatchUpsertIntegrationsRead | undefined;
  write?: BatchUpsertIntegrationsWrite | undefined;
  proxy?: BatchUpsertIntegrationsProxy | undefined;
};

export type BatchUpsertIntegrationsLatestRevision = {
  /**
   * The revision ID.
   */
  id: string;
  /**
   * The spec version string.
   */
  specVersion: string;
  /**
   * The time the revision was created.
   */
  createTime: Date;
  content: BatchUpsertIntegrationsContent;
};

export type BatchUpsertIntegrationsIntegrationsResponseBody = {
  /**
   * The integration ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration name.
   */
  name: string;
  /**
   * The SaaS provider that this integration connects to.
   */
  provider: string;
  /**
   * The time the integration was created.
   */
  createTime: Date;
  /**
   * The time the integration was last updated.
   */
  updateTime?: Date | undefined;
  latestRevision: BatchUpsertIntegrationsLatestRevision;
};

export type BatchUpsertIntegrationsResponse =
  | BatchUpsertIntegrationsResponseBody
  | Array<BatchUpsertIntegrationsIntegrationsResponseBody>;

/** @internal */
export const BatchUpsertIntegrationsRequestBody$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceZipUrl: z.string().optional(),
  sourceYaml: z.string().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsRequestBody$Outbound = {
  sourceZipUrl?: string | undefined;
  sourceYaml?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsRequestBody$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequestBody$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequestBody
> = z.object({
  sourceZipUrl: z.string().optional(),
  sourceYaml: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequestBody$ {
  /** @deprecated use `BatchUpsertIntegrationsRequestBody$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsRequestBody$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsRequestBody$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequestBody$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequestBody$Outbound;
}

export function batchUpsertIntegrationsRequestBodyToJSON(
  batchUpsertIntegrationsRequestBody: BatchUpsertIntegrationsRequestBody,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequestBody$outboundSchema.parse(
      batchUpsertIntegrationsRequestBody,
    ),
  );
}

export function batchUpsertIntegrationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequestBody' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRequest$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() => BatchUpsertIntegrationsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BatchUpsertIntegrationsRequest$Outbound = {
  projectIdOrName: string;
  RequestBody: BatchUpsertIntegrationsRequestBody$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsRequest$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequest$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() => BatchUpsertIntegrationsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequest$ {
  /** @deprecated use `BatchUpsertIntegrationsRequest$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsRequest$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequest$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsRequest$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequest$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequest$Outbound;
}

export function batchUpsertIntegrationsRequestToJSON(
  batchUpsertIntegrationsRequest: BatchUpsertIntegrationsRequest,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequest$outboundSchema.parse(
      batchUpsertIntegrationsRequest,
    ),
  );
}

export function batchUpsertIntegrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequest' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsResponseBody$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsResponseBody$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsResponseBody$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsResponseBody$ {
  /** @deprecated use `BatchUpsertIntegrationsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsResponseBody$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsResponseBody$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsResponseBody$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsResponseBody$Outbound;
}

export function batchUpsertIntegrationsResponseBodyToJSON(
  batchUpsertIntegrationsResponseBody: BatchUpsertIntegrationsResponseBody,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsResponseBody$outboundSchema.parse(
      batchUpsertIntegrationsResponseBody,
    ),
  );
}

export function batchUpsertIntegrationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsResponseBody' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRequiredFields2$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequiredFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsRequiredFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsRequiredFields2$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequiredFields2$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequiredFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequiredFields2$ {
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields2$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsRequiredFields2$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields2$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsRequiredFields2$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields2$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequiredFields2$Outbound;
}

export function batchUpsertIntegrationsRequiredFields2ToJSON(
  batchUpsertIntegrationsRequiredFields2:
    BatchUpsertIntegrationsRequiredFields2,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequiredFields2$outboundSchema.parse(
      batchUpsertIntegrationsRequiredFields2,
    ),
  );
}

export function batchUpsertIntegrationsRequiredFields2FromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequiredFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsRequiredFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequiredFields2' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRequiredFields1$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequiredFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsRequiredFields1$Outbound = {
  fieldName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsRequiredFields1$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequiredFields1$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequiredFields1
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequiredFields1$ {
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields1$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsRequiredFields1$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields1$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsRequiredFields1$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields1$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequiredFields1$Outbound;
}

export function batchUpsertIntegrationsRequiredFields1ToJSON(
  batchUpsertIntegrationsRequiredFields1:
    BatchUpsertIntegrationsRequiredFields1,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequiredFields1$outboundSchema.parse(
      batchUpsertIntegrationsRequiredFields1,
    ),
  );
}

export function batchUpsertIntegrationsRequiredFields1FromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequiredFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsRequiredFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequiredFields1' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRequiredFields$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequiredFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsRequiredFields1$inboundSchema),
  z.lazy(() => BatchUpsertIntegrationsRequiredFields2$inboundSchema),
]);

/** @internal */
export type BatchUpsertIntegrationsRequiredFields$Outbound =
  | BatchUpsertIntegrationsRequiredFields1$Outbound
  | BatchUpsertIntegrationsRequiredFields2$Outbound;

/** @internal */
export const BatchUpsertIntegrationsRequiredFields$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRequiredFields$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRequiredFields
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsRequiredFields1$outboundSchema),
  z.lazy(() => BatchUpsertIntegrationsRequiredFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRequiredFields$ {
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsRequiredFields$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsRequiredFields$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRequiredFields$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRequiredFields$Outbound;
}

export function batchUpsertIntegrationsRequiredFieldsToJSON(
  batchUpsertIntegrationsRequiredFields: BatchUpsertIntegrationsRequiredFields,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRequiredFields$outboundSchema.parse(
      batchUpsertIntegrationsRequiredFields,
    ),
  );
}

export function batchUpsertIntegrationsRequiredFieldsFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRequiredFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsRequiredFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRequiredFields' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsOptionalFields2$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsOptionalFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsOptionalFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsOptionalFields2$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsOptionalFields2$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsOptionalFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsOptionalFields2$ {
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields2$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsOptionalFields2$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields2$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsOptionalFields2$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields2$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsOptionalFields2$Outbound;
}

export function batchUpsertIntegrationsOptionalFields2ToJSON(
  batchUpsertIntegrationsOptionalFields2:
    BatchUpsertIntegrationsOptionalFields2,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsOptionalFields2$outboundSchema.parse(
      batchUpsertIntegrationsOptionalFields2,
    ),
  );
}

export function batchUpsertIntegrationsOptionalFields2FromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsOptionalFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsOptionalFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsOptionalFields2' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsOptionalFields1$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsOptionalFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsOptionalFields1$Outbound = {
  fieldName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsOptionalFields1$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsOptionalFields1$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsOptionalFields1
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsOptionalFields1$ {
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields1$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsOptionalFields1$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields1$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsOptionalFields1$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields1$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsOptionalFields1$Outbound;
}

export function batchUpsertIntegrationsOptionalFields1ToJSON(
  batchUpsertIntegrationsOptionalFields1:
    BatchUpsertIntegrationsOptionalFields1,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsOptionalFields1$outboundSchema.parse(
      batchUpsertIntegrationsOptionalFields1,
    ),
  );
}

export function batchUpsertIntegrationsOptionalFields1FromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsOptionalFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsOptionalFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsOptionalFields1' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsOptionalFields$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsOptionalFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsOptionalFields1$inboundSchema),
  z.lazy(() => BatchUpsertIntegrationsOptionalFields2$inboundSchema),
]);

/** @internal */
export type BatchUpsertIntegrationsOptionalFields$Outbound =
  | BatchUpsertIntegrationsOptionalFields1$Outbound
  | BatchUpsertIntegrationsOptionalFields2$Outbound;

/** @internal */
export const BatchUpsertIntegrationsOptionalFields$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsOptionalFields$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsOptionalFields
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsOptionalFields1$outboundSchema),
  z.lazy(() => BatchUpsertIntegrationsOptionalFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsOptionalFields$ {
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsOptionalFields$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsOptionalFields$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFields$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsOptionalFields$Outbound;
}

export function batchUpsertIntegrationsOptionalFieldsToJSON(
  batchUpsertIntegrationsOptionalFields: BatchUpsertIntegrationsOptionalFields,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsOptionalFields$outboundSchema.parse(
      batchUpsertIntegrationsOptionalFields,
    ),
  );
}

export function batchUpsertIntegrationsOptionalFieldsFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsOptionalFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsOptionalFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsOptionalFields' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsOptionalFieldsAuto$inboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsOptionalFieldsAuto> = z
    .nativeEnum(BatchUpsertIntegrationsOptionalFieldsAuto);

/** @internal */
export const BatchUpsertIntegrationsOptionalFieldsAuto$outboundSchema:
  z.ZodNativeEnum<typeof BatchUpsertIntegrationsOptionalFieldsAuto> =
    BatchUpsertIntegrationsOptionalFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsOptionalFieldsAuto$ {
  /** @deprecated use `BatchUpsertIntegrationsOptionalFieldsAuto$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsOptionalFieldsAuto$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsOptionalFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsOptionalFieldsAuto$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsDefaultPeriod$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsDefaultPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsDefaultPeriod$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsDefaultPeriod$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsDefaultPeriod$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsDefaultPeriod
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsDefaultPeriod$ {
  /** @deprecated use `BatchUpsertIntegrationsDefaultPeriod$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsDefaultPeriod$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDefaultPeriod$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsDefaultPeriod$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDefaultPeriod$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsDefaultPeriod$Outbound;
}

export function batchUpsertIntegrationsDefaultPeriodToJSON(
  batchUpsertIntegrationsDefaultPeriod: BatchUpsertIntegrationsDefaultPeriod,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsDefaultPeriod$outboundSchema.parse(
      batchUpsertIntegrationsDefaultPeriod,
    ),
  );
}

export function batchUpsertIntegrationsDefaultPeriodFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsDefaultPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsDefaultPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsDefaultPeriod' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsBackfill$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsBackfill,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() =>
    BatchUpsertIntegrationsDefaultPeriod$inboundSchema
  ),
});

/** @internal */
export type BatchUpsertIntegrationsBackfill$Outbound = {
  defaultPeriod: BatchUpsertIntegrationsDefaultPeriod$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsBackfill$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsBackfill$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsBackfill
> = z.object({
  defaultPeriod: z.lazy(() =>
    BatchUpsertIntegrationsDefaultPeriod$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsBackfill$ {
  /** @deprecated use `BatchUpsertIntegrationsBackfill$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsBackfill$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsBackfill$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsBackfill$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsBackfill$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsBackfill$Outbound;
}

export function batchUpsertIntegrationsBackfillToJSON(
  batchUpsertIntegrationsBackfill: BatchUpsertIntegrationsBackfill,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsBackfill$outboundSchema.parse(
      batchUpsertIntegrationsBackfill,
    ),
  );
}

export function batchUpsertIntegrationsBackfillFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsBackfill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsBackfill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsBackfill' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsMode$inboundSchema: z.ZodNativeEnum<
  typeof BatchUpsertIntegrationsMode
> = z.nativeEnum(BatchUpsertIntegrationsMode);

/** @internal */
export const BatchUpsertIntegrationsMode$outboundSchema: z.ZodNativeEnum<
  typeof BatchUpsertIntegrationsMode
> = BatchUpsertIntegrationsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsMode$ {
  /** @deprecated use `BatchUpsertIntegrationsMode$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsMode$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsMode$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsMode$outboundSchema;
}

/** @internal */
export const BatchUpsertIntegrationsDelivery$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: BatchUpsertIntegrationsMode$inboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsDelivery$Outbound = {
  mode: string;
  pageSize?: number | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsDelivery$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsDelivery$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsDelivery
> = z.object({
  mode: BatchUpsertIntegrationsMode$outboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsDelivery$ {
  /** @deprecated use `BatchUpsertIntegrationsDelivery$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsDelivery$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDelivery$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsDelivery$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsDelivery$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsDelivery$Outbound;
}

export function batchUpsertIntegrationsDeliveryToJSON(
  batchUpsertIntegrationsDelivery: BatchUpsertIntegrationsDelivery,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsDelivery$outboundSchema.parse(
      batchUpsertIntegrationsDelivery,
    ),
  );
}

export function batchUpsertIntegrationsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsDelivery' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsObjects$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsObjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => BatchUpsertIntegrationsRequiredFields1$inboundSchema),
      z.lazy(() => BatchUpsertIntegrationsRequiredFields2$inboundSchema),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => BatchUpsertIntegrationsOptionalFields1$inboundSchema),
      z.lazy(() => BatchUpsertIntegrationsOptionalFields2$inboundSchema),
    ]),
  ).optional(),
  optionalFieldsAuto: BatchUpsertIntegrationsOptionalFieldsAuto$inboundSchema
    .optional(),
  backfill: z.lazy(() => BatchUpsertIntegrationsBackfill$inboundSchema)
    .optional(),
  delivery: z.lazy(() => BatchUpsertIntegrationsDelivery$inboundSchema)
    .optional(),
});

/** @internal */
export type BatchUpsertIntegrationsObjects$Outbound = {
  objectName: string;
  destination: string;
  schedule: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | BatchUpsertIntegrationsRequiredFields1$Outbound
      | BatchUpsertIntegrationsRequiredFields2$Outbound
    >
    | undefined;
  optionalFields?:
    | Array<
      | BatchUpsertIntegrationsOptionalFields1$Outbound
      | BatchUpsertIntegrationsOptionalFields2$Outbound
    >
    | undefined;
  optionalFieldsAuto?: string | undefined;
  backfill?: BatchUpsertIntegrationsBackfill$Outbound | undefined;
  delivery?: BatchUpsertIntegrationsDelivery$Outbound | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsObjects$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsObjects$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsObjects
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => BatchUpsertIntegrationsRequiredFields1$outboundSchema),
      z.lazy(() => BatchUpsertIntegrationsRequiredFields2$outboundSchema),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => BatchUpsertIntegrationsOptionalFields1$outboundSchema),
      z.lazy(() => BatchUpsertIntegrationsOptionalFields2$outboundSchema),
    ]),
  ).optional(),
  optionalFieldsAuto: BatchUpsertIntegrationsOptionalFieldsAuto$outboundSchema
    .optional(),
  backfill: z.lazy(() => BatchUpsertIntegrationsBackfill$outboundSchema)
    .optional(),
  delivery: z.lazy(() => BatchUpsertIntegrationsDelivery$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsObjects$ {
  /** @deprecated use `BatchUpsertIntegrationsObjects$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsObjects$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsObjects$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsObjects$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsObjects$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsObjects$Outbound;
}

export function batchUpsertIntegrationsObjectsToJSON(
  batchUpsertIntegrationsObjects: BatchUpsertIntegrationsObjects,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsObjects$outboundSchema.parse(
      batchUpsertIntegrationsObjects,
    ),
  );
}

export function batchUpsertIntegrationsObjectsFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsObjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsObjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsObjects' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsRead$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(z.lazy(() => BatchUpsertIntegrationsObjects$inboundSchema))
    .optional(),
});

/** @internal */
export type BatchUpsertIntegrationsRead$Outbound = {
  objects?: Array<BatchUpsertIntegrationsObjects$Outbound> | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsRead$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsRead$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsRead
> = z.object({
  objects: z.array(z.lazy(() => BatchUpsertIntegrationsObjects$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsRead$ {
  /** @deprecated use `BatchUpsertIntegrationsRead$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsRead$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRead$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsRead$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsRead$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsRead$Outbound;
}

export function batchUpsertIntegrationsReadToJSON(
  batchUpsertIntegrationsRead: BatchUpsertIntegrationsRead,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsRead$outboundSchema.parse(
      batchUpsertIntegrationsRead,
    ),
  );
}

export function batchUpsertIntegrationsReadFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsRead' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsValueDefaults$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsValueDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsValueDefaults$Outbound = {
  allowAnyFields?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsValueDefaults$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsValueDefaults$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsValueDefaults
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsValueDefaults$ {
  /** @deprecated use `BatchUpsertIntegrationsValueDefaults$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsValueDefaults$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsValueDefaults$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsValueDefaults$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsValueDefaults$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsValueDefaults$Outbound;
}

export function batchUpsertIntegrationsValueDefaultsToJSON(
  batchUpsertIntegrationsValueDefaults: BatchUpsertIntegrationsValueDefaults,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsValueDefaults$outboundSchema.parse(
      batchUpsertIntegrationsValueDefaults,
    ),
  );
}

export function batchUpsertIntegrationsValueDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsValueDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsValueDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsValueDefaults' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsObjects$inboundSchema:
  z.ZodType<BatchUpsertIntegrationsIntegrationsObjects, z.ZodTypeDef, unknown> =
    z.object({
      objectName: z.string(),
      inheritMapping: z.boolean().optional(),
      valueDefaults: z.lazy(() =>
        BatchUpsertIntegrationsValueDefaults$inboundSchema
      ).optional(),
    });

/** @internal */
export type BatchUpsertIntegrationsIntegrationsObjects$Outbound = {
  objectName: string;
  inheritMapping?: boolean | undefined;
  valueDefaults?: BatchUpsertIntegrationsValueDefaults$Outbound | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsIntegrationsObjects$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsObjects$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationsObjects
  > = z.object({
    objectName: z.string(),
    inheritMapping: z.boolean().optional(),
    valueDefaults: z.lazy(() =>
      BatchUpsertIntegrationsValueDefaults$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsObjects$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsObjects$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsObjects$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsObjects$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsObjects$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsObjects$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsIntegrationsObjects$Outbound;
}

export function batchUpsertIntegrationsIntegrationsObjectsToJSON(
  batchUpsertIntegrationsIntegrationsObjects:
    BatchUpsertIntegrationsIntegrationsObjects,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationsObjects$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationsObjects,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationsObjectsFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationsObjects,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationsObjects$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationsObjects' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsWrite$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsWrite,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationsObjects$inboundSchema),
  ).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsWrite$Outbound = {
  objects?:
    | Array<BatchUpsertIntegrationsIntegrationsObjects$Outbound>
    | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsWrite$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsWrite$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsWrite
> = z.object({
  objects: z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationsObjects$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsWrite$ {
  /** @deprecated use `BatchUpsertIntegrationsWrite$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsWrite$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsWrite$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsWrite$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsWrite$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsWrite$Outbound;
}

export function batchUpsertIntegrationsWriteToJSON(
  batchUpsertIntegrationsWrite: BatchUpsertIntegrationsWrite,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsWrite$outboundSchema.parse(
      batchUpsertIntegrationsWrite,
    ),
  );
}

export function batchUpsertIntegrationsWriteFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsWrite' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsProxy$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type BatchUpsertIntegrationsProxy$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsProxy$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsProxy$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsProxy
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsProxy$ {
  /** @deprecated use `BatchUpsertIntegrationsProxy$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsProxy$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsProxy$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsProxy$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsProxy$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsProxy$Outbound;
}

export function batchUpsertIntegrationsProxyToJSON(
  batchUpsertIntegrationsProxy: BatchUpsertIntegrationsProxy,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsProxy$outboundSchema.parse(
      batchUpsertIntegrationsProxy,
    ),
  );
}

export function batchUpsertIntegrationsProxyFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsProxy' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsContent$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => BatchUpsertIntegrationsRead$inboundSchema).optional(),
  write: z.lazy(() => BatchUpsertIntegrationsWrite$inboundSchema).optional(),
  proxy: z.lazy(() => BatchUpsertIntegrationsProxy$inboundSchema).optional(),
});

/** @internal */
export type BatchUpsertIntegrationsContent$Outbound = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: BatchUpsertIntegrationsRead$Outbound | undefined;
  write?: BatchUpsertIntegrationsWrite$Outbound | undefined;
  proxy?: BatchUpsertIntegrationsProxy$Outbound | undefined;
};

/** @internal */
export const BatchUpsertIntegrationsContent$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsContent$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsContent
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => BatchUpsertIntegrationsRead$outboundSchema).optional(),
  write: z.lazy(() => BatchUpsertIntegrationsWrite$outboundSchema).optional(),
  proxy: z.lazy(() => BatchUpsertIntegrationsProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsContent$ {
  /** @deprecated use `BatchUpsertIntegrationsContent$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsContent$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsContent$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsContent$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsContent$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsContent$Outbound;
}

export function batchUpsertIntegrationsContentToJSON(
  batchUpsertIntegrationsContent: BatchUpsertIntegrationsContent,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsContent$outboundSchema.parse(
      batchUpsertIntegrationsContent,
    ),
  );
}

export function batchUpsertIntegrationsContentFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsContent' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsLatestRevision$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsLatestRevision,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  content: z.lazy(() => BatchUpsertIntegrationsContent$inboundSchema),
});

/** @internal */
export type BatchUpsertIntegrationsLatestRevision$Outbound = {
  id: string;
  specVersion: string;
  createTime: string;
  content: BatchUpsertIntegrationsContent$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsLatestRevision$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsLatestRevision$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsLatestRevision
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  content: z.lazy(() => BatchUpsertIntegrationsContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsLatestRevision$ {
  /** @deprecated use `BatchUpsertIntegrationsLatestRevision$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsLatestRevision$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsLatestRevision$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsLatestRevision$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsLatestRevision$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsLatestRevision$Outbound;
}

export function batchUpsertIntegrationsLatestRevisionToJSON(
  batchUpsertIntegrationsLatestRevision: BatchUpsertIntegrationsLatestRevision,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsLatestRevision$outboundSchema.parse(
      batchUpsertIntegrationsLatestRevision,
    ),
  );
}

export function batchUpsertIntegrationsLatestRevisionFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsLatestRevision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsLatestRevision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsLatestRevision' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsIntegrationsResponseBody$inboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    projectId: z.string(),
    name: z.string(),
    provider: z.string(),
    createTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updateTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    latestRevision: z.lazy(() =>
      BatchUpsertIntegrationsLatestRevision$inboundSchema
    ),
  });

/** @internal */
export type BatchUpsertIntegrationsIntegrationsResponseBody$Outbound = {
  id: string;
  projectId: string;
  name: string;
  provider: string;
  createTime: string;
  updateTime?: string | undefined;
  latestRevision: BatchUpsertIntegrationsLatestRevision$Outbound;
};

/** @internal */
export const BatchUpsertIntegrationsIntegrationsResponseBody$outboundSchema:
  z.ZodType<
    BatchUpsertIntegrationsIntegrationsResponseBody$Outbound,
    z.ZodTypeDef,
    BatchUpsertIntegrationsIntegrationsResponseBody
  > = z.object({
    id: z.string(),
    projectId: z.string(),
    name: z.string(),
    provider: z.string(),
    createTime: z.date().transform(v => v.toISOString()),
    updateTime: z.date().transform(v => v.toISOString()).optional(),
    latestRevision: z.lazy(() =>
      BatchUpsertIntegrationsLatestRevision$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsIntegrationsResponseBody$ {
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    BatchUpsertIntegrationsIntegrationsResponseBody$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BatchUpsertIntegrationsIntegrationsResponseBody$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsIntegrationsResponseBody$Outbound` instead. */
  export type Outbound =
    BatchUpsertIntegrationsIntegrationsResponseBody$Outbound;
}

export function batchUpsertIntegrationsIntegrationsResponseBodyToJSON(
  batchUpsertIntegrationsIntegrationsResponseBody:
    BatchUpsertIntegrationsIntegrationsResponseBody,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsIntegrationsResponseBody$outboundSchema.parse(
      batchUpsertIntegrationsIntegrationsResponseBody,
    ),
  );
}

export function batchUpsertIntegrationsIntegrationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BatchUpsertIntegrationsIntegrationsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BatchUpsertIntegrationsIntegrationsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BatchUpsertIntegrationsIntegrationsResponseBody' from JSON`,
  );
}

/** @internal */
export const BatchUpsertIntegrationsResponse$inboundSchema: z.ZodType<
  BatchUpsertIntegrationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsResponseBody$inboundSchema),
  z.array(
    z.lazy(() => BatchUpsertIntegrationsIntegrationsResponseBody$inboundSchema),
  ),
]);

/** @internal */
export type BatchUpsertIntegrationsResponse$Outbound =
  | BatchUpsertIntegrationsResponseBody$Outbound
  | Array<BatchUpsertIntegrationsIntegrationsResponseBody$Outbound>;

/** @internal */
export const BatchUpsertIntegrationsResponse$outboundSchema: z.ZodType<
  BatchUpsertIntegrationsResponse$Outbound,
  z.ZodTypeDef,
  BatchUpsertIntegrationsResponse
> = z.union([
  z.lazy(() => BatchUpsertIntegrationsResponseBody$outboundSchema),
  z.array(z.lazy(() =>
    BatchUpsertIntegrationsIntegrationsResponseBody$outboundSchema
  )),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchUpsertIntegrationsResponse$ {
  /** @deprecated use `BatchUpsertIntegrationsResponse$inboundSchema` instead. */
  export const inboundSchema = BatchUpsertIntegrationsResponse$inboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsResponse$outboundSchema` instead. */
  export const outboundSchema = BatchUpsertIntegrationsResponse$outboundSchema;
  /** @deprecated use `BatchUpsertIntegrationsResponse$Outbound` instead. */
  export type Outbound = BatchUpsertIntegrationsResponse$Outbound;
}

export function batchUpsertIntegrationsResponseToJSON(
  batchUpsertIntegrationsResponse: BatchUpsertIntegrationsResponse,
): string {
  return JSON.stringify(
    BatchUpsertIntegrationsResponse$outboundSchema.parse(
      batchUpsertIntegrationsResponse,
    ),
  );
}

export function batchUpsertIntegrationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<BatchUpsertIntegrationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchUpsertIntegrationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchUpsertIntegrationsResponse' from JSON`,
  );
}
