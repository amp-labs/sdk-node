/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The mode of read operation. Currently only asynchronus operation is supported.
 */
export const Mode = {
  Async: "async",
} as const;
/**
 * The mode of read operation. Currently only asynchronus operation is supported.
 */
export type Mode = ClosedEnum<typeof Mode>;

/**
 * Read Request
 */
export type TriggerReadRequestBody = {
  /**
   * The ID of the user group whose SaaS instance you'd like to read data from. This is the ID that was provided during installation creation.
   */
  groupRef: string;
  /**
   * The mode of read operation. Currently only asynchronus operation is supported.
   */
  mode: Mode;
  /**
   * The UTC timestamp from which to read data. If omitted, we will read all data.
   */
  sinceTimestamp?: string | undefined;
};

export type TriggerReadRequest = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  /**
   * Read Request
   */
  requestBody: TriggerReadRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type TriggerReadReadResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The success response
 */
export type TriggerReadResponseBody = {
  /**
   * The operation ID
   */
  operationId: string;
};

export type TriggerReadResponse =
  | TriggerReadResponseBody
  | TriggerReadReadResponseBody;

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const TriggerReadRequestBody$inboundSchema: z.ZodType<
  TriggerReadRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  mode: Mode$inboundSchema,
  sinceTimestamp: z.string().optional(),
});

/** @internal */
export type TriggerReadRequestBody$Outbound = {
  groupRef: string;
  mode: string;
  sinceTimestamp?: string | undefined;
};

/** @internal */
export const TriggerReadRequestBody$outboundSchema: z.ZodType<
  TriggerReadRequestBody$Outbound,
  z.ZodTypeDef,
  TriggerReadRequestBody
> = z.object({
  groupRef: z.string(),
  mode: Mode$outboundSchema,
  sinceTimestamp: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadRequestBody$ {
  /** @deprecated use `TriggerReadRequestBody$inboundSchema` instead. */
  export const inboundSchema = TriggerReadRequestBody$inboundSchema;
  /** @deprecated use `TriggerReadRequestBody$outboundSchema` instead. */
  export const outboundSchema = TriggerReadRequestBody$outboundSchema;
  /** @deprecated use `TriggerReadRequestBody$Outbound` instead. */
  export type Outbound = TriggerReadRequestBody$Outbound;
}

export function triggerReadRequestBodyToJSON(
  triggerReadRequestBody: TriggerReadRequestBody,
): string {
  return JSON.stringify(
    TriggerReadRequestBody$outboundSchema.parse(triggerReadRequestBody),
  );
}

export function triggerReadRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadRequestBody' from JSON`,
  );
}

/** @internal */
export const TriggerReadRequest$inboundSchema: z.ZodType<
  TriggerReadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  RequestBody: z.lazy(() => TriggerReadRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TriggerReadRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  RequestBody: TriggerReadRequestBody$Outbound;
};

/** @internal */
export const TriggerReadRequest$outboundSchema: z.ZodType<
  TriggerReadRequest$Outbound,
  z.ZodTypeDef,
  TriggerReadRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  requestBody: z.lazy(() => TriggerReadRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadRequest$ {
  /** @deprecated use `TriggerReadRequest$inboundSchema` instead. */
  export const inboundSchema = TriggerReadRequest$inboundSchema;
  /** @deprecated use `TriggerReadRequest$outboundSchema` instead. */
  export const outboundSchema = TriggerReadRequest$outboundSchema;
  /** @deprecated use `TriggerReadRequest$Outbound` instead. */
  export type Outbound = TriggerReadRequest$Outbound;
}

export function triggerReadRequestToJSON(
  triggerReadRequest: TriggerReadRequest,
): string {
  return JSON.stringify(
    TriggerReadRequest$outboundSchema.parse(triggerReadRequest),
  );
}

export function triggerReadRequestFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadRequest' from JSON`,
  );
}

/** @internal */
export const TriggerReadReadResponseBody$inboundSchema: z.ZodType<
  TriggerReadReadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type TriggerReadReadResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const TriggerReadReadResponseBody$outboundSchema: z.ZodType<
  TriggerReadReadResponseBody$Outbound,
  z.ZodTypeDef,
  TriggerReadReadResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadReadResponseBody$ {
  /** @deprecated use `TriggerReadReadResponseBody$inboundSchema` instead. */
  export const inboundSchema = TriggerReadReadResponseBody$inboundSchema;
  /** @deprecated use `TriggerReadReadResponseBody$outboundSchema` instead. */
  export const outboundSchema = TriggerReadReadResponseBody$outboundSchema;
  /** @deprecated use `TriggerReadReadResponseBody$Outbound` instead. */
  export type Outbound = TriggerReadReadResponseBody$Outbound;
}

export function triggerReadReadResponseBodyToJSON(
  triggerReadReadResponseBody: TriggerReadReadResponseBody,
): string {
  return JSON.stringify(
    TriggerReadReadResponseBody$outboundSchema.parse(
      triggerReadReadResponseBody,
    ),
  );
}

export function triggerReadReadResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadReadResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadReadResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadReadResponseBody' from JSON`,
  );
}

/** @internal */
export const TriggerReadResponseBody$inboundSchema: z.ZodType<
  TriggerReadResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  operationId: z.string(),
});

/** @internal */
export type TriggerReadResponseBody$Outbound = {
  operationId: string;
};

/** @internal */
export const TriggerReadResponseBody$outboundSchema: z.ZodType<
  TriggerReadResponseBody$Outbound,
  z.ZodTypeDef,
  TriggerReadResponseBody
> = z.object({
  operationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadResponseBody$ {
  /** @deprecated use `TriggerReadResponseBody$inboundSchema` instead. */
  export const inboundSchema = TriggerReadResponseBody$inboundSchema;
  /** @deprecated use `TriggerReadResponseBody$outboundSchema` instead. */
  export const outboundSchema = TriggerReadResponseBody$outboundSchema;
  /** @deprecated use `TriggerReadResponseBody$Outbound` instead. */
  export type Outbound = TriggerReadResponseBody$Outbound;
}

export function triggerReadResponseBodyToJSON(
  triggerReadResponseBody: TriggerReadResponseBody,
): string {
  return JSON.stringify(
    TriggerReadResponseBody$outboundSchema.parse(triggerReadResponseBody),
  );
}

export function triggerReadResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadResponseBody' from JSON`,
  );
}

/** @internal */
export const TriggerReadResponse$inboundSchema: z.ZodType<
  TriggerReadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TriggerReadResponseBody$inboundSchema),
  z.lazy(() => TriggerReadReadResponseBody$inboundSchema),
]);

/** @internal */
export type TriggerReadResponse$Outbound =
  | TriggerReadResponseBody$Outbound
  | TriggerReadReadResponseBody$Outbound;

/** @internal */
export const TriggerReadResponse$outboundSchema: z.ZodType<
  TriggerReadResponse$Outbound,
  z.ZodTypeDef,
  TriggerReadResponse
> = z.union([
  z.lazy(() => TriggerReadResponseBody$outboundSchema),
  z.lazy(() => TriggerReadReadResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadResponse$ {
  /** @deprecated use `TriggerReadResponse$inboundSchema` instead. */
  export const inboundSchema = TriggerReadResponse$inboundSchema;
  /** @deprecated use `TriggerReadResponse$outboundSchema` instead. */
  export const outboundSchema = TriggerReadResponse$outboundSchema;
  /** @deprecated use `TriggerReadResponse$Outbound` instead. */
  export type Outbound = TriggerReadResponse$Outbound;
}

export function triggerReadResponseToJSON(
  triggerReadResponse: TriggerReadResponse,
): string {
  return JSON.stringify(
    TriggerReadResponse$outboundSchema.parse(triggerReadResponse),
  );
}

export function triggerReadResponseFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadResponse' from JSON`,
  );
}
