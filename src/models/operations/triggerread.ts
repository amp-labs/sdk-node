/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The mode of read operation. Currently only asynchronus operation is supported.
 */
export const Mode = {
  Async: "async",
} as const;
/**
 * The mode of read operation. Currently only asynchronus operation is supported.
 */
export type Mode = ClosedEnum<typeof Mode>;

/**
 * Read Request
 */
export type TriggerReadReadRequest = {
  /**
   * The ID of the user group whose SaaS instance you'd like to read data from. This is the ID that was provided during installation creation.
   */
  groupRef: string;
  /**
   * The mode of read operation. Currently only asynchronus operation is supported.
   */
  mode: Mode;
  /**
   * The UTC timestamp from which to read data. If omitted, we will read all data.
   */
  sinceTimestamp?: string | undefined;
};

export type TriggerReadRequest = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  /**
   * Read Request
   */
  requestBody: TriggerReadReadRequest;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type TriggerReadAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The success response
 */
export type TriggerReadReadResultAsync = {
  /**
   * The operation ID
   */
  operationId: string;
};

export type TriggerReadResponse =
  | TriggerReadReadResultAsync
  | TriggerReadAPIProblem;

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const TriggerReadReadRequest$inboundSchema: z.ZodType<
  TriggerReadReadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupRef: z.string(),
  mode: Mode$inboundSchema,
  sinceTimestamp: z.string().optional(),
});

/** @internal */
export type TriggerReadReadRequest$Outbound = {
  groupRef: string;
  mode: string;
  sinceTimestamp?: string | undefined;
};

/** @internal */
export const TriggerReadReadRequest$outboundSchema: z.ZodType<
  TriggerReadReadRequest$Outbound,
  z.ZodTypeDef,
  TriggerReadReadRequest
> = z.object({
  groupRef: z.string(),
  mode: Mode$outboundSchema,
  sinceTimestamp: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadReadRequest$ {
  /** @deprecated use `TriggerReadReadRequest$inboundSchema` instead. */
  export const inboundSchema = TriggerReadReadRequest$inboundSchema;
  /** @deprecated use `TriggerReadReadRequest$outboundSchema` instead. */
  export const outboundSchema = TriggerReadReadRequest$outboundSchema;
  /** @deprecated use `TriggerReadReadRequest$Outbound` instead. */
  export type Outbound = TriggerReadReadRequest$Outbound;
}

export function triggerReadReadRequestToJSON(
  triggerReadReadRequest: TriggerReadReadRequest,
): string {
  return JSON.stringify(
    TriggerReadReadRequest$outboundSchema.parse(triggerReadReadRequest),
  );
}

export function triggerReadReadRequestFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadReadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadReadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadReadRequest' from JSON`,
  );
}

/** @internal */
export const TriggerReadRequest$inboundSchema: z.ZodType<
  TriggerReadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  RequestBody: z.lazy(() => TriggerReadReadRequest$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TriggerReadRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  objectName: string;
  RequestBody: TriggerReadReadRequest$Outbound;
};

/** @internal */
export const TriggerReadRequest$outboundSchema: z.ZodType<
  TriggerReadRequest$Outbound,
  z.ZodTypeDef,
  TriggerReadRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  objectName: z.string(),
  requestBody: z.lazy(() => TriggerReadReadRequest$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadRequest$ {
  /** @deprecated use `TriggerReadRequest$inboundSchema` instead. */
  export const inboundSchema = TriggerReadRequest$inboundSchema;
  /** @deprecated use `TriggerReadRequest$outboundSchema` instead. */
  export const outboundSchema = TriggerReadRequest$outboundSchema;
  /** @deprecated use `TriggerReadRequest$Outbound` instead. */
  export type Outbound = TriggerReadRequest$Outbound;
}

export function triggerReadRequestToJSON(
  triggerReadRequest: TriggerReadRequest,
): string {
  return JSON.stringify(
    TriggerReadRequest$outboundSchema.parse(triggerReadRequest),
  );
}

export function triggerReadRequestFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadRequest' from JSON`,
  );
}

/** @internal */
export const TriggerReadAPIProblem$inboundSchema: z.ZodType<
  TriggerReadAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type TriggerReadAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const TriggerReadAPIProblem$outboundSchema: z.ZodType<
  TriggerReadAPIProblem$Outbound,
  z.ZodTypeDef,
  TriggerReadAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadAPIProblem$ {
  /** @deprecated use `TriggerReadAPIProblem$inboundSchema` instead. */
  export const inboundSchema = TriggerReadAPIProblem$inboundSchema;
  /** @deprecated use `TriggerReadAPIProblem$outboundSchema` instead. */
  export const outboundSchema = TriggerReadAPIProblem$outboundSchema;
  /** @deprecated use `TriggerReadAPIProblem$Outbound` instead. */
  export type Outbound = TriggerReadAPIProblem$Outbound;
}

export function triggerReadAPIProblemToJSON(
  triggerReadAPIProblem: TriggerReadAPIProblem,
): string {
  return JSON.stringify(
    TriggerReadAPIProblem$outboundSchema.parse(triggerReadAPIProblem),
  );
}

export function triggerReadAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadAPIProblem' from JSON`,
  );
}

/** @internal */
export const TriggerReadReadResultAsync$inboundSchema: z.ZodType<
  TriggerReadReadResultAsync,
  z.ZodTypeDef,
  unknown
> = z.object({
  operationId: z.string(),
});

/** @internal */
export type TriggerReadReadResultAsync$Outbound = {
  operationId: string;
};

/** @internal */
export const TriggerReadReadResultAsync$outboundSchema: z.ZodType<
  TriggerReadReadResultAsync$Outbound,
  z.ZodTypeDef,
  TriggerReadReadResultAsync
> = z.object({
  operationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadReadResultAsync$ {
  /** @deprecated use `TriggerReadReadResultAsync$inboundSchema` instead. */
  export const inboundSchema = TriggerReadReadResultAsync$inboundSchema;
  /** @deprecated use `TriggerReadReadResultAsync$outboundSchema` instead. */
  export const outboundSchema = TriggerReadReadResultAsync$outboundSchema;
  /** @deprecated use `TriggerReadReadResultAsync$Outbound` instead. */
  export type Outbound = TriggerReadReadResultAsync$Outbound;
}

export function triggerReadReadResultAsyncToJSON(
  triggerReadReadResultAsync: TriggerReadReadResultAsync,
): string {
  return JSON.stringify(
    TriggerReadReadResultAsync$outboundSchema.parse(triggerReadReadResultAsync),
  );
}

export function triggerReadReadResultAsyncFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadReadResultAsync, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadReadResultAsync$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadReadResultAsync' from JSON`,
  );
}

/** @internal */
export const TriggerReadResponse$inboundSchema: z.ZodType<
  TriggerReadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TriggerReadReadResultAsync$inboundSchema),
  z.lazy(() => TriggerReadAPIProblem$inboundSchema),
]);

/** @internal */
export type TriggerReadResponse$Outbound =
  | TriggerReadReadResultAsync$Outbound
  | TriggerReadAPIProblem$Outbound;

/** @internal */
export const TriggerReadResponse$outboundSchema: z.ZodType<
  TriggerReadResponse$Outbound,
  z.ZodTypeDef,
  TriggerReadResponse
> = z.union([
  z.lazy(() => TriggerReadReadResultAsync$outboundSchema),
  z.lazy(() => TriggerReadAPIProblem$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReadResponse$ {
  /** @deprecated use `TriggerReadResponse$inboundSchema` instead. */
  export const inboundSchema = TriggerReadResponse$inboundSchema;
  /** @deprecated use `TriggerReadResponse$outboundSchema` instead. */
  export const outboundSchema = TriggerReadResponse$outboundSchema;
  /** @deprecated use `TriggerReadResponse$Outbound` instead. */
  export type Outbound = TriggerReadResponse$Outbound;
}

export function triggerReadResponseToJSON(
  triggerReadResponse: TriggerReadResponse,
): string {
  return JSON.stringify(
    TriggerReadResponse$outboundSchema.parse(triggerReadResponse),
  );
}

export function triggerReadResponseFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReadResponse' from JSON`,
  );
}
