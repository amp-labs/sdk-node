/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AcceptInviteServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type AcceptInviteRequestBody = {
  /**
   * The email address that the invite was sent to
   */
  invitedEmail: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type AcceptInviteUserResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type AcceptInviteBuilder = {
  /**
   * The builder ID.
   */
  id: string;
  /**
   * The identity provider
   */
  idpProvider: string;
  /**
   * ID used by the identity provider
   */
  idpRef: string;
  /**
   * The time that the builder joined Ampersand.
   */
  createTime: Date;
  firstName?: string | undefined;
  lastName?: string | undefined;
  fullName?: string | undefined;
  primaryEmail?: string | undefined;
};

/**
 * The type of the principal.
 */
export const AcceptInvitePrincipalType = {
  Team: "team",
  Builder: "builder",
} as const;
/**
 * The type of the principal.
 */
export type AcceptInvitePrincipalType = ClosedEnum<
  typeof AcceptInvitePrincipalType
>;

export type AcceptInviteProject = {
  /**
   * The project ID.
   */
  id: string;
  /**
   * The project name.
   */
  name: string;
  /**
   * The name of the application, which is displayed to end users.
   */
  appName: string;
  /**
   * The organization ID that this project belongs to.
   */
  orgId?: string | undefined;
  /**
   * The time the project was created.
   */
  createTime: Date;
  /**
   * The time the project was updated.
   */
  updateTime?: Date | undefined;
};

export type AcceptInviteProjectRoles = {
  /**
   * The role of the builder in the project.
   */
  role: string;
  /**
   * The type of the principal.
   */
  principalType: AcceptInvitePrincipalType;
  /**
   * The ID of the team or builder.
   */
  principalId: string;
  project: AcceptInviteProject;
};

/**
 * The type of the principal.
 */
export const AcceptInviteUserPrincipalType = {
  Team: "team",
  Builder: "builder",
} as const;
/**
 * The type of the principal.
 */
export type AcceptInviteUserPrincipalType = ClosedEnum<
  typeof AcceptInviteUserPrincipalType
>;

export type AcceptInviteOrg = {
  /**
   * The organization ID.
   */
  id: string;
  /**
   * The organization label.
   */
  label: string;
  /**
   * The ID of the Everyone team for the org.
   */
  defaultTeamId: string;
  /**
   * The time the organization was created.
   */
  createTime: Date;
  /**
   * The time the organization was updated.
   */
  updateTime?: Date | undefined;
};

export type AcceptInviteOrgRole = {
  /**
   * The role of the builder in the org.
   */
  role: string;
  /**
   * The type of the principal.
   */
  principalType: AcceptInviteUserPrincipalType;
  /**
   * The ID of the team or builder.
   */
  principalId: string;
  org: AcceptInviteOrg;
};

/**
 * Information about the current user and their organizations and projects
 */
export type AcceptInviteResponseBody = {
  builder: AcceptInviteBuilder;
  /**
   * A map of project IDs to project roles for the builder.
   */
  projectRoles: { [k: string]: AcceptInviteProjectRoles };
  orgRole?: AcceptInviteOrgRole | undefined;
};

export type AcceptInviteResponse =
  | AcceptInviteResponseBody
  | AcceptInviteUserResponseBody;

/** @internal */
export const AcceptInviteRequestBody$inboundSchema: z.ZodType<
  AcceptInviteRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  invitedEmail: z.string(),
});

/** @internal */
export type AcceptInviteRequestBody$Outbound = {
  invitedEmail: string;
};

/** @internal */
export const AcceptInviteRequestBody$outboundSchema: z.ZodType<
  AcceptInviteRequestBody$Outbound,
  z.ZodTypeDef,
  AcceptInviteRequestBody
> = z.object({
  invitedEmail: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteRequestBody$ {
  /** @deprecated use `AcceptInviteRequestBody$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteRequestBody$inboundSchema;
  /** @deprecated use `AcceptInviteRequestBody$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteRequestBody$outboundSchema;
  /** @deprecated use `AcceptInviteRequestBody$Outbound` instead. */
  export type Outbound = AcceptInviteRequestBody$Outbound;
}

export function acceptInviteRequestBodyToJSON(
  acceptInviteRequestBody: AcceptInviteRequestBody,
): string {
  return JSON.stringify(
    AcceptInviteRequestBody$outboundSchema.parse(acceptInviteRequestBody),
  );
}

export function acceptInviteRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteRequestBody' from JSON`,
  );
}

/** @internal */
export const AcceptInviteUserResponseBody$inboundSchema: z.ZodType<
  AcceptInviteUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type AcceptInviteUserResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const AcceptInviteUserResponseBody$outboundSchema: z.ZodType<
  AcceptInviteUserResponseBody$Outbound,
  z.ZodTypeDef,
  AcceptInviteUserResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteUserResponseBody$ {
  /** @deprecated use `AcceptInviteUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteUserResponseBody$inboundSchema;
  /** @deprecated use `AcceptInviteUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteUserResponseBody$outboundSchema;
  /** @deprecated use `AcceptInviteUserResponseBody$Outbound` instead. */
  export type Outbound = AcceptInviteUserResponseBody$Outbound;
}

export function acceptInviteUserResponseBodyToJSON(
  acceptInviteUserResponseBody: AcceptInviteUserResponseBody,
): string {
  return JSON.stringify(
    AcceptInviteUserResponseBody$outboundSchema.parse(
      acceptInviteUserResponseBody,
    ),
  );
}

export function acceptInviteUserResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteUserResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteUserResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteUserResponseBody' from JSON`,
  );
}

/** @internal */
export const AcceptInviteBuilder$inboundSchema: z.ZodType<
  AcceptInviteBuilder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  idpProvider: z.string(),
  idpRef: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  fullName: z.string().optional(),
  primaryEmail: z.string().optional(),
});

/** @internal */
export type AcceptInviteBuilder$Outbound = {
  id: string;
  idpProvider: string;
  idpRef: string;
  createTime: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  fullName?: string | undefined;
  primaryEmail?: string | undefined;
};

/** @internal */
export const AcceptInviteBuilder$outboundSchema: z.ZodType<
  AcceptInviteBuilder$Outbound,
  z.ZodTypeDef,
  AcceptInviteBuilder
> = z.object({
  id: z.string(),
  idpProvider: z.string(),
  idpRef: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  fullName: z.string().optional(),
  primaryEmail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteBuilder$ {
  /** @deprecated use `AcceptInviteBuilder$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteBuilder$inboundSchema;
  /** @deprecated use `AcceptInviteBuilder$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteBuilder$outboundSchema;
  /** @deprecated use `AcceptInviteBuilder$Outbound` instead. */
  export type Outbound = AcceptInviteBuilder$Outbound;
}

export function acceptInviteBuilderToJSON(
  acceptInviteBuilder: AcceptInviteBuilder,
): string {
  return JSON.stringify(
    AcceptInviteBuilder$outboundSchema.parse(acceptInviteBuilder),
  );
}

export function acceptInviteBuilderFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteBuilder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteBuilder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteBuilder' from JSON`,
  );
}

/** @internal */
export const AcceptInvitePrincipalType$inboundSchema: z.ZodNativeEnum<
  typeof AcceptInvitePrincipalType
> = z.nativeEnum(AcceptInvitePrincipalType);

/** @internal */
export const AcceptInvitePrincipalType$outboundSchema: z.ZodNativeEnum<
  typeof AcceptInvitePrincipalType
> = AcceptInvitePrincipalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInvitePrincipalType$ {
  /** @deprecated use `AcceptInvitePrincipalType$inboundSchema` instead. */
  export const inboundSchema = AcceptInvitePrincipalType$inboundSchema;
  /** @deprecated use `AcceptInvitePrincipalType$outboundSchema` instead. */
  export const outboundSchema = AcceptInvitePrincipalType$outboundSchema;
}

/** @internal */
export const AcceptInviteProject$inboundSchema: z.ZodType<
  AcceptInviteProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  appName: z.string(),
  orgId: z.string().optional(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AcceptInviteProject$Outbound = {
  id: string;
  name: string;
  appName: string;
  orgId?: string | undefined;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const AcceptInviteProject$outboundSchema: z.ZodType<
  AcceptInviteProject$Outbound,
  z.ZodTypeDef,
  AcceptInviteProject
> = z.object({
  id: z.string(),
  name: z.string(),
  appName: z.string(),
  orgId: z.string().optional(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteProject$ {
  /** @deprecated use `AcceptInviteProject$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteProject$inboundSchema;
  /** @deprecated use `AcceptInviteProject$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteProject$outboundSchema;
  /** @deprecated use `AcceptInviteProject$Outbound` instead. */
  export type Outbound = AcceptInviteProject$Outbound;
}

export function acceptInviteProjectToJSON(
  acceptInviteProject: AcceptInviteProject,
): string {
  return JSON.stringify(
    AcceptInviteProject$outboundSchema.parse(acceptInviteProject),
  );
}

export function acceptInviteProjectFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteProject' from JSON`,
  );
}

/** @internal */
export const AcceptInviteProjectRoles$inboundSchema: z.ZodType<
  AcceptInviteProjectRoles,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
  principalType: AcceptInvitePrincipalType$inboundSchema,
  principalId: z.string(),
  project: z.lazy(() => AcceptInviteProject$inboundSchema),
});

/** @internal */
export type AcceptInviteProjectRoles$Outbound = {
  role: string;
  principalType: string;
  principalId: string;
  project: AcceptInviteProject$Outbound;
};

/** @internal */
export const AcceptInviteProjectRoles$outboundSchema: z.ZodType<
  AcceptInviteProjectRoles$Outbound,
  z.ZodTypeDef,
  AcceptInviteProjectRoles
> = z.object({
  role: z.string(),
  principalType: AcceptInvitePrincipalType$outboundSchema,
  principalId: z.string(),
  project: z.lazy(() => AcceptInviteProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteProjectRoles$ {
  /** @deprecated use `AcceptInviteProjectRoles$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteProjectRoles$inboundSchema;
  /** @deprecated use `AcceptInviteProjectRoles$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteProjectRoles$outboundSchema;
  /** @deprecated use `AcceptInviteProjectRoles$Outbound` instead. */
  export type Outbound = AcceptInviteProjectRoles$Outbound;
}

export function acceptInviteProjectRolesToJSON(
  acceptInviteProjectRoles: AcceptInviteProjectRoles,
): string {
  return JSON.stringify(
    AcceptInviteProjectRoles$outboundSchema.parse(acceptInviteProjectRoles),
  );
}

export function acceptInviteProjectRolesFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteProjectRoles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteProjectRoles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteProjectRoles' from JSON`,
  );
}

/** @internal */
export const AcceptInviteUserPrincipalType$inboundSchema: z.ZodNativeEnum<
  typeof AcceptInviteUserPrincipalType
> = z.nativeEnum(AcceptInviteUserPrincipalType);

/** @internal */
export const AcceptInviteUserPrincipalType$outboundSchema: z.ZodNativeEnum<
  typeof AcceptInviteUserPrincipalType
> = AcceptInviteUserPrincipalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteUserPrincipalType$ {
  /** @deprecated use `AcceptInviteUserPrincipalType$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteUserPrincipalType$inboundSchema;
  /** @deprecated use `AcceptInviteUserPrincipalType$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteUserPrincipalType$outboundSchema;
}

/** @internal */
export const AcceptInviteOrg$inboundSchema: z.ZodType<
  AcceptInviteOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  label: z.string(),
  defaultTeamId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AcceptInviteOrg$Outbound = {
  id: string;
  label: string;
  defaultTeamId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const AcceptInviteOrg$outboundSchema: z.ZodType<
  AcceptInviteOrg$Outbound,
  z.ZodTypeDef,
  AcceptInviteOrg
> = z.object({
  id: z.string(),
  label: z.string(),
  defaultTeamId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteOrg$ {
  /** @deprecated use `AcceptInviteOrg$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteOrg$inboundSchema;
  /** @deprecated use `AcceptInviteOrg$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteOrg$outboundSchema;
  /** @deprecated use `AcceptInviteOrg$Outbound` instead. */
  export type Outbound = AcceptInviteOrg$Outbound;
}

export function acceptInviteOrgToJSON(
  acceptInviteOrg: AcceptInviteOrg,
): string {
  return JSON.stringify(AcceptInviteOrg$outboundSchema.parse(acceptInviteOrg));
}

export function acceptInviteOrgFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteOrg' from JSON`,
  );
}

/** @internal */
export const AcceptInviteOrgRole$inboundSchema: z.ZodType<
  AcceptInviteOrgRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string(),
  principalType: AcceptInviteUserPrincipalType$inboundSchema,
  principalId: z.string(),
  org: z.lazy(() => AcceptInviteOrg$inboundSchema),
});

/** @internal */
export type AcceptInviteOrgRole$Outbound = {
  role: string;
  principalType: string;
  principalId: string;
  org: AcceptInviteOrg$Outbound;
};

/** @internal */
export const AcceptInviteOrgRole$outboundSchema: z.ZodType<
  AcceptInviteOrgRole$Outbound,
  z.ZodTypeDef,
  AcceptInviteOrgRole
> = z.object({
  role: z.string(),
  principalType: AcceptInviteUserPrincipalType$outboundSchema,
  principalId: z.string(),
  org: z.lazy(() => AcceptInviteOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteOrgRole$ {
  /** @deprecated use `AcceptInviteOrgRole$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteOrgRole$inboundSchema;
  /** @deprecated use `AcceptInviteOrgRole$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteOrgRole$outboundSchema;
  /** @deprecated use `AcceptInviteOrgRole$Outbound` instead. */
  export type Outbound = AcceptInviteOrgRole$Outbound;
}

export function acceptInviteOrgRoleToJSON(
  acceptInviteOrgRole: AcceptInviteOrgRole,
): string {
  return JSON.stringify(
    AcceptInviteOrgRole$outboundSchema.parse(acceptInviteOrgRole),
  );
}

export function acceptInviteOrgRoleFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteOrgRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteOrgRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteOrgRole' from JSON`,
  );
}

/** @internal */
export const AcceptInviteResponseBody$inboundSchema: z.ZodType<
  AcceptInviteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  builder: z.lazy(() => AcceptInviteBuilder$inboundSchema),
  projectRoles: z.record(z.lazy(() => AcceptInviteProjectRoles$inboundSchema)),
  orgRole: z.lazy(() => AcceptInviteOrgRole$inboundSchema).optional(),
});

/** @internal */
export type AcceptInviteResponseBody$Outbound = {
  builder: AcceptInviteBuilder$Outbound;
  projectRoles: { [k: string]: AcceptInviteProjectRoles$Outbound };
  orgRole?: AcceptInviteOrgRole$Outbound | undefined;
};

/** @internal */
export const AcceptInviteResponseBody$outboundSchema: z.ZodType<
  AcceptInviteResponseBody$Outbound,
  z.ZodTypeDef,
  AcceptInviteResponseBody
> = z.object({
  builder: z.lazy(() => AcceptInviteBuilder$outboundSchema),
  projectRoles: z.record(z.lazy(() => AcceptInviteProjectRoles$outboundSchema)),
  orgRole: z.lazy(() => AcceptInviteOrgRole$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteResponseBody$ {
  /** @deprecated use `AcceptInviteResponseBody$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteResponseBody$inboundSchema;
  /** @deprecated use `AcceptInviteResponseBody$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteResponseBody$outboundSchema;
  /** @deprecated use `AcceptInviteResponseBody$Outbound` instead. */
  export type Outbound = AcceptInviteResponseBody$Outbound;
}

export function acceptInviteResponseBodyToJSON(
  acceptInviteResponseBody: AcceptInviteResponseBody,
): string {
  return JSON.stringify(
    AcceptInviteResponseBody$outboundSchema.parse(acceptInviteResponseBody),
  );
}

export function acceptInviteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteResponseBody' from JSON`,
  );
}

/** @internal */
export const AcceptInviteResponse$inboundSchema: z.ZodType<
  AcceptInviteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AcceptInviteResponseBody$inboundSchema),
  z.lazy(() => AcceptInviteUserResponseBody$inboundSchema),
]);

/** @internal */
export type AcceptInviteResponse$Outbound =
  | AcceptInviteResponseBody$Outbound
  | AcceptInviteUserResponseBody$Outbound;

/** @internal */
export const AcceptInviteResponse$outboundSchema: z.ZodType<
  AcceptInviteResponse$Outbound,
  z.ZodTypeDef,
  AcceptInviteResponse
> = z.union([
  z.lazy(() => AcceptInviteResponseBody$outboundSchema),
  z.lazy(() => AcceptInviteUserResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptInviteResponse$ {
  /** @deprecated use `AcceptInviteResponse$inboundSchema` instead. */
  export const inboundSchema = AcceptInviteResponse$inboundSchema;
  /** @deprecated use `AcceptInviteResponse$outboundSchema` instead. */
  export const outboundSchema = AcceptInviteResponse$outboundSchema;
  /** @deprecated use `AcceptInviteResponse$Outbound` instead. */
  export type Outbound = AcceptInviteResponse$Outbound;
}

export function acceptInviteResponseToJSON(
  acceptInviteResponse: AcceptInviteResponse,
): string {
  return JSON.stringify(
    AcceptInviteResponse$outboundSchema.parse(acceptInviteResponse),
  );
}

export function acceptInviteResponseFromJSON(
  jsonString: string,
): SafeParseResult<AcceptInviteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptInviteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptInviteResponse' from JSON`,
  );
}
