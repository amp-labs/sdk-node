/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateOrgServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type CreateOrgRequestBody = {
  /**
   * The organization label.
   */
  label: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateOrgOrgResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The newly created org
 */
export type CreateOrgResponseBody = {
  /**
   * The organization ID.
   */
  id: string;
  /**
   * The organization label.
   */
  label: string;
  /**
   * The ID of the Everyone team for the org.
   */
  defaultTeamId: string;
  /**
   * The time the organization was created.
   */
  createTime: Date;
  /**
   * The time the organization was updated.
   */
  updateTime?: Date | undefined;
};

export type CreateOrgResponse =
  | CreateOrgResponseBody
  | CreateOrgOrgResponseBody;

/** @internal */
export const CreateOrgRequestBody$inboundSchema: z.ZodType<
  CreateOrgRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
});

/** @internal */
export type CreateOrgRequestBody$Outbound = {
  label: string;
};

/** @internal */
export const CreateOrgRequestBody$outboundSchema: z.ZodType<
  CreateOrgRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrgRequestBody
> = z.object({
  label: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgRequestBody$ {
  /** @deprecated use `CreateOrgRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrgRequestBody$inboundSchema;
  /** @deprecated use `CreateOrgRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrgRequestBody$outboundSchema;
  /** @deprecated use `CreateOrgRequestBody$Outbound` instead. */
  export type Outbound = CreateOrgRequestBody$Outbound;
}

export function createOrgRequestBodyToJSON(
  createOrgRequestBody: CreateOrgRequestBody,
): string {
  return JSON.stringify(
    CreateOrgRequestBody$outboundSchema.parse(createOrgRequestBody),
  );
}

export function createOrgRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrgOrgResponseBody$inboundSchema: z.ZodType<
  CreateOrgOrgResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateOrgOrgResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateOrgOrgResponseBody$outboundSchema: z.ZodType<
  CreateOrgOrgResponseBody$Outbound,
  z.ZodTypeDef,
  CreateOrgOrgResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgOrgResponseBody$ {
  /** @deprecated use `CreateOrgOrgResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrgOrgResponseBody$inboundSchema;
  /** @deprecated use `CreateOrgOrgResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrgOrgResponseBody$outboundSchema;
  /** @deprecated use `CreateOrgOrgResponseBody$Outbound` instead. */
  export type Outbound = CreateOrgOrgResponseBody$Outbound;
}

export function createOrgOrgResponseBodyToJSON(
  createOrgOrgResponseBody: CreateOrgOrgResponseBody,
): string {
  return JSON.stringify(
    CreateOrgOrgResponseBody$outboundSchema.parse(createOrgOrgResponseBody),
  );
}

export function createOrgOrgResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgOrgResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgOrgResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgOrgResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateOrgResponseBody$inboundSchema: z.ZodType<
  CreateOrgResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  label: z.string(),
  defaultTeamId: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateOrgResponseBody$Outbound = {
  id: string;
  label: string;
  defaultTeamId: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateOrgResponseBody$outboundSchema: z.ZodType<
  CreateOrgResponseBody$Outbound,
  z.ZodTypeDef,
  CreateOrgResponseBody
> = z.object({
  id: z.string(),
  label: z.string(),
  defaultTeamId: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgResponseBody$ {
  /** @deprecated use `CreateOrgResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrgResponseBody$inboundSchema;
  /** @deprecated use `CreateOrgResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrgResponseBody$outboundSchema;
  /** @deprecated use `CreateOrgResponseBody$Outbound` instead. */
  export type Outbound = CreateOrgResponseBody$Outbound;
}

export function createOrgResponseBodyToJSON(
  createOrgResponseBody: CreateOrgResponseBody,
): string {
  return JSON.stringify(
    CreateOrgResponseBody$outboundSchema.parse(createOrgResponseBody),
  );
}

export function createOrgResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateOrgResponse$inboundSchema: z.ZodType<
  CreateOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateOrgResponseBody$inboundSchema),
  z.lazy(() => CreateOrgOrgResponseBody$inboundSchema),
]);

/** @internal */
export type CreateOrgResponse$Outbound =
  | CreateOrgResponseBody$Outbound
  | CreateOrgOrgResponseBody$Outbound;

/** @internal */
export const CreateOrgResponse$outboundSchema: z.ZodType<
  CreateOrgResponse$Outbound,
  z.ZodTypeDef,
  CreateOrgResponse
> = z.union([
  z.lazy(() => CreateOrgResponseBody$outboundSchema),
  z.lazy(() => CreateOrgOrgResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgResponse$ {
  /** @deprecated use `CreateOrgResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrgResponse$inboundSchema;
  /** @deprecated use `CreateOrgResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrgResponse$outboundSchema;
  /** @deprecated use `CreateOrgResponse$Outbound` instead. */
  export type Outbound = CreateOrgResponse$Outbound;
}

export function createOrgResponseToJSON(
  createOrgResponse: CreateOrgResponse,
): string {
  return JSON.stringify(
    CreateOrgResponse$outboundSchema.parse(createOrgResponse),
  );
}

export function createOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgResponse' from JSON`,
  );
}
