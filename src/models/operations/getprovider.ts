/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetProviderServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetProviderRequest = {
  provider: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetProviderProviderResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The type of authentication required by the provider.
 */
export const GetProviderAuthType = {
  Oauth2: "oauth2",
  ApiKey: "apiKey",
  Basic: "basic",
  Jwt: "jwt",
  None: "none",
} as const;
/**
 * The type of authentication required by the provider.
 */
export type GetProviderAuthType = ClosedEnum<typeof GetProviderAuthType>;

export const GetProviderGrantType = {
  AuthorizationCode: "authorizationCode",
  AuthorizationCodePKCE: "authorizationCodePKCE",
  ClientCredentials: "clientCredentials",
  Password: "password",
} as const;
export type GetProviderGrantType = ClosedEnum<typeof GetProviderGrantType>;

/**
 * Fields to be used to extract token metadata from the token response.
 */
export type GetProviderTokenMetadataFields = {
  workspaceRefField?: string | undefined;
  consumerRefField?: string | undefined;
  scopesField?: string | undefined;
};

/**
 * Configuration for OAuth2.0. Must be provided if authType is oauth2.
 */
export type GetProviderOauth2Opts = {
  grantType: GetProviderGrantType;
  /**
   * The authorization URL.
   */
  authURL?: string | undefined;
  /**
   * The token URL.
   */
  tokenURL: string;
  /**
   * Whether scopes are required to be known ahead of the OAuth flow.
   */
  explicitScopesRequired: boolean;
  /**
   * Whether the workspace is required to be known ahead of the OAuth flow.
   */
  explicitWorkspaceRequired: boolean;
  /**
   * A list of URLs that represent the audience for the token, which is needed for some client credential grant flows.
   */
  audience?: Array<string> | undefined;
  /**
   * Fields to be used to extract token metadata from the token response.
   */
  tokenMetadataFields: GetProviderTokenMetadataFields;
  /**
   * URL with more information about where to retrieve Client ID and Client Secret, etc.
   */
  docsURL?: string | undefined;
  authURLParams?: { [k: string]: string } | undefined;
};

/**
 * How the API key should be attached to requests.
 */
export const GetProviderAttachmentType = {
  Query: "query",
  Header: "header",
} as const;
/**
 * How the API key should be attached to requests.
 */
export type GetProviderAttachmentType = ClosedEnum<
  typeof GetProviderAttachmentType
>;

/**
 * Configuration for API key in query parameter. Must be provided if type is in-query.
 */
export type GetProviderQuery = {
  /**
   * The name of the query parameter to be used for the API key.
   */
  name: string;
};

/**
 * Configuration for API key in header. Must be provided if type is in-header.
 */
export type GetProviderHeader = {
  /**
   * The name of the header to be used for the API key.
   */
  name: string;
  /**
   * The prefix to be added to the API key value when it is sent in the header.
   */
  valuePrefix?: string | undefined;
};

/**
 * Configuration for API key. Must be provided if authType is apiKey.
 */
export type GetProviderApiKeyOpts = {
  /**
   * How the API key should be attached to requests.
   */
  attachmentType: GetProviderAttachmentType;
  /**
   * Configuration for API key in query parameter. Must be provided if type is in-query.
   */
  query?: GetProviderQuery | undefined;
  /**
   * Configuration for API key in header. Must be provided if type is in-header.
   */
  header?: GetProviderHeader | undefined;
  /**
   * URL with more information about how to get or use an API key.
   */
  docsURL?: string | undefined;
};

/**
 * whether the API key should be used as the username or password.
 */
export const GetProviderFieldUsed = {
  Username: "username",
  Password: "password",
} as const;
/**
 * whether the API key should be used as the username or password.
 */
export type GetProviderFieldUsed = ClosedEnum<typeof GetProviderFieldUsed>;

/**
 * when this object is present, it means that this provider uses Basic Auth to actually collect an API key
 */
export type GetProviderApiKeyAsBasicOpts = {
  /**
   * whether the API key should be used as the username or password.
   */
  fieldUsed?: GetProviderFieldUsed | undefined;
  /**
   * How to transform the API key in to a basic auth user:pass string. The %s is replaced with the API key value.
   */
  keyFormat?: string | undefined;
};

/**
 * Configuration for Basic Auth. Optional.
 */
export type GetProviderBasicOpts = {
  /**
   * If true, the provider uses an API key which then gets encoded as a basic auth user:pass string.
   */
  apiKeyAsBasic?: boolean | undefined;
  /**
   * when this object is present, it means that this provider uses Basic Auth to actually collect an API key
   */
  apiKeyAsBasicOpts?: GetProviderApiKeyAsBasicOpts | undefined;
  /**
   * URL with more information about how to get or use an API key.
   */
  docsURL?: string | undefined;
};

export type GetProviderBulkWrite = {
  insert: boolean;
  update: boolean;
  upsert: boolean;
  delete: boolean;
};

/**
 * The supported features for the provider.
 */
export type GetProviderSupport = {
  bulkWrite: GetProviderBulkWrite;
  proxy: boolean;
  read: boolean;
  subscribe: boolean;
  write: boolean;
};

/**
 * Media for light/regular mode.
 */
export type GetProviderRegular = {
  /**
   * URL to the icon for the provider.
   */
  iconURL?: string | undefined;
  /**
   * URL to the logo for the provider.
   */
  logoURL?: string | undefined;
};

/**
 * Media to be used in dark mode.
 */
export type GetProviderDarkMode = {
  /**
   * URL to the icon for the provider that is to be used in dark mode.
   */
  iconURL?: string | undefined;
  /**
   * URL to the logo for the provider that is to be used in dark mode.
   */
  logoURL?: string | undefined;
};

export type GetProviderMedia = {
  /**
   * Media for light/regular mode.
   */
  regular?: GetProviderRegular | undefined;
  /**
   * Media to be used in dark mode.
   */
  darkMode?: GetProviderDarkMode | undefined;
};

/**
 * ProviderInfo
 */
export type GetProviderResponseBody = {
  name: string;
  /**
   * The type of authentication required by the provider.
   */
  authType: GetProviderAuthType;
  /**
   * The base URL for making API requests.
   */
  baseURL: string;
  /**
   * Configuration for OAuth2.0. Must be provided if authType is oauth2.
   */
  oauth2Opts?: GetProviderOauth2Opts | undefined;
  /**
   * Configuration for API key. Must be provided if authType is apiKey.
   */
  apiKeyOpts?: GetProviderApiKeyOpts | undefined;
  /**
   * Configuration for Basic Auth. Optional.
   */
  basicOpts?: GetProviderBasicOpts | undefined;
  /**
   * The supported features for the provider.
   */
  support: GetProviderSupport;
  /**
   * Additional provider-specific metadata.
   */
  providerOpts: { [k: string]: string };
  /**
   * The display name of the provider, if omitted, defaults to provider name.
   */
  displayName?: string | undefined;
  /**
   * If true, we require additional information after auth to start making requests.
   */
  postAuthInfoNeeded?: boolean | undefined;
  media?: GetProviderMedia | undefined;
  labels?: { [k: string]: string } | undefined;
};

export type GetProviderResponse =
  | GetProviderResponseBody
  | GetProviderProviderResponseBody;

/** @internal */
export const GetProviderRequest$inboundSchema: z.ZodType<
  GetProviderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
});

/** @internal */
export type GetProviderRequest$Outbound = {
  provider: string;
};

/** @internal */
export const GetProviderRequest$outboundSchema: z.ZodType<
  GetProviderRequest$Outbound,
  z.ZodTypeDef,
  GetProviderRequest
> = z.object({
  provider: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderRequest$ {
  /** @deprecated use `GetProviderRequest$inboundSchema` instead. */
  export const inboundSchema = GetProviderRequest$inboundSchema;
  /** @deprecated use `GetProviderRequest$outboundSchema` instead. */
  export const outboundSchema = GetProviderRequest$outboundSchema;
  /** @deprecated use `GetProviderRequest$Outbound` instead. */
  export type Outbound = GetProviderRequest$Outbound;
}

export function getProviderRequestToJSON(
  getProviderRequest: GetProviderRequest,
): string {
  return JSON.stringify(
    GetProviderRequest$outboundSchema.parse(getProviderRequest),
  );
}

export function getProviderRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderRequest' from JSON`,
  );
}

/** @internal */
export const GetProviderProviderResponseBody$inboundSchema: z.ZodType<
  GetProviderProviderResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetProviderProviderResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetProviderProviderResponseBody$outboundSchema: z.ZodType<
  GetProviderProviderResponseBody$Outbound,
  z.ZodTypeDef,
  GetProviderProviderResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderProviderResponseBody$ {
  /** @deprecated use `GetProviderProviderResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProviderProviderResponseBody$inboundSchema;
  /** @deprecated use `GetProviderProviderResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetProviderProviderResponseBody$outboundSchema;
  /** @deprecated use `GetProviderProviderResponseBody$Outbound` instead. */
  export type Outbound = GetProviderProviderResponseBody$Outbound;
}

export function getProviderProviderResponseBodyToJSON(
  getProviderProviderResponseBody: GetProviderProviderResponseBody,
): string {
  return JSON.stringify(
    GetProviderProviderResponseBody$outboundSchema.parse(
      getProviderProviderResponseBody,
    ),
  );
}

export function getProviderProviderResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderProviderResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderProviderResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderProviderResponseBody' from JSON`,
  );
}

/** @internal */
export const GetProviderAuthType$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderAuthType
> = z.nativeEnum(GetProviderAuthType);

/** @internal */
export const GetProviderAuthType$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderAuthType
> = GetProviderAuthType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAuthType$ {
  /** @deprecated use `GetProviderAuthType$inboundSchema` instead. */
  export const inboundSchema = GetProviderAuthType$inboundSchema;
  /** @deprecated use `GetProviderAuthType$outboundSchema` instead. */
  export const outboundSchema = GetProviderAuthType$outboundSchema;
}

/** @internal */
export const GetProviderGrantType$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderGrantType
> = z.nativeEnum(GetProviderGrantType);

/** @internal */
export const GetProviderGrantType$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderGrantType
> = GetProviderGrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderGrantType$ {
  /** @deprecated use `GetProviderGrantType$inboundSchema` instead. */
  export const inboundSchema = GetProviderGrantType$inboundSchema;
  /** @deprecated use `GetProviderGrantType$outboundSchema` instead. */
  export const outboundSchema = GetProviderGrantType$outboundSchema;
}

/** @internal */
export const GetProviderTokenMetadataFields$inboundSchema: z.ZodType<
  GetProviderTokenMetadataFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspaceRefField: z.string().optional(),
  consumerRefField: z.string().optional(),
  scopesField: z.string().optional(),
});

/** @internal */
export type GetProviderTokenMetadataFields$Outbound = {
  workspaceRefField?: string | undefined;
  consumerRefField?: string | undefined;
  scopesField?: string | undefined;
};

/** @internal */
export const GetProviderTokenMetadataFields$outboundSchema: z.ZodType<
  GetProviderTokenMetadataFields$Outbound,
  z.ZodTypeDef,
  GetProviderTokenMetadataFields
> = z.object({
  workspaceRefField: z.string().optional(),
  consumerRefField: z.string().optional(),
  scopesField: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderTokenMetadataFields$ {
  /** @deprecated use `GetProviderTokenMetadataFields$inboundSchema` instead. */
  export const inboundSchema = GetProviderTokenMetadataFields$inboundSchema;
  /** @deprecated use `GetProviderTokenMetadataFields$outboundSchema` instead. */
  export const outboundSchema = GetProviderTokenMetadataFields$outboundSchema;
  /** @deprecated use `GetProviderTokenMetadataFields$Outbound` instead. */
  export type Outbound = GetProviderTokenMetadataFields$Outbound;
}

export function getProviderTokenMetadataFieldsToJSON(
  getProviderTokenMetadataFields: GetProviderTokenMetadataFields,
): string {
  return JSON.stringify(
    GetProviderTokenMetadataFields$outboundSchema.parse(
      getProviderTokenMetadataFields,
    ),
  );
}

export function getProviderTokenMetadataFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderTokenMetadataFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderTokenMetadataFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderTokenMetadataFields' from JSON`,
  );
}

/** @internal */
export const GetProviderOauth2Opts$inboundSchema: z.ZodType<
  GetProviderOauth2Opts,
  z.ZodTypeDef,
  unknown
> = z.object({
  grantType: GetProviderGrantType$inboundSchema,
  authURL: z.string().optional(),
  tokenURL: z.string(),
  explicitScopesRequired: z.boolean(),
  explicitWorkspaceRequired: z.boolean(),
  audience: z.array(z.string()).optional(),
  tokenMetadataFields: z.lazy(() =>
    GetProviderTokenMetadataFields$inboundSchema
  ),
  docsURL: z.string().optional(),
  authURLParams: z.record(z.string()).optional(),
});

/** @internal */
export type GetProviderOauth2Opts$Outbound = {
  grantType: string;
  authURL?: string | undefined;
  tokenURL: string;
  explicitScopesRequired: boolean;
  explicitWorkspaceRequired: boolean;
  audience?: Array<string> | undefined;
  tokenMetadataFields: GetProviderTokenMetadataFields$Outbound;
  docsURL?: string | undefined;
  authURLParams?: { [k: string]: string } | undefined;
};

/** @internal */
export const GetProviderOauth2Opts$outboundSchema: z.ZodType<
  GetProviderOauth2Opts$Outbound,
  z.ZodTypeDef,
  GetProviderOauth2Opts
> = z.object({
  grantType: GetProviderGrantType$outboundSchema,
  authURL: z.string().optional(),
  tokenURL: z.string(),
  explicitScopesRequired: z.boolean(),
  explicitWorkspaceRequired: z.boolean(),
  audience: z.array(z.string()).optional(),
  tokenMetadataFields: z.lazy(() =>
    GetProviderTokenMetadataFields$outboundSchema
  ),
  docsURL: z.string().optional(),
  authURLParams: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderOauth2Opts$ {
  /** @deprecated use `GetProviderOauth2Opts$inboundSchema` instead. */
  export const inboundSchema = GetProviderOauth2Opts$inboundSchema;
  /** @deprecated use `GetProviderOauth2Opts$outboundSchema` instead. */
  export const outboundSchema = GetProviderOauth2Opts$outboundSchema;
  /** @deprecated use `GetProviderOauth2Opts$Outbound` instead. */
  export type Outbound = GetProviderOauth2Opts$Outbound;
}

export function getProviderOauth2OptsToJSON(
  getProviderOauth2Opts: GetProviderOauth2Opts,
): string {
  return JSON.stringify(
    GetProviderOauth2Opts$outboundSchema.parse(getProviderOauth2Opts),
  );
}

export function getProviderOauth2OptsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderOauth2Opts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderOauth2Opts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderOauth2Opts' from JSON`,
  );
}

/** @internal */
export const GetProviderAttachmentType$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderAttachmentType
> = z.nativeEnum(GetProviderAttachmentType);

/** @internal */
export const GetProviderAttachmentType$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderAttachmentType
> = GetProviderAttachmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderAttachmentType$ {
  /** @deprecated use `GetProviderAttachmentType$inboundSchema` instead. */
  export const inboundSchema = GetProviderAttachmentType$inboundSchema;
  /** @deprecated use `GetProviderAttachmentType$outboundSchema` instead. */
  export const outboundSchema = GetProviderAttachmentType$outboundSchema;
}

/** @internal */
export const GetProviderQuery$inboundSchema: z.ZodType<
  GetProviderQuery,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type GetProviderQuery$Outbound = {
  name: string;
};

/** @internal */
export const GetProviderQuery$outboundSchema: z.ZodType<
  GetProviderQuery$Outbound,
  z.ZodTypeDef,
  GetProviderQuery
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderQuery$ {
  /** @deprecated use `GetProviderQuery$inboundSchema` instead. */
  export const inboundSchema = GetProviderQuery$inboundSchema;
  /** @deprecated use `GetProviderQuery$outboundSchema` instead. */
  export const outboundSchema = GetProviderQuery$outboundSchema;
  /** @deprecated use `GetProviderQuery$Outbound` instead. */
  export type Outbound = GetProviderQuery$Outbound;
}

export function getProviderQueryToJSON(
  getProviderQuery: GetProviderQuery,
): string {
  return JSON.stringify(
    GetProviderQuery$outboundSchema.parse(getProviderQuery),
  );
}

export function getProviderQueryFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderQuery' from JSON`,
  );
}

/** @internal */
export const GetProviderHeader$inboundSchema: z.ZodType<
  GetProviderHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  valuePrefix: z.string().optional(),
});

/** @internal */
export type GetProviderHeader$Outbound = {
  name: string;
  valuePrefix?: string | undefined;
};

/** @internal */
export const GetProviderHeader$outboundSchema: z.ZodType<
  GetProviderHeader$Outbound,
  z.ZodTypeDef,
  GetProviderHeader
> = z.object({
  name: z.string(),
  valuePrefix: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderHeader$ {
  /** @deprecated use `GetProviderHeader$inboundSchema` instead. */
  export const inboundSchema = GetProviderHeader$inboundSchema;
  /** @deprecated use `GetProviderHeader$outboundSchema` instead. */
  export const outboundSchema = GetProviderHeader$outboundSchema;
  /** @deprecated use `GetProviderHeader$Outbound` instead. */
  export type Outbound = GetProviderHeader$Outbound;
}

export function getProviderHeaderToJSON(
  getProviderHeader: GetProviderHeader,
): string {
  return JSON.stringify(
    GetProviderHeader$outboundSchema.parse(getProviderHeader),
  );
}

export function getProviderHeaderFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderHeader' from JSON`,
  );
}

/** @internal */
export const GetProviderApiKeyOpts$inboundSchema: z.ZodType<
  GetProviderApiKeyOpts,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachmentType: GetProviderAttachmentType$inboundSchema,
  query: z.lazy(() => GetProviderQuery$inboundSchema).optional(),
  header: z.lazy(() => GetProviderHeader$inboundSchema).optional(),
  docsURL: z.string().optional(),
});

/** @internal */
export type GetProviderApiKeyOpts$Outbound = {
  attachmentType: string;
  query?: GetProviderQuery$Outbound | undefined;
  header?: GetProviderHeader$Outbound | undefined;
  docsURL?: string | undefined;
};

/** @internal */
export const GetProviderApiKeyOpts$outboundSchema: z.ZodType<
  GetProviderApiKeyOpts$Outbound,
  z.ZodTypeDef,
  GetProviderApiKeyOpts
> = z.object({
  attachmentType: GetProviderAttachmentType$outboundSchema,
  query: z.lazy(() => GetProviderQuery$outboundSchema).optional(),
  header: z.lazy(() => GetProviderHeader$outboundSchema).optional(),
  docsURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderApiKeyOpts$ {
  /** @deprecated use `GetProviderApiKeyOpts$inboundSchema` instead. */
  export const inboundSchema = GetProviderApiKeyOpts$inboundSchema;
  /** @deprecated use `GetProviderApiKeyOpts$outboundSchema` instead. */
  export const outboundSchema = GetProviderApiKeyOpts$outboundSchema;
  /** @deprecated use `GetProviderApiKeyOpts$Outbound` instead. */
  export type Outbound = GetProviderApiKeyOpts$Outbound;
}

export function getProviderApiKeyOptsToJSON(
  getProviderApiKeyOpts: GetProviderApiKeyOpts,
): string {
  return JSON.stringify(
    GetProviderApiKeyOpts$outboundSchema.parse(getProviderApiKeyOpts),
  );
}

export function getProviderApiKeyOptsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderApiKeyOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderApiKeyOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderApiKeyOpts' from JSON`,
  );
}

/** @internal */
export const GetProviderFieldUsed$inboundSchema: z.ZodNativeEnum<
  typeof GetProviderFieldUsed
> = z.nativeEnum(GetProviderFieldUsed);

/** @internal */
export const GetProviderFieldUsed$outboundSchema: z.ZodNativeEnum<
  typeof GetProviderFieldUsed
> = GetProviderFieldUsed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderFieldUsed$ {
  /** @deprecated use `GetProviderFieldUsed$inboundSchema` instead. */
  export const inboundSchema = GetProviderFieldUsed$inboundSchema;
  /** @deprecated use `GetProviderFieldUsed$outboundSchema` instead. */
  export const outboundSchema = GetProviderFieldUsed$outboundSchema;
}

/** @internal */
export const GetProviderApiKeyAsBasicOpts$inboundSchema: z.ZodType<
  GetProviderApiKeyAsBasicOpts,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldUsed: GetProviderFieldUsed$inboundSchema.optional(),
  keyFormat: z.string().optional(),
});

/** @internal */
export type GetProviderApiKeyAsBasicOpts$Outbound = {
  fieldUsed?: string | undefined;
  keyFormat?: string | undefined;
};

/** @internal */
export const GetProviderApiKeyAsBasicOpts$outboundSchema: z.ZodType<
  GetProviderApiKeyAsBasicOpts$Outbound,
  z.ZodTypeDef,
  GetProviderApiKeyAsBasicOpts
> = z.object({
  fieldUsed: GetProviderFieldUsed$outboundSchema.optional(),
  keyFormat: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderApiKeyAsBasicOpts$ {
  /** @deprecated use `GetProviderApiKeyAsBasicOpts$inboundSchema` instead. */
  export const inboundSchema = GetProviderApiKeyAsBasicOpts$inboundSchema;
  /** @deprecated use `GetProviderApiKeyAsBasicOpts$outboundSchema` instead. */
  export const outboundSchema = GetProviderApiKeyAsBasicOpts$outboundSchema;
  /** @deprecated use `GetProviderApiKeyAsBasicOpts$Outbound` instead. */
  export type Outbound = GetProviderApiKeyAsBasicOpts$Outbound;
}

export function getProviderApiKeyAsBasicOptsToJSON(
  getProviderApiKeyAsBasicOpts: GetProviderApiKeyAsBasicOpts,
): string {
  return JSON.stringify(
    GetProviderApiKeyAsBasicOpts$outboundSchema.parse(
      getProviderApiKeyAsBasicOpts,
    ),
  );
}

export function getProviderApiKeyAsBasicOptsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderApiKeyAsBasicOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderApiKeyAsBasicOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderApiKeyAsBasicOpts' from JSON`,
  );
}

/** @internal */
export const GetProviderBasicOpts$inboundSchema: z.ZodType<
  GetProviderBasicOpts,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKeyAsBasic: z.boolean().optional(),
  apiKeyAsBasicOpts: z.lazy(() => GetProviderApiKeyAsBasicOpts$inboundSchema)
    .optional(),
  docsURL: z.string().optional(),
});

/** @internal */
export type GetProviderBasicOpts$Outbound = {
  apiKeyAsBasic?: boolean | undefined;
  apiKeyAsBasicOpts?: GetProviderApiKeyAsBasicOpts$Outbound | undefined;
  docsURL?: string | undefined;
};

/** @internal */
export const GetProviderBasicOpts$outboundSchema: z.ZodType<
  GetProviderBasicOpts$Outbound,
  z.ZodTypeDef,
  GetProviderBasicOpts
> = z.object({
  apiKeyAsBasic: z.boolean().optional(),
  apiKeyAsBasicOpts: z.lazy(() => GetProviderApiKeyAsBasicOpts$outboundSchema)
    .optional(),
  docsURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderBasicOpts$ {
  /** @deprecated use `GetProviderBasicOpts$inboundSchema` instead. */
  export const inboundSchema = GetProviderBasicOpts$inboundSchema;
  /** @deprecated use `GetProviderBasicOpts$outboundSchema` instead. */
  export const outboundSchema = GetProviderBasicOpts$outboundSchema;
  /** @deprecated use `GetProviderBasicOpts$Outbound` instead. */
  export type Outbound = GetProviderBasicOpts$Outbound;
}

export function getProviderBasicOptsToJSON(
  getProviderBasicOpts: GetProviderBasicOpts,
): string {
  return JSON.stringify(
    GetProviderBasicOpts$outboundSchema.parse(getProviderBasicOpts),
  );
}

export function getProviderBasicOptsFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderBasicOpts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderBasicOpts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderBasicOpts' from JSON`,
  );
}

/** @internal */
export const GetProviderBulkWrite$inboundSchema: z.ZodType<
  GetProviderBulkWrite,
  z.ZodTypeDef,
  unknown
> = z.object({
  insert: z.boolean(),
  update: z.boolean(),
  upsert: z.boolean(),
  delete: z.boolean(),
});

/** @internal */
export type GetProviderBulkWrite$Outbound = {
  insert: boolean;
  update: boolean;
  upsert: boolean;
  delete: boolean;
};

/** @internal */
export const GetProviderBulkWrite$outboundSchema: z.ZodType<
  GetProviderBulkWrite$Outbound,
  z.ZodTypeDef,
  GetProviderBulkWrite
> = z.object({
  insert: z.boolean(),
  update: z.boolean(),
  upsert: z.boolean(),
  delete: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderBulkWrite$ {
  /** @deprecated use `GetProviderBulkWrite$inboundSchema` instead. */
  export const inboundSchema = GetProviderBulkWrite$inboundSchema;
  /** @deprecated use `GetProviderBulkWrite$outboundSchema` instead. */
  export const outboundSchema = GetProviderBulkWrite$outboundSchema;
  /** @deprecated use `GetProviderBulkWrite$Outbound` instead. */
  export type Outbound = GetProviderBulkWrite$Outbound;
}

export function getProviderBulkWriteToJSON(
  getProviderBulkWrite: GetProviderBulkWrite,
): string {
  return JSON.stringify(
    GetProviderBulkWrite$outboundSchema.parse(getProviderBulkWrite),
  );
}

export function getProviderBulkWriteFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderBulkWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderBulkWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderBulkWrite' from JSON`,
  );
}

/** @internal */
export const GetProviderSupport$inboundSchema: z.ZodType<
  GetProviderSupport,
  z.ZodTypeDef,
  unknown
> = z.object({
  bulkWrite: z.lazy(() => GetProviderBulkWrite$inboundSchema),
  proxy: z.boolean(),
  read: z.boolean(),
  subscribe: z.boolean(),
  write: z.boolean(),
});

/** @internal */
export type GetProviderSupport$Outbound = {
  bulkWrite: GetProviderBulkWrite$Outbound;
  proxy: boolean;
  read: boolean;
  subscribe: boolean;
  write: boolean;
};

/** @internal */
export const GetProviderSupport$outboundSchema: z.ZodType<
  GetProviderSupport$Outbound,
  z.ZodTypeDef,
  GetProviderSupport
> = z.object({
  bulkWrite: z.lazy(() => GetProviderBulkWrite$outboundSchema),
  proxy: z.boolean(),
  read: z.boolean(),
  subscribe: z.boolean(),
  write: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderSupport$ {
  /** @deprecated use `GetProviderSupport$inboundSchema` instead. */
  export const inboundSchema = GetProviderSupport$inboundSchema;
  /** @deprecated use `GetProviderSupport$outboundSchema` instead. */
  export const outboundSchema = GetProviderSupport$outboundSchema;
  /** @deprecated use `GetProviderSupport$Outbound` instead. */
  export type Outbound = GetProviderSupport$Outbound;
}

export function getProviderSupportToJSON(
  getProviderSupport: GetProviderSupport,
): string {
  return JSON.stringify(
    GetProviderSupport$outboundSchema.parse(getProviderSupport),
  );
}

export function getProviderSupportFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderSupport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderSupport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderSupport' from JSON`,
  );
}

/** @internal */
export const GetProviderRegular$inboundSchema: z.ZodType<
  GetProviderRegular,
  z.ZodTypeDef,
  unknown
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/** @internal */
export type GetProviderRegular$Outbound = {
  iconURL?: string | undefined;
  logoURL?: string | undefined;
};

/** @internal */
export const GetProviderRegular$outboundSchema: z.ZodType<
  GetProviderRegular$Outbound,
  z.ZodTypeDef,
  GetProviderRegular
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderRegular$ {
  /** @deprecated use `GetProviderRegular$inboundSchema` instead. */
  export const inboundSchema = GetProviderRegular$inboundSchema;
  /** @deprecated use `GetProviderRegular$outboundSchema` instead. */
  export const outboundSchema = GetProviderRegular$outboundSchema;
  /** @deprecated use `GetProviderRegular$Outbound` instead. */
  export type Outbound = GetProviderRegular$Outbound;
}

export function getProviderRegularToJSON(
  getProviderRegular: GetProviderRegular,
): string {
  return JSON.stringify(
    GetProviderRegular$outboundSchema.parse(getProviderRegular),
  );
}

export function getProviderRegularFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderRegular, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderRegular$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderRegular' from JSON`,
  );
}

/** @internal */
export const GetProviderDarkMode$inboundSchema: z.ZodType<
  GetProviderDarkMode,
  z.ZodTypeDef,
  unknown
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/** @internal */
export type GetProviderDarkMode$Outbound = {
  iconURL?: string | undefined;
  logoURL?: string | undefined;
};

/** @internal */
export const GetProviderDarkMode$outboundSchema: z.ZodType<
  GetProviderDarkMode$Outbound,
  z.ZodTypeDef,
  GetProviderDarkMode
> = z.object({
  iconURL: z.string().optional(),
  logoURL: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderDarkMode$ {
  /** @deprecated use `GetProviderDarkMode$inboundSchema` instead. */
  export const inboundSchema = GetProviderDarkMode$inboundSchema;
  /** @deprecated use `GetProviderDarkMode$outboundSchema` instead. */
  export const outboundSchema = GetProviderDarkMode$outboundSchema;
  /** @deprecated use `GetProviderDarkMode$Outbound` instead. */
  export type Outbound = GetProviderDarkMode$Outbound;
}

export function getProviderDarkModeToJSON(
  getProviderDarkMode: GetProviderDarkMode,
): string {
  return JSON.stringify(
    GetProviderDarkMode$outboundSchema.parse(getProviderDarkMode),
  );
}

export function getProviderDarkModeFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderDarkMode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderDarkMode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderDarkMode' from JSON`,
  );
}

/** @internal */
export const GetProviderMedia$inboundSchema: z.ZodType<
  GetProviderMedia,
  z.ZodTypeDef,
  unknown
> = z.object({
  regular: z.lazy(() => GetProviderRegular$inboundSchema).optional(),
  darkMode: z.lazy(() => GetProviderDarkMode$inboundSchema).optional(),
});

/** @internal */
export type GetProviderMedia$Outbound = {
  regular?: GetProviderRegular$Outbound | undefined;
  darkMode?: GetProviderDarkMode$Outbound | undefined;
};

/** @internal */
export const GetProviderMedia$outboundSchema: z.ZodType<
  GetProviderMedia$Outbound,
  z.ZodTypeDef,
  GetProviderMedia
> = z.object({
  regular: z.lazy(() => GetProviderRegular$outboundSchema).optional(),
  darkMode: z.lazy(() => GetProviderDarkMode$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderMedia$ {
  /** @deprecated use `GetProviderMedia$inboundSchema` instead. */
  export const inboundSchema = GetProviderMedia$inboundSchema;
  /** @deprecated use `GetProviderMedia$outboundSchema` instead. */
  export const outboundSchema = GetProviderMedia$outboundSchema;
  /** @deprecated use `GetProviderMedia$Outbound` instead. */
  export type Outbound = GetProviderMedia$Outbound;
}

export function getProviderMediaToJSON(
  getProviderMedia: GetProviderMedia,
): string {
  return JSON.stringify(
    GetProviderMedia$outboundSchema.parse(getProviderMedia),
  );
}

export function getProviderMediaFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderMedia' from JSON`,
  );
}

/** @internal */
export const GetProviderResponseBody$inboundSchema: z.ZodType<
  GetProviderResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  authType: GetProviderAuthType$inboundSchema,
  baseURL: z.string(),
  oauth2Opts: z.lazy(() => GetProviderOauth2Opts$inboundSchema).optional(),
  apiKeyOpts: z.lazy(() => GetProviderApiKeyOpts$inboundSchema).optional(),
  basicOpts: z.lazy(() => GetProviderBasicOpts$inboundSchema).optional(),
  support: z.lazy(() => GetProviderSupport$inboundSchema),
  providerOpts: z.record(z.string()),
  displayName: z.string().optional(),
  postAuthInfoNeeded: z.boolean().optional(),
  media: z.lazy(() => GetProviderMedia$inboundSchema).optional(),
  labels: z.record(z.string()).optional(),
});

/** @internal */
export type GetProviderResponseBody$Outbound = {
  name: string;
  authType: string;
  baseURL: string;
  oauth2Opts?: GetProviderOauth2Opts$Outbound | undefined;
  apiKeyOpts?: GetProviderApiKeyOpts$Outbound | undefined;
  basicOpts?: GetProviderBasicOpts$Outbound | undefined;
  support: GetProviderSupport$Outbound;
  providerOpts: { [k: string]: string };
  displayName?: string | undefined;
  postAuthInfoNeeded?: boolean | undefined;
  media?: GetProviderMedia$Outbound | undefined;
  labels?: { [k: string]: string } | undefined;
};

/** @internal */
export const GetProviderResponseBody$outboundSchema: z.ZodType<
  GetProviderResponseBody$Outbound,
  z.ZodTypeDef,
  GetProviderResponseBody
> = z.object({
  name: z.string(),
  authType: GetProviderAuthType$outboundSchema,
  baseURL: z.string(),
  oauth2Opts: z.lazy(() => GetProviderOauth2Opts$outboundSchema).optional(),
  apiKeyOpts: z.lazy(() => GetProviderApiKeyOpts$outboundSchema).optional(),
  basicOpts: z.lazy(() => GetProviderBasicOpts$outboundSchema).optional(),
  support: z.lazy(() => GetProviderSupport$outboundSchema),
  providerOpts: z.record(z.string()),
  displayName: z.string().optional(),
  postAuthInfoNeeded: z.boolean().optional(),
  media: z.lazy(() => GetProviderMedia$outboundSchema).optional(),
  labels: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderResponseBody$ {
  /** @deprecated use `GetProviderResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProviderResponseBody$inboundSchema;
  /** @deprecated use `GetProviderResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetProviderResponseBody$outboundSchema;
  /** @deprecated use `GetProviderResponseBody$Outbound` instead. */
  export type Outbound = GetProviderResponseBody$Outbound;
}

export function getProviderResponseBodyToJSON(
  getProviderResponseBody: GetProviderResponseBody,
): string {
  return JSON.stringify(
    GetProviderResponseBody$outboundSchema.parse(getProviderResponseBody),
  );
}

export function getProviderResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderResponseBody' from JSON`,
  );
}

/** @internal */
export const GetProviderResponse$inboundSchema: z.ZodType<
  GetProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetProviderResponseBody$inboundSchema),
  z.lazy(() => GetProviderProviderResponseBody$inboundSchema),
]);

/** @internal */
export type GetProviderResponse$Outbound =
  | GetProviderResponseBody$Outbound
  | GetProviderProviderResponseBody$Outbound;

/** @internal */
export const GetProviderResponse$outboundSchema: z.ZodType<
  GetProviderResponse$Outbound,
  z.ZodTypeDef,
  GetProviderResponse
> = z.union([
  z.lazy(() => GetProviderResponseBody$outboundSchema),
  z.lazy(() => GetProviderProviderResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProviderResponse$ {
  /** @deprecated use `GetProviderResponse$inboundSchema` instead. */
  export const inboundSchema = GetProviderResponse$inboundSchema;
  /** @deprecated use `GetProviderResponse$outboundSchema` instead. */
  export const outboundSchema = GetProviderResponse$outboundSchema;
  /** @deprecated use `GetProviderResponse$Outbound` instead. */
  export type Outbound = GetProviderResponse$Outbound;
}

export function getProviderResponseToJSON(
  getProviderResponse: GetProviderResponse,
): string {
  return JSON.stringify(
    GetProviderResponse$outboundSchema.parse(getProviderResponse),
  );
}

export function getProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProviderResponse' from JSON`,
  );
}
