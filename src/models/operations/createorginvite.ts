/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateOrgInviteServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type CreateOrgInviteRequestBody = {
  /**
   * The email address of the user to invite.
   */
  email: string;
};

export type CreateOrgInviteRequest = {
  orgId: string;
  requestBody?: CreateOrgInviteRequestBody | undefined;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateOrgInviteOrgResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * The type of entity that the person is invited to.
 */
export const ParentType = {
  Org: "org",
} as const;
/**
 * The type of entity that the person is invited to.
 */
export type ParentType = ClosedEnum<typeof ParentType>;

/**
 * The status of the invite.
 */
export const CreateOrgInviteStatus = {
  Pending: "pending",
  Accepted: "accepted",
  Revoked: "revoked",
  Expired: "expired",
} as const;
/**
 * The status of the invite.
 */
export type CreateOrgInviteStatus = ClosedEnum<typeof CreateOrgInviteStatus>;

/**
 * The newly created invite
 */
export type CreateOrgInviteResponseBody = {
  /**
   * The invite ID.
   */
  id: string;
  /**
   * The email address of the person invited.
   */
  invitedEmail: string;
  /**
   * The type of entity that the person is invited to.
   */
  parentType: ParentType;
  /**
   * The ID of the parent (e.g. org ID).
   */
  parentId: string;
  /**
   * The status of the invite.
   */
  status: CreateOrgInviteStatus;
  /**
   * The time the invite was created.
   */
  createTime: Date;
  /**
   * The time the invite was updated.
   */
  updateTime?: Date | undefined;
};

export type CreateOrgInviteResponse =
  | CreateOrgInviteResponseBody
  | CreateOrgInviteOrgResponseBody;

/** @internal */
export const CreateOrgInviteRequestBody$inboundSchema: z.ZodType<
  CreateOrgInviteRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
});

/** @internal */
export type CreateOrgInviteRequestBody$Outbound = {
  email: string;
};

/** @internal */
export const CreateOrgInviteRequestBody$outboundSchema: z.ZodType<
  CreateOrgInviteRequestBody$Outbound,
  z.ZodTypeDef,
  CreateOrgInviteRequestBody
> = z.object({
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgInviteRequestBody$ {
  /** @deprecated use `CreateOrgInviteRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrgInviteRequestBody$inboundSchema;
  /** @deprecated use `CreateOrgInviteRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrgInviteRequestBody$outboundSchema;
  /** @deprecated use `CreateOrgInviteRequestBody$Outbound` instead. */
  export type Outbound = CreateOrgInviteRequestBody$Outbound;
}

export function createOrgInviteRequestBodyToJSON(
  createOrgInviteRequestBody: CreateOrgInviteRequestBody,
): string {
  return JSON.stringify(
    CreateOrgInviteRequestBody$outboundSchema.parse(createOrgInviteRequestBody),
  );
}

export function createOrgInviteRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgInviteRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgInviteRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgInviteRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateOrgInviteRequest$inboundSchema: z.ZodType<
  CreateOrgInviteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string(),
  RequestBody: z.lazy(() => CreateOrgInviteRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateOrgInviteRequest$Outbound = {
  orgId: string;
  RequestBody?: CreateOrgInviteRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateOrgInviteRequest$outboundSchema: z.ZodType<
  CreateOrgInviteRequest$Outbound,
  z.ZodTypeDef,
  CreateOrgInviteRequest
> = z.object({
  orgId: z.string(),
  requestBody: z.lazy(() => CreateOrgInviteRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgInviteRequest$ {
  /** @deprecated use `CreateOrgInviteRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrgInviteRequest$inboundSchema;
  /** @deprecated use `CreateOrgInviteRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrgInviteRequest$outboundSchema;
  /** @deprecated use `CreateOrgInviteRequest$Outbound` instead. */
  export type Outbound = CreateOrgInviteRequest$Outbound;
}

export function createOrgInviteRequestToJSON(
  createOrgInviteRequest: CreateOrgInviteRequest,
): string {
  return JSON.stringify(
    CreateOrgInviteRequest$outboundSchema.parse(createOrgInviteRequest),
  );
}

export function createOrgInviteRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgInviteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgInviteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgInviteRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrgInviteOrgResponseBody$inboundSchema: z.ZodType<
  CreateOrgInviteOrgResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateOrgInviteOrgResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateOrgInviteOrgResponseBody$outboundSchema: z.ZodType<
  CreateOrgInviteOrgResponseBody$Outbound,
  z.ZodTypeDef,
  CreateOrgInviteOrgResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgInviteOrgResponseBody$ {
  /** @deprecated use `CreateOrgInviteOrgResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrgInviteOrgResponseBody$inboundSchema;
  /** @deprecated use `CreateOrgInviteOrgResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrgInviteOrgResponseBody$outboundSchema;
  /** @deprecated use `CreateOrgInviteOrgResponseBody$Outbound` instead. */
  export type Outbound = CreateOrgInviteOrgResponseBody$Outbound;
}

export function createOrgInviteOrgResponseBodyToJSON(
  createOrgInviteOrgResponseBody: CreateOrgInviteOrgResponseBody,
): string {
  return JSON.stringify(
    CreateOrgInviteOrgResponseBody$outboundSchema.parse(
      createOrgInviteOrgResponseBody,
    ),
  );
}

export function createOrgInviteOrgResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgInviteOrgResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgInviteOrgResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgInviteOrgResponseBody' from JSON`,
  );
}

/** @internal */
export const ParentType$inboundSchema: z.ZodNativeEnum<typeof ParentType> = z
  .nativeEnum(ParentType);

/** @internal */
export const ParentType$outboundSchema: z.ZodNativeEnum<typeof ParentType> =
  ParentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParentType$ {
  /** @deprecated use `ParentType$inboundSchema` instead. */
  export const inboundSchema = ParentType$inboundSchema;
  /** @deprecated use `ParentType$outboundSchema` instead. */
  export const outboundSchema = ParentType$outboundSchema;
}

/** @internal */
export const CreateOrgInviteStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateOrgInviteStatus
> = z.nativeEnum(CreateOrgInviteStatus);

/** @internal */
export const CreateOrgInviteStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateOrgInviteStatus
> = CreateOrgInviteStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgInviteStatus$ {
  /** @deprecated use `CreateOrgInviteStatus$inboundSchema` instead. */
  export const inboundSchema = CreateOrgInviteStatus$inboundSchema;
  /** @deprecated use `CreateOrgInviteStatus$outboundSchema` instead. */
  export const outboundSchema = CreateOrgInviteStatus$outboundSchema;
}

/** @internal */
export const CreateOrgInviteResponseBody$inboundSchema: z.ZodType<
  CreateOrgInviteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  invitedEmail: z.string(),
  parentType: ParentType$inboundSchema,
  parentId: z.string(),
  status: CreateOrgInviteStatus$inboundSchema,
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateOrgInviteResponseBody$Outbound = {
  id: string;
  invitedEmail: string;
  parentType: string;
  parentId: string;
  status: string;
  createTime: string;
  updateTime?: string | undefined;
};

/** @internal */
export const CreateOrgInviteResponseBody$outboundSchema: z.ZodType<
  CreateOrgInviteResponseBody$Outbound,
  z.ZodTypeDef,
  CreateOrgInviteResponseBody
> = z.object({
  id: z.string(),
  invitedEmail: z.string(),
  parentType: ParentType$outboundSchema,
  parentId: z.string(),
  status: CreateOrgInviteStatus$outboundSchema,
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgInviteResponseBody$ {
  /** @deprecated use `CreateOrgInviteResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateOrgInviteResponseBody$inboundSchema;
  /** @deprecated use `CreateOrgInviteResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateOrgInviteResponseBody$outboundSchema;
  /** @deprecated use `CreateOrgInviteResponseBody$Outbound` instead. */
  export type Outbound = CreateOrgInviteResponseBody$Outbound;
}

export function createOrgInviteResponseBodyToJSON(
  createOrgInviteResponseBody: CreateOrgInviteResponseBody,
): string {
  return JSON.stringify(
    CreateOrgInviteResponseBody$outboundSchema.parse(
      createOrgInviteResponseBody,
    ),
  );
}

export function createOrgInviteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgInviteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgInviteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgInviteResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateOrgInviteResponse$inboundSchema: z.ZodType<
  CreateOrgInviteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateOrgInviteResponseBody$inboundSchema),
  z.lazy(() => CreateOrgInviteOrgResponseBody$inboundSchema),
]);

/** @internal */
export type CreateOrgInviteResponse$Outbound =
  | CreateOrgInviteResponseBody$Outbound
  | CreateOrgInviteOrgResponseBody$Outbound;

/** @internal */
export const CreateOrgInviteResponse$outboundSchema: z.ZodType<
  CreateOrgInviteResponse$Outbound,
  z.ZodTypeDef,
  CreateOrgInviteResponse
> = z.union([
  z.lazy(() => CreateOrgInviteResponseBody$outboundSchema),
  z.lazy(() => CreateOrgInviteOrgResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgInviteResponse$ {
  /** @deprecated use `CreateOrgInviteResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrgInviteResponse$inboundSchema;
  /** @deprecated use `CreateOrgInviteResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrgInviteResponse$outboundSchema;
  /** @deprecated use `CreateOrgInviteResponse$Outbound` instead. */
  export type Outbound = CreateOrgInviteResponse$Outbound;
}

export function createOrgInviteResponseToJSON(
  createOrgInviteResponse: CreateOrgInviteResponse,
): string {
  return JSON.stringify(
    CreateOrgInviteResponse$outboundSchema.parse(createOrgInviteResponse),
  );
}

export function createOrgInviteResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgInviteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgInviteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgInviteResponse' from JSON`,
  );
}
