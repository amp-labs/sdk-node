/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateApiKeyServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type CreateApiKeyRequestBody = {
  /**
   * A short name for the API key.
   */
  label: string;
  /**
   * The scopes for the API key.
   */
  scopes?: Array<string> | undefined;
};

export type CreateApiKeyRequest = {
  projectIdOrName: string;
  requestBody: CreateApiKeyRequestBody;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type CreateAPIKeyAPIKeyResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

/**
 * Created
 */
export type CreateApiKeyResponseBody = {
  /**
   * The API key.
   */
  key: string;
  /**
   * A short name for the API key.
   */
  label: string;
  /**
   * The scopes for the API key.
   */
  scopes: Array<string>;
  /**
   * The project ID.
   */
  projectId: string;
  /**
   * Whether the API key is active.
   */
  active?: boolean | undefined;
};

export type CreateApiKeyResponse =
  | CreateApiKeyResponseBody
  | CreateAPIKeyAPIKeyResponseBody;

/** @internal */
export const CreateApiKeyRequestBody$inboundSchema: z.ZodType<
  CreateApiKeyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type CreateApiKeyRequestBody$Outbound = {
  label: string;
  scopes?: Array<string> | undefined;
};

/** @internal */
export const CreateApiKeyRequestBody$outboundSchema: z.ZodType<
  CreateApiKeyRequestBody$Outbound,
  z.ZodTypeDef,
  CreateApiKeyRequestBody
> = z.object({
  label: z.string(),
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyRequestBody$ {
  /** @deprecated use `CreateApiKeyRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyRequestBody$inboundSchema;
  /** @deprecated use `CreateApiKeyRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyRequestBody$outboundSchema;
  /** @deprecated use `CreateApiKeyRequestBody$Outbound` instead. */
  export type Outbound = CreateApiKeyRequestBody$Outbound;
}

export function createApiKeyRequestBodyToJSON(
  createApiKeyRequestBody: CreateApiKeyRequestBody,
): string {
  return JSON.stringify(
    CreateApiKeyRequestBody$outboundSchema.parse(createApiKeyRequestBody),
  );
}

export function createApiKeyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateApiKeyRequest$inboundSchema: z.ZodType<
  CreateApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  RequestBody: z.lazy(() => CreateApiKeyRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateApiKeyRequest$Outbound = {
  projectIdOrName: string;
  RequestBody: CreateApiKeyRequestBody$Outbound;
};

/** @internal */
export const CreateApiKeyRequest$outboundSchema: z.ZodType<
  CreateApiKeyRequest$Outbound,
  z.ZodTypeDef,
  CreateApiKeyRequest
> = z.object({
  projectIdOrName: z.string(),
  requestBody: z.lazy(() => CreateApiKeyRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyRequest$ {
  /** @deprecated use `CreateApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyRequest$inboundSchema;
  /** @deprecated use `CreateApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyRequest$outboundSchema;
  /** @deprecated use `CreateApiKeyRequest$Outbound` instead. */
  export type Outbound = CreateApiKeyRequest$Outbound;
}

export function createApiKeyRequestToJSON(
  createApiKeyRequest: CreateApiKeyRequest,
): string {
  return JSON.stringify(
    CreateApiKeyRequest$outboundSchema.parse(createApiKeyRequest),
  );
}

export function createApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyRequest' from JSON`,
  );
}

/** @internal */
export const CreateAPIKeyAPIKeyResponseBody$inboundSchema: z.ZodType<
  CreateAPIKeyAPIKeyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type CreateAPIKeyAPIKeyResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateAPIKeyAPIKeyResponseBody$outboundSchema: z.ZodType<
  CreateAPIKeyAPIKeyResponseBody$Outbound,
  z.ZodTypeDef,
  CreateAPIKeyAPIKeyResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAPIKeyAPIKeyResponseBody$ {
  /** @deprecated use `CreateAPIKeyAPIKeyResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateAPIKeyAPIKeyResponseBody$inboundSchema;
  /** @deprecated use `CreateAPIKeyAPIKeyResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateAPIKeyAPIKeyResponseBody$outboundSchema;
  /** @deprecated use `CreateAPIKeyAPIKeyResponseBody$Outbound` instead. */
  export type Outbound = CreateAPIKeyAPIKeyResponseBody$Outbound;
}

export function createAPIKeyAPIKeyResponseBodyToJSON(
  createAPIKeyAPIKeyResponseBody: CreateAPIKeyAPIKeyResponseBody,
): string {
  return JSON.stringify(
    CreateAPIKeyAPIKeyResponseBody$outboundSchema.parse(
      createAPIKeyAPIKeyResponseBody,
    ),
  );
}

export function createAPIKeyAPIKeyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAPIKeyAPIKeyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAPIKeyAPIKeyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAPIKeyAPIKeyResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateApiKeyResponseBody$inboundSchema: z.ZodType<
  CreateApiKeyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  label: z.string(),
  scopes: z.array(z.string()),
  projectId: z.string(),
  active: z.boolean().optional(),
});

/** @internal */
export type CreateApiKeyResponseBody$Outbound = {
  key: string;
  label: string;
  scopes: Array<string>;
  projectId: string;
  active?: boolean | undefined;
};

/** @internal */
export const CreateApiKeyResponseBody$outboundSchema: z.ZodType<
  CreateApiKeyResponseBody$Outbound,
  z.ZodTypeDef,
  CreateApiKeyResponseBody
> = z.object({
  key: z.string(),
  label: z.string(),
  scopes: z.array(z.string()),
  projectId: z.string(),
  active: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyResponseBody$ {
  /** @deprecated use `CreateApiKeyResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyResponseBody$inboundSchema;
  /** @deprecated use `CreateApiKeyResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyResponseBody$outboundSchema;
  /** @deprecated use `CreateApiKeyResponseBody$Outbound` instead. */
  export type Outbound = CreateApiKeyResponseBody$Outbound;
}

export function createApiKeyResponseBodyToJSON(
  createApiKeyResponseBody: CreateApiKeyResponseBody,
): string {
  return JSON.stringify(
    CreateApiKeyResponseBody$outboundSchema.parse(createApiKeyResponseBody),
  );
}

export function createApiKeyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateApiKeyResponse$inboundSchema: z.ZodType<
  CreateApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateApiKeyResponseBody$inboundSchema),
  z.lazy(() => CreateAPIKeyAPIKeyResponseBody$inboundSchema),
]);

/** @internal */
export type CreateApiKeyResponse$Outbound =
  | CreateApiKeyResponseBody$Outbound
  | CreateAPIKeyAPIKeyResponseBody$Outbound;

/** @internal */
export const CreateApiKeyResponse$outboundSchema: z.ZodType<
  CreateApiKeyResponse$Outbound,
  z.ZodTypeDef,
  CreateApiKeyResponse
> = z.union([
  z.lazy(() => CreateApiKeyResponseBody$outboundSchema),
  z.lazy(() => CreateAPIKeyAPIKeyResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApiKeyResponse$ {
  /** @deprecated use `CreateApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = CreateApiKeyResponse$inboundSchema;
  /** @deprecated use `CreateApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = CreateApiKeyResponse$outboundSchema;
  /** @deprecated use `CreateApiKeyResponse$Outbound` instead. */
  export type Outbound = CreateApiKeyResponse$Outbound;
}

export function createApiKeyResponseToJSON(
  createApiKeyResponse: CreateApiKeyResponse,
): string {
  return JSON.stringify(
    CreateApiKeyResponse$outboundSchema.parse(createApiKeyResponse),
  );
}

export function createApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApiKeyResponse' from JSON`,
  );
}
