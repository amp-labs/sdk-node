/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListIntegrationsServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type ListIntegrationsRequest = {
  projectIdOrName: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListIntegrationsAPIProblem = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type ListIntegrationsIntegrationFieldIntegrationFieldMapping = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type ListIntegrationsIntegrationFieldIntegrationFieldExistent = {
  fieldName: string;
  /**
   * The field name to map to.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to.
   */
  mapToDisplayName?: string | undefined;
};

export type ListIntegrationsIntegrationsIntegrationField =
  | ListIntegrationsIntegrationFieldIntegrationFieldExistent
  | ListIntegrationsIntegrationFieldIntegrationFieldMapping;

export type ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

export type ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent =
  {
    fieldName: string;
    /**
     * The field name to map to.
     */
    mapToName?: string | undefined;
    /**
     * The display name to map to.
     */
    mapToDisplayName?: string | undefined;
  };

export type ListIntegrationsIntegrationField =
  | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent
  | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping;

export const ListIntegrationsOptionalFieldsAutoOption = {
  All: "all",
} as const;
export type ListIntegrationsOptionalFieldsAutoOption = ClosedEnum<
  typeof ListIntegrationsOptionalFieldsAutoOption
>;

export type ListIntegrationsDefaultPeriod = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type ListIntegrationsBackfill = {
  defaultPeriod: ListIntegrationsDefaultPeriod;
};

/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export const ListIntegrationsMode = {
  OnRequest: "onRequest",
  Auto: "auto",
} as const;
/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export type ListIntegrationsMode = ClosedEnum<typeof ListIntegrationsMode>;

export type ListIntegrationsDelivery = {
  /**
   * The data delivery mode for this object. If not specified, defaults to automatic.
   */
  mode?: ListIntegrationsMode | undefined;
  /**
   * The number of records to receive per data delivery.
   */
  pageSize?: number | undefined;
};

export type ListIntegrationsIntegrationObject = {
  objectName: string;
  destination: string;
  schedule: string;
  /**
   * An object name to map to.
   */
  mapToName?: string | undefined;
  /**
   * A display name to map to.
   */
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | ListIntegrationsIntegrationFieldIntegrationFieldExistent
      | ListIntegrationsIntegrationFieldIntegrationFieldMapping
    >
    | undefined;
  optionalFields?:
    | Array<
      | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent
      | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping
    >
    | undefined;
  optionalFieldsAuto?: ListIntegrationsOptionalFieldsAutoOption | undefined;
  backfill?: ListIntegrationsBackfill | undefined;
  delivery?: ListIntegrationsDelivery | undefined;
};

export type ListIntegrationsReadIntegration = {
  objects?: Array<ListIntegrationsIntegrationObject> | undefined;
};

/**
 * Configuration to set default write values for object fields.
 */
export type ListIntegrationsValueDefaults = {
  /**
   * If true, users can set default values for any field.
   */
  allowAnyFields?: boolean | undefined;
};

export type ListIntegrationsIntegrationWriteObject = {
  objectName: string;
  /**
   * If true, the write object will inherit the mapping from the read object. If false, the write object will have no mapping.
   */
  inheritMapping?: boolean | undefined;
  /**
   * Configuration to set default write values for object fields.
   */
  valueDefaults?: ListIntegrationsValueDefaults | undefined;
};

export type ListIntegrationsWriteIntegration = {
  objects?: Array<ListIntegrationsIntegrationWriteObject> | undefined;
};

export type ListIntegrationsProxyIntegration = {
  enabled?: boolean | undefined;
};

export type ListIntegrationsIntegrationsIntegration = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: ListIntegrationsReadIntegration | undefined;
  write?: ListIntegrationsWriteIntegration | undefined;
  proxy?: ListIntegrationsProxyIntegration | undefined;
};

export type Revision = {
  /**
   * The revision ID.
   */
  id: string;
  /**
   * The spec version string.
   */
  specVersion: string;
  /**
   * The time the revision was created.
   */
  createTime: Date;
  content: ListIntegrationsIntegrationsIntegration;
};

export type ListIntegrationsIntegration = {
  /**
   * The integration ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration name.
   */
  name: string;
  /**
   * The SaaS provider that this integration connects to.
   */
  provider: string;
  /**
   * The time the integration was created.
   */
  createTime: Date;
  /**
   * The time the integration was last updated.
   */
  updateTime?: Date | undefined;
  latestRevision: Revision;
};

export type ListIntegrationsResponse =
  | ListIntegrationsAPIProblem
  | Array<ListIntegrationsIntegration>;

/** @internal */
export const ListIntegrationsRequest$inboundSchema: z.ZodType<
  ListIntegrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
});

/** @internal */
export type ListIntegrationsRequest$Outbound = {
  projectIdOrName: string;
};

/** @internal */
export const ListIntegrationsRequest$outboundSchema: z.ZodType<
  ListIntegrationsRequest$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRequest
> = z.object({
  projectIdOrName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRequest$ {
  /** @deprecated use `ListIntegrationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRequest$inboundSchema;
  /** @deprecated use `ListIntegrationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRequest$outboundSchema;
  /** @deprecated use `ListIntegrationsRequest$Outbound` instead. */
  export type Outbound = ListIntegrationsRequest$Outbound;
}

export function listIntegrationsRequestToJSON(
  listIntegrationsRequest: ListIntegrationsRequest,
): string {
  return JSON.stringify(
    ListIntegrationsRequest$outboundSchema.parse(listIntegrationsRequest),
  );
}

export function listIntegrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRequest' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsAPIProblem$inboundSchema: z.ZodType<
  ListIntegrationsAPIProblem,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListIntegrationsAPIProblem$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListIntegrationsAPIProblem$outboundSchema: z.ZodType<
  ListIntegrationsAPIProblem$Outbound,
  z.ZodTypeDef,
  ListIntegrationsAPIProblem
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsAPIProblem$ {
  /** @deprecated use `ListIntegrationsAPIProblem$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsAPIProblem$inboundSchema;
  /** @deprecated use `ListIntegrationsAPIProblem$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsAPIProblem$outboundSchema;
  /** @deprecated use `ListIntegrationsAPIProblem$Outbound` instead. */
  export type Outbound = ListIntegrationsAPIProblem$Outbound;
}

export function listIntegrationsAPIProblemToJSON(
  listIntegrationsAPIProblem: ListIntegrationsAPIProblem,
): string {
  return JSON.stringify(
    ListIntegrationsAPIProblem$outboundSchema.parse(listIntegrationsAPIProblem),
  );
}

export function listIntegrationsAPIProblemFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsAPIProblem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsAPIProblem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsAPIProblem' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type ListIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    ListIntegrationsIntegrationFieldIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationFieldIntegrationFieldMapping$ {
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    ListIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound;
}

export function listIntegrationsIntegrationFieldIntegrationFieldMappingToJSON(
  listIntegrationsIntegrationFieldIntegrationFieldMapping:
    ListIntegrationsIntegrationFieldIntegrationFieldMapping,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema
      .parse(listIntegrationsIntegrationFieldIntegrationFieldMapping),
  );
}

export function listIntegrationsIntegrationFieldIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationFieldIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationFieldIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationFieldExistent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/** @internal */
export type ListIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound =
  {
    fieldName: string;
    mapToName?: string | undefined;
    mapToDisplayName?: string | undefined;
  };

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound,
    z.ZodTypeDef,
    ListIntegrationsIntegrationFieldIntegrationFieldExistent
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationFieldIntegrationFieldExistent$ {
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound` instead. */
  export type Outbound =
    ListIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound;
}

export function listIntegrationsIntegrationFieldIntegrationFieldExistentToJSON(
  listIntegrationsIntegrationFieldIntegrationFieldExistent:
    ListIntegrationsIntegrationFieldIntegrationFieldExistent,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema
      .parse(listIntegrationsIntegrationFieldIntegrationFieldExistent),
  );
}

export function listIntegrationsIntegrationFieldIntegrationFieldExistentFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationFieldIntegrationFieldExistent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationFieldIntegrationFieldExistent' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationsIntegrationField$inboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationsIntegrationField,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      ListIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema
    ),
    z.lazy(() =>
      ListIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema
    ),
  ]);

/** @internal */
export type ListIntegrationsIntegrationsIntegrationField$Outbound =
  | ListIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound
  | ListIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound;

/** @internal */
export const ListIntegrationsIntegrationsIntegrationField$outboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationsIntegrationField$Outbound,
    z.ZodTypeDef,
    ListIntegrationsIntegrationsIntegrationField
  > = z.union([
    z.lazy(() =>
      ListIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema
    ),
    z.lazy(() =>
      ListIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationsIntegrationField$ {
  /** @deprecated use `ListIntegrationsIntegrationsIntegrationField$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationsIntegrationField$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationsIntegrationField$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationsIntegrationField$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationsIntegrationField$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationsIntegrationField$Outbound;
}

export function listIntegrationsIntegrationsIntegrationFieldToJSON(
  listIntegrationsIntegrationsIntegrationField:
    ListIntegrationsIntegrationsIntegrationField,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationsIntegrationField$outboundSchema.parse(
      listIntegrationsIntegrationsIntegrationField,
    ),
  );
}

export function listIntegrationsIntegrationsIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationsIntegrationField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationsIntegrationField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListIntegrationsIntegrationsIntegrationField' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
    z.ZodTypeDef,
    unknown
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/** @internal */
export type ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound =
  {
    mapToName: string;
    mapToDisplayName?: string | undefined;
    default?: string | undefined;
    prompt?: string | undefined;
  };

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound,
    z.ZodTypeDef,
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping
  > = z.object({
    mapToName: z.string(),
    mapToDisplayName: z.string().optional(),
    default: z.string().optional(),
    prompt: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$ {
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound` instead. */
  export type Outbound =
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound;
}

export function listIntegrationsIntegrationFieldIntegrationsIntegrationFieldMappingToJSON(
  listIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping:
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema
      .parse(
        listIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
      ),
  );
}

export function listIntegrationsIntegrationFieldIntegrationsIntegrationFieldMappingFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/** @internal */
export type ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound =
  {
    fieldName: string;
    mapToName?: string | undefined;
    mapToDisplayName?: string | undefined;
  };

/** @internal */
export const ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema:
  z.ZodType<
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound,
    z.ZodTypeDef,
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent
  > = z.object({
    fieldName: z.string(),
    mapToName: z.string().optional(),
    mapToDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$ {
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound` instead. */
  export type Outbound =
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound;
}

export function listIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistentToJSON(
  listIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent:
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema
      .parse(
        listIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
      ),
  );
}

export function listIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistentFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationField$inboundSchema: z.ZodType<
  ListIntegrationsIntegrationField,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema
  ),
  z.lazy(() =>
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema
  ),
]);

/** @internal */
export type ListIntegrationsIntegrationField$Outbound =
  | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound
  | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound;

/** @internal */
export const ListIntegrationsIntegrationField$outboundSchema: z.ZodType<
  ListIntegrationsIntegrationField$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegrationField
> = z.union([
  z.lazy(() =>
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema
  ),
  z.lazy(() =>
    ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationField$ {
  /** @deprecated use `ListIntegrationsIntegrationField$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsIntegrationField$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationField$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsIntegrationField$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationField$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationField$Outbound;
}

export function listIntegrationsIntegrationFieldToJSON(
  listIntegrationsIntegrationField: ListIntegrationsIntegrationField,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationField$outboundSchema.parse(
      listIntegrationsIntegrationField,
    ),
  );
}

export function listIntegrationsIntegrationFieldFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsIntegrationField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsIntegrationField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationField' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsOptionalFieldsAutoOption$inboundSchema:
  z.ZodNativeEnum<typeof ListIntegrationsOptionalFieldsAutoOption> = z
    .nativeEnum(ListIntegrationsOptionalFieldsAutoOption);

/** @internal */
export const ListIntegrationsOptionalFieldsAutoOption$outboundSchema:
  z.ZodNativeEnum<typeof ListIntegrationsOptionalFieldsAutoOption> =
    ListIntegrationsOptionalFieldsAutoOption$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsOptionalFieldsAutoOption$ {
  /** @deprecated use `ListIntegrationsOptionalFieldsAutoOption$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsOptionalFieldsAutoOption$inboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFieldsAutoOption$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsOptionalFieldsAutoOption$outboundSchema;
}

/** @internal */
export const ListIntegrationsDefaultPeriod$inboundSchema: z.ZodType<
  ListIntegrationsDefaultPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type ListIntegrationsDefaultPeriod$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const ListIntegrationsDefaultPeriod$outboundSchema: z.ZodType<
  ListIntegrationsDefaultPeriod$Outbound,
  z.ZodTypeDef,
  ListIntegrationsDefaultPeriod
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsDefaultPeriod$ {
  /** @deprecated use `ListIntegrationsDefaultPeriod$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsDefaultPeriod$inboundSchema;
  /** @deprecated use `ListIntegrationsDefaultPeriod$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsDefaultPeriod$outboundSchema;
  /** @deprecated use `ListIntegrationsDefaultPeriod$Outbound` instead. */
  export type Outbound = ListIntegrationsDefaultPeriod$Outbound;
}

export function listIntegrationsDefaultPeriodToJSON(
  listIntegrationsDefaultPeriod: ListIntegrationsDefaultPeriod,
): string {
  return JSON.stringify(
    ListIntegrationsDefaultPeriod$outboundSchema.parse(
      listIntegrationsDefaultPeriod,
    ),
  );
}

export function listIntegrationsDefaultPeriodFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsDefaultPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsDefaultPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsDefaultPeriod' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsBackfill$inboundSchema: z.ZodType<
  ListIntegrationsBackfill,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() => ListIntegrationsDefaultPeriod$inboundSchema),
});

/** @internal */
export type ListIntegrationsBackfill$Outbound = {
  defaultPeriod: ListIntegrationsDefaultPeriod$Outbound;
};

/** @internal */
export const ListIntegrationsBackfill$outboundSchema: z.ZodType<
  ListIntegrationsBackfill$Outbound,
  z.ZodTypeDef,
  ListIntegrationsBackfill
> = z.object({
  defaultPeriod: z.lazy(() => ListIntegrationsDefaultPeriod$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsBackfill$ {
  /** @deprecated use `ListIntegrationsBackfill$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsBackfill$inboundSchema;
  /** @deprecated use `ListIntegrationsBackfill$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsBackfill$outboundSchema;
  /** @deprecated use `ListIntegrationsBackfill$Outbound` instead. */
  export type Outbound = ListIntegrationsBackfill$Outbound;
}

export function listIntegrationsBackfillToJSON(
  listIntegrationsBackfill: ListIntegrationsBackfill,
): string {
  return JSON.stringify(
    ListIntegrationsBackfill$outboundSchema.parse(listIntegrationsBackfill),
  );
}

export function listIntegrationsBackfillFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsBackfill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsBackfill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsBackfill' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsMode$inboundSchema: z.ZodNativeEnum<
  typeof ListIntegrationsMode
> = z.nativeEnum(ListIntegrationsMode);

/** @internal */
export const ListIntegrationsMode$outboundSchema: z.ZodNativeEnum<
  typeof ListIntegrationsMode
> = ListIntegrationsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsMode$ {
  /** @deprecated use `ListIntegrationsMode$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsMode$inboundSchema;
  /** @deprecated use `ListIntegrationsMode$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsMode$outboundSchema;
}

/** @internal */
export const ListIntegrationsDelivery$inboundSchema: z.ZodType<
  ListIntegrationsDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: ListIntegrationsMode$inboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/** @internal */
export type ListIntegrationsDelivery$Outbound = {
  mode: string;
  pageSize?: number | undefined;
};

/** @internal */
export const ListIntegrationsDelivery$outboundSchema: z.ZodType<
  ListIntegrationsDelivery$Outbound,
  z.ZodTypeDef,
  ListIntegrationsDelivery
> = z.object({
  mode: ListIntegrationsMode$outboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsDelivery$ {
  /** @deprecated use `ListIntegrationsDelivery$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsDelivery$inboundSchema;
  /** @deprecated use `ListIntegrationsDelivery$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsDelivery$outboundSchema;
  /** @deprecated use `ListIntegrationsDelivery$Outbound` instead. */
  export type Outbound = ListIntegrationsDelivery$Outbound;
}

export function listIntegrationsDeliveryToJSON(
  listIntegrationsDelivery: ListIntegrationsDelivery,
): string {
  return JSON.stringify(
    ListIntegrationsDelivery$outboundSchema.parse(listIntegrationsDelivery),
  );
}

export function listIntegrationsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsDelivery' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationObject$inboundSchema: z.ZodType<
  ListIntegrationsIntegrationObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationFieldExistent$inboundSchema
      ),
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$inboundSchema
      ),
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$inboundSchema
      ),
    ]),
  ).optional(),
  optionalFieldsAuto: ListIntegrationsOptionalFieldsAutoOption$inboundSchema
    .optional(),
  backfill: z.lazy(() => ListIntegrationsBackfill$inboundSchema).optional(),
  delivery: z.lazy(() => ListIntegrationsDelivery$inboundSchema).optional(),
});

/** @internal */
export type ListIntegrationsIntegrationObject$Outbound = {
  objectName: string;
  destination: string;
  schedule: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | ListIntegrationsIntegrationFieldIntegrationFieldExistent$Outbound
      | ListIntegrationsIntegrationFieldIntegrationFieldMapping$Outbound
    >
    | undefined;
  optionalFields?:
    | Array<
      | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$Outbound
      | ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$Outbound
    >
    | undefined;
  optionalFieldsAuto?: string | undefined;
  backfill?: ListIntegrationsBackfill$Outbound | undefined;
  delivery?: ListIntegrationsDelivery$Outbound | undefined;
};

/** @internal */
export const ListIntegrationsIntegrationObject$outboundSchema: z.ZodType<
  ListIntegrationsIntegrationObject$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegrationObject
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationFieldExistent$outboundSchema
      ),
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldExistent$outboundSchema
      ),
      z.lazy(() =>
        ListIntegrationsIntegrationFieldIntegrationsIntegrationFieldMapping$outboundSchema
      ),
    ]),
  ).optional(),
  optionalFieldsAuto: ListIntegrationsOptionalFieldsAutoOption$outboundSchema
    .optional(),
  backfill: z.lazy(() => ListIntegrationsBackfill$outboundSchema).optional(),
  delivery: z.lazy(() => ListIntegrationsDelivery$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationObject$ {
  /** @deprecated use `ListIntegrationsIntegrationObject$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsIntegrationObject$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationObject$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationObject$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationObject$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationObject$Outbound;
}

export function listIntegrationsIntegrationObjectToJSON(
  listIntegrationsIntegrationObject: ListIntegrationsIntegrationObject,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationObject$outboundSchema.parse(
      listIntegrationsIntegrationObject,
    ),
  );
}

export function listIntegrationsIntegrationObjectFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsIntegrationObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsIntegrationObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationObject' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsReadIntegration$inboundSchema: z.ZodType<
  ListIntegrationsReadIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => ListIntegrationsIntegrationObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListIntegrationsReadIntegration$Outbound = {
  objects?: Array<ListIntegrationsIntegrationObject$Outbound> | undefined;
};

/** @internal */
export const ListIntegrationsReadIntegration$outboundSchema: z.ZodType<
  ListIntegrationsReadIntegration$Outbound,
  z.ZodTypeDef,
  ListIntegrationsReadIntegration
> = z.object({
  objects: z.array(
    z.lazy(() => ListIntegrationsIntegrationObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsReadIntegration$ {
  /** @deprecated use `ListIntegrationsReadIntegration$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsReadIntegration$inboundSchema;
  /** @deprecated use `ListIntegrationsReadIntegration$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsReadIntegration$outboundSchema;
  /** @deprecated use `ListIntegrationsReadIntegration$Outbound` instead. */
  export type Outbound = ListIntegrationsReadIntegration$Outbound;
}

export function listIntegrationsReadIntegrationToJSON(
  listIntegrationsReadIntegration: ListIntegrationsReadIntegration,
): string {
  return JSON.stringify(
    ListIntegrationsReadIntegration$outboundSchema.parse(
      listIntegrationsReadIntegration,
    ),
  );
}

export function listIntegrationsReadIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsReadIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsReadIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsReadIntegration' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsValueDefaults$inboundSchema: z.ZodType<
  ListIntegrationsValueDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/** @internal */
export type ListIntegrationsValueDefaults$Outbound = {
  allowAnyFields?: boolean | undefined;
};

/** @internal */
export const ListIntegrationsValueDefaults$outboundSchema: z.ZodType<
  ListIntegrationsValueDefaults$Outbound,
  z.ZodTypeDef,
  ListIntegrationsValueDefaults
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsValueDefaults$ {
  /** @deprecated use `ListIntegrationsValueDefaults$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsValueDefaults$inboundSchema;
  /** @deprecated use `ListIntegrationsValueDefaults$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsValueDefaults$outboundSchema;
  /** @deprecated use `ListIntegrationsValueDefaults$Outbound` instead. */
  export type Outbound = ListIntegrationsValueDefaults$Outbound;
}

export function listIntegrationsValueDefaultsToJSON(
  listIntegrationsValueDefaults: ListIntegrationsValueDefaults,
): string {
  return JSON.stringify(
    ListIntegrationsValueDefaults$outboundSchema.parse(
      listIntegrationsValueDefaults,
    ),
  );
}

export function listIntegrationsValueDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsValueDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsValueDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsValueDefaults' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationWriteObject$inboundSchema: z.ZodType<
  ListIntegrationsIntegrationWriteObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  inheritMapping: z.boolean().optional(),
  valueDefaults: z.lazy(() => ListIntegrationsValueDefaults$inboundSchema)
    .optional(),
});

/** @internal */
export type ListIntegrationsIntegrationWriteObject$Outbound = {
  objectName: string;
  inheritMapping?: boolean | undefined;
  valueDefaults?: ListIntegrationsValueDefaults$Outbound | undefined;
};

/** @internal */
export const ListIntegrationsIntegrationWriteObject$outboundSchema: z.ZodType<
  ListIntegrationsIntegrationWriteObject$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegrationWriteObject
> = z.object({
  objectName: z.string(),
  inheritMapping: z.boolean().optional(),
  valueDefaults: z.lazy(() => ListIntegrationsValueDefaults$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationWriteObject$ {
  /** @deprecated use `ListIntegrationsIntegrationWriteObject$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationWriteObject$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationWriteObject$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationWriteObject$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationWriteObject$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationWriteObject$Outbound;
}

export function listIntegrationsIntegrationWriteObjectToJSON(
  listIntegrationsIntegrationWriteObject:
    ListIntegrationsIntegrationWriteObject,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationWriteObject$outboundSchema.parse(
      listIntegrationsIntegrationWriteObject,
    ),
  );
}

export function listIntegrationsIntegrationWriteObjectFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsIntegrationWriteObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationWriteObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationWriteObject' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsWriteIntegration$inboundSchema: z.ZodType<
  ListIntegrationsWriteIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => ListIntegrationsIntegrationWriteObject$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListIntegrationsWriteIntegration$Outbound = {
  objects?: Array<ListIntegrationsIntegrationWriteObject$Outbound> | undefined;
};

/** @internal */
export const ListIntegrationsWriteIntegration$outboundSchema: z.ZodType<
  ListIntegrationsWriteIntegration$Outbound,
  z.ZodTypeDef,
  ListIntegrationsWriteIntegration
> = z.object({
  objects: z.array(
    z.lazy(() => ListIntegrationsIntegrationWriteObject$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsWriteIntegration$ {
  /** @deprecated use `ListIntegrationsWriteIntegration$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsWriteIntegration$inboundSchema;
  /** @deprecated use `ListIntegrationsWriteIntegration$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsWriteIntegration$outboundSchema;
  /** @deprecated use `ListIntegrationsWriteIntegration$Outbound` instead. */
  export type Outbound = ListIntegrationsWriteIntegration$Outbound;
}

export function listIntegrationsWriteIntegrationToJSON(
  listIntegrationsWriteIntegration: ListIntegrationsWriteIntegration,
): string {
  return JSON.stringify(
    ListIntegrationsWriteIntegration$outboundSchema.parse(
      listIntegrationsWriteIntegration,
    ),
  );
}

export function listIntegrationsWriteIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsWriteIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsWriteIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsWriteIntegration' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsProxyIntegration$inboundSchema: z.ZodType<
  ListIntegrationsProxyIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type ListIntegrationsProxyIntegration$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const ListIntegrationsProxyIntegration$outboundSchema: z.ZodType<
  ListIntegrationsProxyIntegration$Outbound,
  z.ZodTypeDef,
  ListIntegrationsProxyIntegration
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsProxyIntegration$ {
  /** @deprecated use `ListIntegrationsProxyIntegration$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsProxyIntegration$inboundSchema;
  /** @deprecated use `ListIntegrationsProxyIntegration$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsProxyIntegration$outboundSchema;
  /** @deprecated use `ListIntegrationsProxyIntegration$Outbound` instead. */
  export type Outbound = ListIntegrationsProxyIntegration$Outbound;
}

export function listIntegrationsProxyIntegrationToJSON(
  listIntegrationsProxyIntegration: ListIntegrationsProxyIntegration,
): string {
  return JSON.stringify(
    ListIntegrationsProxyIntegration$outboundSchema.parse(
      listIntegrationsProxyIntegration,
    ),
  );
}

export function listIntegrationsProxyIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsProxyIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsProxyIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsProxyIntegration' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationsIntegration$inboundSchema: z.ZodType<
  ListIntegrationsIntegrationsIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => ListIntegrationsReadIntegration$inboundSchema).optional(),
  write: z.lazy(() => ListIntegrationsWriteIntegration$inboundSchema)
    .optional(),
  proxy: z.lazy(() => ListIntegrationsProxyIntegration$inboundSchema)
    .optional(),
});

/** @internal */
export type ListIntegrationsIntegrationsIntegration$Outbound = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: ListIntegrationsReadIntegration$Outbound | undefined;
  write?: ListIntegrationsWriteIntegration$Outbound | undefined;
  proxy?: ListIntegrationsProxyIntegration$Outbound | undefined;
};

/** @internal */
export const ListIntegrationsIntegrationsIntegration$outboundSchema: z.ZodType<
  ListIntegrationsIntegrationsIntegration$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegrationsIntegration
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => ListIntegrationsReadIntegration$outboundSchema).optional(),
  write: z.lazy(() => ListIntegrationsWriteIntegration$outboundSchema)
    .optional(),
  proxy: z.lazy(() => ListIntegrationsProxyIntegration$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationsIntegration$ {
  /** @deprecated use `ListIntegrationsIntegrationsIntegration$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationsIntegration$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationsIntegration$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationsIntegration$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationsIntegration$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationsIntegration$Outbound;
}

export function listIntegrationsIntegrationsIntegrationToJSON(
  listIntegrationsIntegrationsIntegration:
    ListIntegrationsIntegrationsIntegration,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationsIntegration$outboundSchema.parse(
      listIntegrationsIntegrationsIntegration,
    ),
  );
}

export function listIntegrationsIntegrationsIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationsIntegration,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationsIntegration$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListIntegrationsIntegrationsIntegration' from JSON`,
  );
}

/** @internal */
export const Revision$inboundSchema: z.ZodType<
  Revision,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  content: z.lazy(() => ListIntegrationsIntegrationsIntegration$inboundSchema),
});

/** @internal */
export type Revision$Outbound = {
  id: string;
  specVersion: string;
  createTime: string;
  content: ListIntegrationsIntegrationsIntegration$Outbound;
};

/** @internal */
export const Revision$outboundSchema: z.ZodType<
  Revision$Outbound,
  z.ZodTypeDef,
  Revision
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  content: z.lazy(() => ListIntegrationsIntegrationsIntegration$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Revision$ {
  /** @deprecated use `Revision$inboundSchema` instead. */
  export const inboundSchema = Revision$inboundSchema;
  /** @deprecated use `Revision$outboundSchema` instead. */
  export const outboundSchema = Revision$outboundSchema;
  /** @deprecated use `Revision$Outbound` instead. */
  export type Outbound = Revision$Outbound;
}

export function revisionToJSON(revision: Revision): string {
  return JSON.stringify(Revision$outboundSchema.parse(revision));
}

export function revisionFromJSON(
  jsonString: string,
): SafeParseResult<Revision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Revision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Revision' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegration$inboundSchema: z.ZodType<
  ListIntegrationsIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  name: z.string(),
  provider: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  latestRevision: z.lazy(() => Revision$inboundSchema),
});

/** @internal */
export type ListIntegrationsIntegration$Outbound = {
  id: string;
  projectId: string;
  name: string;
  provider: string;
  createTime: string;
  updateTime?: string | undefined;
  latestRevision: Revision$Outbound;
};

/** @internal */
export const ListIntegrationsIntegration$outboundSchema: z.ZodType<
  ListIntegrationsIntegration$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegration
> = z.object({
  id: z.string(),
  projectId: z.string(),
  name: z.string(),
  provider: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  latestRevision: z.lazy(() => Revision$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegration$ {
  /** @deprecated use `ListIntegrationsIntegration$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsIntegration$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegration$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsIntegration$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegration$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegration$Outbound;
}

export function listIntegrationsIntegrationToJSON(
  listIntegrationsIntegration: ListIntegrationsIntegration,
): string {
  return JSON.stringify(
    ListIntegrationsIntegration$outboundSchema.parse(
      listIntegrationsIntegration,
    ),
  );
}

export function listIntegrationsIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegration' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsResponse$inboundSchema: z.ZodType<
  ListIntegrationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListIntegrationsAPIProblem$inboundSchema),
  z.array(z.lazy(() => ListIntegrationsIntegration$inboundSchema)),
]);

/** @internal */
export type ListIntegrationsResponse$Outbound =
  | ListIntegrationsAPIProblem$Outbound
  | Array<ListIntegrationsIntegration$Outbound>;

/** @internal */
export const ListIntegrationsResponse$outboundSchema: z.ZodType<
  ListIntegrationsResponse$Outbound,
  z.ZodTypeDef,
  ListIntegrationsResponse
> = z.union([
  z.lazy(() => ListIntegrationsAPIProblem$outboundSchema),
  z.array(z.lazy(() => ListIntegrationsIntegration$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsResponse$ {
  /** @deprecated use `ListIntegrationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsResponse$inboundSchema;
  /** @deprecated use `ListIntegrationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsResponse$outboundSchema;
  /** @deprecated use `ListIntegrationsResponse$Outbound` instead. */
  export type Outbound = ListIntegrationsResponse$Outbound;
}

export function listIntegrationsResponseToJSON(
  listIntegrationsResponse: ListIntegrationsResponse,
): string {
  return JSON.stringify(
    ListIntegrationsResponse$outboundSchema.parse(listIntegrationsResponse),
  );
}

export function listIntegrationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsResponse' from JSON`,
  );
}
