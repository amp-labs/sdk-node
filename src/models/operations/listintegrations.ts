/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListIntegrationsServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type ListIntegrationsRequest = {
  projectIdOrName: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type ListIntegrationsResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type ListIntegrationsRequiredFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type ListIntegrationsRequiredFields1 = {
  fieldName: string;
  /**
   * The field name to map to.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to.
   */
  mapToDisplayName?: string | undefined;
};

export type ListIntegrationsRequiredFields =
  | ListIntegrationsRequiredFields1
  | ListIntegrationsRequiredFields2;

export type ListIntegrationsOptionalFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type ListIntegrationsOptionalFields1 = {
  fieldName: string;
  /**
   * The field name to map to.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to.
   */
  mapToDisplayName?: string | undefined;
};

export type ListIntegrationsOptionalFields =
  | ListIntegrationsOptionalFields1
  | ListIntegrationsOptionalFields2;

export const ListIntegrationsOptionalFieldsAuto = {
  All: "all",
} as const;
export type ListIntegrationsOptionalFieldsAuto = ClosedEnum<
  typeof ListIntegrationsOptionalFieldsAuto
>;

export type ListIntegrationsDefaultPeriod = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type ListIntegrationsBackfill = {
  defaultPeriod: ListIntegrationsDefaultPeriod;
};

/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export const ListIntegrationsMode = {
  OnRequest: "onRequest",
  Auto: "auto",
} as const;
/**
 * The data delivery mode for this object. If not specified, defaults to automatic.
 */
export type ListIntegrationsMode = ClosedEnum<typeof ListIntegrationsMode>;

export type ListIntegrationsDelivery = {
  /**
   * The data delivery mode for this object. If not specified, defaults to automatic.
   */
  mode?: ListIntegrationsMode | undefined;
  /**
   * The number of records to receive per data delivery.
   */
  pageSize?: number | undefined;
};

export type ListIntegrationsIntegrationObjects = {
  objectName: string;
  destination: string;
  schedule: string;
  /**
   * An object name to map to.
   */
  mapToName?: string | undefined;
  /**
   * A display name to map to.
   */
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<ListIntegrationsRequiredFields1 | ListIntegrationsRequiredFields2>
    | undefined;
  optionalFields?:
    | Array<ListIntegrationsOptionalFields1 | ListIntegrationsOptionalFields2>
    | undefined;
  optionalFieldsAuto?: ListIntegrationsOptionalFieldsAuto | undefined;
  backfill?: ListIntegrationsBackfill | undefined;
  delivery?: ListIntegrationsDelivery | undefined;
};

export type ListIntegrationsRead = {
  objects?: Array<ListIntegrationsIntegrationObjects> | undefined;
};

/**
 * Configuration to set default write values for object fields.
 */
export type ListIntegrationsValueDefaults = {
  /**
   * If true, users can set default values for any field.
   */
  allowAnyFields?: boolean | undefined;
};

export type ListIntegrationsObjects = {
  objectName: string;
  /**
   * If true, the write object will inherit the mapping from the read object. If false, the write object will have no mapping.
   */
  inheritMapping?: boolean | undefined;
  /**
   * Configuration to set default write values for object fields.
   */
  valueDefaults?: ListIntegrationsValueDefaults | undefined;
};

export type ListIntegrationsWrite = {
  objects?: Array<ListIntegrationsObjects> | undefined;
};

export type ListIntegrationsProxy = {
  enabled?: boolean | undefined;
};

export type ListIntegrationsContent = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: ListIntegrationsRead | undefined;
  write?: ListIntegrationsWrite | undefined;
  proxy?: ListIntegrationsProxy | undefined;
};

export type ListIntegrationsLatestRevision = {
  /**
   * The revision ID.
   */
  id: string;
  /**
   * The spec version string.
   */
  specVersion: string;
  /**
   * The time the revision was created.
   */
  createTime: Date;
  content: ListIntegrationsContent;
};

export type ListIntegrationsIntegrationResponseBody = {
  /**
   * The integration ID.
   */
  id: string;
  /**
   * The Ampersand project ID.
   */
  projectId: string;
  /**
   * The integration name.
   */
  name: string;
  /**
   * The SaaS provider that this integration connects to.
   */
  provider: string;
  /**
   * The time the integration was created.
   */
  createTime: Date;
  /**
   * The time the integration was last updated.
   */
  updateTime?: Date | undefined;
  latestRevision: ListIntegrationsLatestRevision;
};

export type ListIntegrationsResponse =
  | ListIntegrationsResponseBody
  | Array<ListIntegrationsIntegrationResponseBody>;

/** @internal */
export const ListIntegrationsRequest$inboundSchema: z.ZodType<
  ListIntegrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
});

/** @internal */
export type ListIntegrationsRequest$Outbound = {
  projectIdOrName: string;
};

/** @internal */
export const ListIntegrationsRequest$outboundSchema: z.ZodType<
  ListIntegrationsRequest$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRequest
> = z.object({
  projectIdOrName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRequest$ {
  /** @deprecated use `ListIntegrationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRequest$inboundSchema;
  /** @deprecated use `ListIntegrationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRequest$outboundSchema;
  /** @deprecated use `ListIntegrationsRequest$Outbound` instead. */
  export type Outbound = ListIntegrationsRequest$Outbound;
}

export function listIntegrationsRequestToJSON(
  listIntegrationsRequest: ListIntegrationsRequest,
): string {
  return JSON.stringify(
    ListIntegrationsRequest$outboundSchema.parse(listIntegrationsRequest),
  );
}

export function listIntegrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRequest' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsResponseBody$inboundSchema: z.ZodType<
  ListIntegrationsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type ListIntegrationsResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const ListIntegrationsResponseBody$outboundSchema: z.ZodType<
  ListIntegrationsResponseBody$Outbound,
  z.ZodTypeDef,
  ListIntegrationsResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsResponseBody$ {
  /** @deprecated use `ListIntegrationsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsResponseBody$inboundSchema;
  /** @deprecated use `ListIntegrationsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsResponseBody$outboundSchema;
  /** @deprecated use `ListIntegrationsResponseBody$Outbound` instead. */
  export type Outbound = ListIntegrationsResponseBody$Outbound;
}

export function listIntegrationsResponseBodyToJSON(
  listIntegrationsResponseBody: ListIntegrationsResponseBody,
): string {
  return JSON.stringify(
    ListIntegrationsResponseBody$outboundSchema.parse(
      listIntegrationsResponseBody,
    ),
  );
}

export function listIntegrationsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsRequiredFields2$inboundSchema: z.ZodType<
  ListIntegrationsRequiredFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type ListIntegrationsRequiredFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const ListIntegrationsRequiredFields2$outboundSchema: z.ZodType<
  ListIntegrationsRequiredFields2$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRequiredFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRequiredFields2$ {
  /** @deprecated use `ListIntegrationsRequiredFields2$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRequiredFields2$inboundSchema;
  /** @deprecated use `ListIntegrationsRequiredFields2$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRequiredFields2$outboundSchema;
  /** @deprecated use `ListIntegrationsRequiredFields2$Outbound` instead. */
  export type Outbound = ListIntegrationsRequiredFields2$Outbound;
}

export function listIntegrationsRequiredFields2ToJSON(
  listIntegrationsRequiredFields2: ListIntegrationsRequiredFields2,
): string {
  return JSON.stringify(
    ListIntegrationsRequiredFields2$outboundSchema.parse(
      listIntegrationsRequiredFields2,
    ),
  );
}

export function listIntegrationsRequiredFields2FromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRequiredFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRequiredFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRequiredFields2' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsRequiredFields1$inboundSchema: z.ZodType<
  ListIntegrationsRequiredFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type ListIntegrationsRequiredFields1$Outbound = {
  fieldName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const ListIntegrationsRequiredFields1$outboundSchema: z.ZodType<
  ListIntegrationsRequiredFields1$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRequiredFields1
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRequiredFields1$ {
  /** @deprecated use `ListIntegrationsRequiredFields1$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRequiredFields1$inboundSchema;
  /** @deprecated use `ListIntegrationsRequiredFields1$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRequiredFields1$outboundSchema;
  /** @deprecated use `ListIntegrationsRequiredFields1$Outbound` instead. */
  export type Outbound = ListIntegrationsRequiredFields1$Outbound;
}

export function listIntegrationsRequiredFields1ToJSON(
  listIntegrationsRequiredFields1: ListIntegrationsRequiredFields1,
): string {
  return JSON.stringify(
    ListIntegrationsRequiredFields1$outboundSchema.parse(
      listIntegrationsRequiredFields1,
    ),
  );
}

export function listIntegrationsRequiredFields1FromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRequiredFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRequiredFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRequiredFields1' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsRequiredFields$inboundSchema: z.ZodType<
  ListIntegrationsRequiredFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListIntegrationsRequiredFields1$inboundSchema),
  z.lazy(() => ListIntegrationsRequiredFields2$inboundSchema),
]);

/** @internal */
export type ListIntegrationsRequiredFields$Outbound =
  | ListIntegrationsRequiredFields1$Outbound
  | ListIntegrationsRequiredFields2$Outbound;

/** @internal */
export const ListIntegrationsRequiredFields$outboundSchema: z.ZodType<
  ListIntegrationsRequiredFields$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRequiredFields
> = z.union([
  z.lazy(() => ListIntegrationsRequiredFields1$outboundSchema),
  z.lazy(() => ListIntegrationsRequiredFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRequiredFields$ {
  /** @deprecated use `ListIntegrationsRequiredFields$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRequiredFields$inboundSchema;
  /** @deprecated use `ListIntegrationsRequiredFields$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRequiredFields$outboundSchema;
  /** @deprecated use `ListIntegrationsRequiredFields$Outbound` instead. */
  export type Outbound = ListIntegrationsRequiredFields$Outbound;
}

export function listIntegrationsRequiredFieldsToJSON(
  listIntegrationsRequiredFields: ListIntegrationsRequiredFields,
): string {
  return JSON.stringify(
    ListIntegrationsRequiredFields$outboundSchema.parse(
      listIntegrationsRequiredFields,
    ),
  );
}

export function listIntegrationsRequiredFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRequiredFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRequiredFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRequiredFields' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsOptionalFields2$inboundSchema: z.ZodType<
  ListIntegrationsOptionalFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type ListIntegrationsOptionalFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const ListIntegrationsOptionalFields2$outboundSchema: z.ZodType<
  ListIntegrationsOptionalFields2$Outbound,
  z.ZodTypeDef,
  ListIntegrationsOptionalFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsOptionalFields2$ {
  /** @deprecated use `ListIntegrationsOptionalFields2$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsOptionalFields2$inboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFields2$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsOptionalFields2$outboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFields2$Outbound` instead. */
  export type Outbound = ListIntegrationsOptionalFields2$Outbound;
}

export function listIntegrationsOptionalFields2ToJSON(
  listIntegrationsOptionalFields2: ListIntegrationsOptionalFields2,
): string {
  return JSON.stringify(
    ListIntegrationsOptionalFields2$outboundSchema.parse(
      listIntegrationsOptionalFields2,
    ),
  );
}

export function listIntegrationsOptionalFields2FromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsOptionalFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsOptionalFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsOptionalFields2' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsOptionalFields1$inboundSchema: z.ZodType<
  ListIntegrationsOptionalFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type ListIntegrationsOptionalFields1$Outbound = {
  fieldName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const ListIntegrationsOptionalFields1$outboundSchema: z.ZodType<
  ListIntegrationsOptionalFields1$Outbound,
  z.ZodTypeDef,
  ListIntegrationsOptionalFields1
> = z.object({
  fieldName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsOptionalFields1$ {
  /** @deprecated use `ListIntegrationsOptionalFields1$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsOptionalFields1$inboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFields1$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsOptionalFields1$outboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFields1$Outbound` instead. */
  export type Outbound = ListIntegrationsOptionalFields1$Outbound;
}

export function listIntegrationsOptionalFields1ToJSON(
  listIntegrationsOptionalFields1: ListIntegrationsOptionalFields1,
): string {
  return JSON.stringify(
    ListIntegrationsOptionalFields1$outboundSchema.parse(
      listIntegrationsOptionalFields1,
    ),
  );
}

export function listIntegrationsOptionalFields1FromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsOptionalFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsOptionalFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsOptionalFields1' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsOptionalFields$inboundSchema: z.ZodType<
  ListIntegrationsOptionalFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListIntegrationsOptionalFields1$inboundSchema),
  z.lazy(() => ListIntegrationsOptionalFields2$inboundSchema),
]);

/** @internal */
export type ListIntegrationsOptionalFields$Outbound =
  | ListIntegrationsOptionalFields1$Outbound
  | ListIntegrationsOptionalFields2$Outbound;

/** @internal */
export const ListIntegrationsOptionalFields$outboundSchema: z.ZodType<
  ListIntegrationsOptionalFields$Outbound,
  z.ZodTypeDef,
  ListIntegrationsOptionalFields
> = z.union([
  z.lazy(() => ListIntegrationsOptionalFields1$outboundSchema),
  z.lazy(() => ListIntegrationsOptionalFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsOptionalFields$ {
  /** @deprecated use `ListIntegrationsOptionalFields$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsOptionalFields$inboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFields$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsOptionalFields$outboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFields$Outbound` instead. */
  export type Outbound = ListIntegrationsOptionalFields$Outbound;
}

export function listIntegrationsOptionalFieldsToJSON(
  listIntegrationsOptionalFields: ListIntegrationsOptionalFields,
): string {
  return JSON.stringify(
    ListIntegrationsOptionalFields$outboundSchema.parse(
      listIntegrationsOptionalFields,
    ),
  );
}

export function listIntegrationsOptionalFieldsFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsOptionalFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsOptionalFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsOptionalFields' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsOptionalFieldsAuto$inboundSchema: z.ZodNativeEnum<
  typeof ListIntegrationsOptionalFieldsAuto
> = z.nativeEnum(ListIntegrationsOptionalFieldsAuto);

/** @internal */
export const ListIntegrationsOptionalFieldsAuto$outboundSchema: z.ZodNativeEnum<
  typeof ListIntegrationsOptionalFieldsAuto
> = ListIntegrationsOptionalFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsOptionalFieldsAuto$ {
  /** @deprecated use `ListIntegrationsOptionalFieldsAuto$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsOptionalFieldsAuto$inboundSchema;
  /** @deprecated use `ListIntegrationsOptionalFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsOptionalFieldsAuto$outboundSchema;
}

/** @internal */
export const ListIntegrationsDefaultPeriod$inboundSchema: z.ZodType<
  ListIntegrationsDefaultPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type ListIntegrationsDefaultPeriod$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const ListIntegrationsDefaultPeriod$outboundSchema: z.ZodType<
  ListIntegrationsDefaultPeriod$Outbound,
  z.ZodTypeDef,
  ListIntegrationsDefaultPeriod
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsDefaultPeriod$ {
  /** @deprecated use `ListIntegrationsDefaultPeriod$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsDefaultPeriod$inboundSchema;
  /** @deprecated use `ListIntegrationsDefaultPeriod$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsDefaultPeriod$outboundSchema;
  /** @deprecated use `ListIntegrationsDefaultPeriod$Outbound` instead. */
  export type Outbound = ListIntegrationsDefaultPeriod$Outbound;
}

export function listIntegrationsDefaultPeriodToJSON(
  listIntegrationsDefaultPeriod: ListIntegrationsDefaultPeriod,
): string {
  return JSON.stringify(
    ListIntegrationsDefaultPeriod$outboundSchema.parse(
      listIntegrationsDefaultPeriod,
    ),
  );
}

export function listIntegrationsDefaultPeriodFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsDefaultPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsDefaultPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsDefaultPeriod' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsBackfill$inboundSchema: z.ZodType<
  ListIntegrationsBackfill,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() => ListIntegrationsDefaultPeriod$inboundSchema),
});

/** @internal */
export type ListIntegrationsBackfill$Outbound = {
  defaultPeriod: ListIntegrationsDefaultPeriod$Outbound;
};

/** @internal */
export const ListIntegrationsBackfill$outboundSchema: z.ZodType<
  ListIntegrationsBackfill$Outbound,
  z.ZodTypeDef,
  ListIntegrationsBackfill
> = z.object({
  defaultPeriod: z.lazy(() => ListIntegrationsDefaultPeriod$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsBackfill$ {
  /** @deprecated use `ListIntegrationsBackfill$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsBackfill$inboundSchema;
  /** @deprecated use `ListIntegrationsBackfill$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsBackfill$outboundSchema;
  /** @deprecated use `ListIntegrationsBackfill$Outbound` instead. */
  export type Outbound = ListIntegrationsBackfill$Outbound;
}

export function listIntegrationsBackfillToJSON(
  listIntegrationsBackfill: ListIntegrationsBackfill,
): string {
  return JSON.stringify(
    ListIntegrationsBackfill$outboundSchema.parse(listIntegrationsBackfill),
  );
}

export function listIntegrationsBackfillFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsBackfill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsBackfill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsBackfill' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsMode$inboundSchema: z.ZodNativeEnum<
  typeof ListIntegrationsMode
> = z.nativeEnum(ListIntegrationsMode);

/** @internal */
export const ListIntegrationsMode$outboundSchema: z.ZodNativeEnum<
  typeof ListIntegrationsMode
> = ListIntegrationsMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsMode$ {
  /** @deprecated use `ListIntegrationsMode$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsMode$inboundSchema;
  /** @deprecated use `ListIntegrationsMode$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsMode$outboundSchema;
}

/** @internal */
export const ListIntegrationsDelivery$inboundSchema: z.ZodType<
  ListIntegrationsDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  mode: ListIntegrationsMode$inboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/** @internal */
export type ListIntegrationsDelivery$Outbound = {
  mode: string;
  pageSize?: number | undefined;
};

/** @internal */
export const ListIntegrationsDelivery$outboundSchema: z.ZodType<
  ListIntegrationsDelivery$Outbound,
  z.ZodTypeDef,
  ListIntegrationsDelivery
> = z.object({
  mode: ListIntegrationsMode$outboundSchema.default("auto"),
  pageSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsDelivery$ {
  /** @deprecated use `ListIntegrationsDelivery$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsDelivery$inboundSchema;
  /** @deprecated use `ListIntegrationsDelivery$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsDelivery$outboundSchema;
  /** @deprecated use `ListIntegrationsDelivery$Outbound` instead. */
  export type Outbound = ListIntegrationsDelivery$Outbound;
}

export function listIntegrationsDeliveryToJSON(
  listIntegrationsDelivery: ListIntegrationsDelivery,
): string {
  return JSON.stringify(
    ListIntegrationsDelivery$outboundSchema.parse(listIntegrationsDelivery),
  );
}

export function listIntegrationsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsDelivery' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationObjects$inboundSchema: z.ZodType<
  ListIntegrationsIntegrationObjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => ListIntegrationsRequiredFields1$inboundSchema),
      z.lazy(() => ListIntegrationsRequiredFields2$inboundSchema),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => ListIntegrationsOptionalFields1$inboundSchema),
      z.lazy(() => ListIntegrationsOptionalFields2$inboundSchema),
    ]),
  ).optional(),
  optionalFieldsAuto: ListIntegrationsOptionalFieldsAuto$inboundSchema
    .optional(),
  backfill: z.lazy(() => ListIntegrationsBackfill$inboundSchema).optional(),
  delivery: z.lazy(() => ListIntegrationsDelivery$inboundSchema).optional(),
});

/** @internal */
export type ListIntegrationsIntegrationObjects$Outbound = {
  objectName: string;
  destination: string;
  schedule: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
  requiredFields?:
    | Array<
      | ListIntegrationsRequiredFields1$Outbound
      | ListIntegrationsRequiredFields2$Outbound
    >
    | undefined;
  optionalFields?:
    | Array<
      | ListIntegrationsOptionalFields1$Outbound
      | ListIntegrationsOptionalFields2$Outbound
    >
    | undefined;
  optionalFieldsAuto?: string | undefined;
  backfill?: ListIntegrationsBackfill$Outbound | undefined;
  delivery?: ListIntegrationsDelivery$Outbound | undefined;
};

/** @internal */
export const ListIntegrationsIntegrationObjects$outboundSchema: z.ZodType<
  ListIntegrationsIntegrationObjects$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegrationObjects
> = z.object({
  objectName: z.string(),
  destination: z.string(),
  schedule: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => ListIntegrationsRequiredFields1$outboundSchema),
      z.lazy(() => ListIntegrationsRequiredFields2$outboundSchema),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => ListIntegrationsOptionalFields1$outboundSchema),
      z.lazy(() => ListIntegrationsOptionalFields2$outboundSchema),
    ]),
  ).optional(),
  optionalFieldsAuto: ListIntegrationsOptionalFieldsAuto$outboundSchema
    .optional(),
  backfill: z.lazy(() => ListIntegrationsBackfill$outboundSchema).optional(),
  delivery: z.lazy(() => ListIntegrationsDelivery$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationObjects$ {
  /** @deprecated use `ListIntegrationsIntegrationObjects$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsIntegrationObjects$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationObjects$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationObjects$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationObjects$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationObjects$Outbound;
}

export function listIntegrationsIntegrationObjectsToJSON(
  listIntegrationsIntegrationObjects: ListIntegrationsIntegrationObjects,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationObjects$outboundSchema.parse(
      listIntegrationsIntegrationObjects,
    ),
  );
}

export function listIntegrationsIntegrationObjectsFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsIntegrationObjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationObjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsIntegrationObjects' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsRead$inboundSchema: z.ZodType<
  ListIntegrationsRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => ListIntegrationsIntegrationObjects$inboundSchema),
  ).optional(),
});

/** @internal */
export type ListIntegrationsRead$Outbound = {
  objects?: Array<ListIntegrationsIntegrationObjects$Outbound> | undefined;
};

/** @internal */
export const ListIntegrationsRead$outboundSchema: z.ZodType<
  ListIntegrationsRead$Outbound,
  z.ZodTypeDef,
  ListIntegrationsRead
> = z.object({
  objects: z.array(
    z.lazy(() => ListIntegrationsIntegrationObjects$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsRead$ {
  /** @deprecated use `ListIntegrationsRead$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsRead$inboundSchema;
  /** @deprecated use `ListIntegrationsRead$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsRead$outboundSchema;
  /** @deprecated use `ListIntegrationsRead$Outbound` instead. */
  export type Outbound = ListIntegrationsRead$Outbound;
}

export function listIntegrationsReadToJSON(
  listIntegrationsRead: ListIntegrationsRead,
): string {
  return JSON.stringify(
    ListIntegrationsRead$outboundSchema.parse(listIntegrationsRead),
  );
}

export function listIntegrationsReadFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsRead' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsValueDefaults$inboundSchema: z.ZodType<
  ListIntegrationsValueDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/** @internal */
export type ListIntegrationsValueDefaults$Outbound = {
  allowAnyFields?: boolean | undefined;
};

/** @internal */
export const ListIntegrationsValueDefaults$outboundSchema: z.ZodType<
  ListIntegrationsValueDefaults$Outbound,
  z.ZodTypeDef,
  ListIntegrationsValueDefaults
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsValueDefaults$ {
  /** @deprecated use `ListIntegrationsValueDefaults$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsValueDefaults$inboundSchema;
  /** @deprecated use `ListIntegrationsValueDefaults$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsValueDefaults$outboundSchema;
  /** @deprecated use `ListIntegrationsValueDefaults$Outbound` instead. */
  export type Outbound = ListIntegrationsValueDefaults$Outbound;
}

export function listIntegrationsValueDefaultsToJSON(
  listIntegrationsValueDefaults: ListIntegrationsValueDefaults,
): string {
  return JSON.stringify(
    ListIntegrationsValueDefaults$outboundSchema.parse(
      listIntegrationsValueDefaults,
    ),
  );
}

export function listIntegrationsValueDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsValueDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsValueDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsValueDefaults' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsObjects$inboundSchema: z.ZodType<
  ListIntegrationsObjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  inheritMapping: z.boolean().optional(),
  valueDefaults: z.lazy(() => ListIntegrationsValueDefaults$inboundSchema)
    .optional(),
});

/** @internal */
export type ListIntegrationsObjects$Outbound = {
  objectName: string;
  inheritMapping?: boolean | undefined;
  valueDefaults?: ListIntegrationsValueDefaults$Outbound | undefined;
};

/** @internal */
export const ListIntegrationsObjects$outboundSchema: z.ZodType<
  ListIntegrationsObjects$Outbound,
  z.ZodTypeDef,
  ListIntegrationsObjects
> = z.object({
  objectName: z.string(),
  inheritMapping: z.boolean().optional(),
  valueDefaults: z.lazy(() => ListIntegrationsValueDefaults$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsObjects$ {
  /** @deprecated use `ListIntegrationsObjects$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsObjects$inboundSchema;
  /** @deprecated use `ListIntegrationsObjects$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsObjects$outboundSchema;
  /** @deprecated use `ListIntegrationsObjects$Outbound` instead. */
  export type Outbound = ListIntegrationsObjects$Outbound;
}

export function listIntegrationsObjectsToJSON(
  listIntegrationsObjects: ListIntegrationsObjects,
): string {
  return JSON.stringify(
    ListIntegrationsObjects$outboundSchema.parse(listIntegrationsObjects),
  );
}

export function listIntegrationsObjectsFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsObjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsObjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsObjects' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsWrite$inboundSchema: z.ZodType<
  ListIntegrationsWrite,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(z.lazy(() => ListIntegrationsObjects$inboundSchema))
    .optional(),
});

/** @internal */
export type ListIntegrationsWrite$Outbound = {
  objects?: Array<ListIntegrationsObjects$Outbound> | undefined;
};

/** @internal */
export const ListIntegrationsWrite$outboundSchema: z.ZodType<
  ListIntegrationsWrite$Outbound,
  z.ZodTypeDef,
  ListIntegrationsWrite
> = z.object({
  objects: z.array(z.lazy(() => ListIntegrationsObjects$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsWrite$ {
  /** @deprecated use `ListIntegrationsWrite$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsWrite$inboundSchema;
  /** @deprecated use `ListIntegrationsWrite$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsWrite$outboundSchema;
  /** @deprecated use `ListIntegrationsWrite$Outbound` instead. */
  export type Outbound = ListIntegrationsWrite$Outbound;
}

export function listIntegrationsWriteToJSON(
  listIntegrationsWrite: ListIntegrationsWrite,
): string {
  return JSON.stringify(
    ListIntegrationsWrite$outboundSchema.parse(listIntegrationsWrite),
  );
}

export function listIntegrationsWriteFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsWrite' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsProxy$inboundSchema: z.ZodType<
  ListIntegrationsProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type ListIntegrationsProxy$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const ListIntegrationsProxy$outboundSchema: z.ZodType<
  ListIntegrationsProxy$Outbound,
  z.ZodTypeDef,
  ListIntegrationsProxy
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsProxy$ {
  /** @deprecated use `ListIntegrationsProxy$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsProxy$inboundSchema;
  /** @deprecated use `ListIntegrationsProxy$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsProxy$outboundSchema;
  /** @deprecated use `ListIntegrationsProxy$Outbound` instead. */
  export type Outbound = ListIntegrationsProxy$Outbound;
}

export function listIntegrationsProxyToJSON(
  listIntegrationsProxy: ListIntegrationsProxy,
): string {
  return JSON.stringify(
    ListIntegrationsProxy$outboundSchema.parse(listIntegrationsProxy),
  );
}

export function listIntegrationsProxyFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsProxy' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsContent$inboundSchema: z.ZodType<
  ListIntegrationsContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => ListIntegrationsRead$inboundSchema).optional(),
  write: z.lazy(() => ListIntegrationsWrite$inboundSchema).optional(),
  proxy: z.lazy(() => ListIntegrationsProxy$inboundSchema).optional(),
});

/** @internal */
export type ListIntegrationsContent$Outbound = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: ListIntegrationsRead$Outbound | undefined;
  write?: ListIntegrationsWrite$Outbound | undefined;
  proxy?: ListIntegrationsProxy$Outbound | undefined;
};

/** @internal */
export const ListIntegrationsContent$outboundSchema: z.ZodType<
  ListIntegrationsContent$Outbound,
  z.ZodTypeDef,
  ListIntegrationsContent
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => ListIntegrationsRead$outboundSchema).optional(),
  write: z.lazy(() => ListIntegrationsWrite$outboundSchema).optional(),
  proxy: z.lazy(() => ListIntegrationsProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsContent$ {
  /** @deprecated use `ListIntegrationsContent$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsContent$inboundSchema;
  /** @deprecated use `ListIntegrationsContent$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsContent$outboundSchema;
  /** @deprecated use `ListIntegrationsContent$Outbound` instead. */
  export type Outbound = ListIntegrationsContent$Outbound;
}

export function listIntegrationsContentToJSON(
  listIntegrationsContent: ListIntegrationsContent,
): string {
  return JSON.stringify(
    ListIntegrationsContent$outboundSchema.parse(listIntegrationsContent),
  );
}

export function listIntegrationsContentFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsContent' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsLatestRevision$inboundSchema: z.ZodType<
  ListIntegrationsLatestRevision,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  content: z.lazy(() => ListIntegrationsContent$inboundSchema),
});

/** @internal */
export type ListIntegrationsLatestRevision$Outbound = {
  id: string;
  specVersion: string;
  createTime: string;
  content: ListIntegrationsContent$Outbound;
};

/** @internal */
export const ListIntegrationsLatestRevision$outboundSchema: z.ZodType<
  ListIntegrationsLatestRevision$Outbound,
  z.ZodTypeDef,
  ListIntegrationsLatestRevision
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  content: z.lazy(() => ListIntegrationsContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsLatestRevision$ {
  /** @deprecated use `ListIntegrationsLatestRevision$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsLatestRevision$inboundSchema;
  /** @deprecated use `ListIntegrationsLatestRevision$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsLatestRevision$outboundSchema;
  /** @deprecated use `ListIntegrationsLatestRevision$Outbound` instead. */
  export type Outbound = ListIntegrationsLatestRevision$Outbound;
}

export function listIntegrationsLatestRevisionToJSON(
  listIntegrationsLatestRevision: ListIntegrationsLatestRevision,
): string {
  return JSON.stringify(
    ListIntegrationsLatestRevision$outboundSchema.parse(
      listIntegrationsLatestRevision,
    ),
  );
}

export function listIntegrationsLatestRevisionFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsLatestRevision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsLatestRevision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsLatestRevision' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsIntegrationResponseBody$inboundSchema: z.ZodType<
  ListIntegrationsIntegrationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  name: z.string(),
  provider: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  latestRevision: z.lazy(() => ListIntegrationsLatestRevision$inboundSchema),
});

/** @internal */
export type ListIntegrationsIntegrationResponseBody$Outbound = {
  id: string;
  projectId: string;
  name: string;
  provider: string;
  createTime: string;
  updateTime?: string | undefined;
  latestRevision: ListIntegrationsLatestRevision$Outbound;
};

/** @internal */
export const ListIntegrationsIntegrationResponseBody$outboundSchema: z.ZodType<
  ListIntegrationsIntegrationResponseBody$Outbound,
  z.ZodTypeDef,
  ListIntegrationsIntegrationResponseBody
> = z.object({
  id: z.string(),
  projectId: z.string(),
  name: z.string(),
  provider: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  latestRevision: z.lazy(() => ListIntegrationsLatestRevision$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsIntegrationResponseBody$ {
  /** @deprecated use `ListIntegrationsIntegrationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListIntegrationsIntegrationResponseBody$inboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListIntegrationsIntegrationResponseBody$outboundSchema;
  /** @deprecated use `ListIntegrationsIntegrationResponseBody$Outbound` instead. */
  export type Outbound = ListIntegrationsIntegrationResponseBody$Outbound;
}

export function listIntegrationsIntegrationResponseBodyToJSON(
  listIntegrationsIntegrationResponseBody:
    ListIntegrationsIntegrationResponseBody,
): string {
  return JSON.stringify(
    ListIntegrationsIntegrationResponseBody$outboundSchema.parse(
      listIntegrationsIntegrationResponseBody,
    ),
  );
}

export function listIntegrationsIntegrationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListIntegrationsIntegrationResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListIntegrationsIntegrationResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListIntegrationsIntegrationResponseBody' from JSON`,
  );
}

/** @internal */
export const ListIntegrationsResponse$inboundSchema: z.ZodType<
  ListIntegrationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ListIntegrationsResponseBody$inboundSchema),
  z.array(z.lazy(() => ListIntegrationsIntegrationResponseBody$inboundSchema)),
]);

/** @internal */
export type ListIntegrationsResponse$Outbound =
  | ListIntegrationsResponseBody$Outbound
  | Array<ListIntegrationsIntegrationResponseBody$Outbound>;

/** @internal */
export const ListIntegrationsResponse$outboundSchema: z.ZodType<
  ListIntegrationsResponse$Outbound,
  z.ZodTypeDef,
  ListIntegrationsResponse
> = z.union([
  z.lazy(() => ListIntegrationsResponseBody$outboundSchema),
  z.array(z.lazy(() => ListIntegrationsIntegrationResponseBody$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIntegrationsResponse$ {
  /** @deprecated use `ListIntegrationsResponse$inboundSchema` instead. */
  export const inboundSchema = ListIntegrationsResponse$inboundSchema;
  /** @deprecated use `ListIntegrationsResponse$outboundSchema` instead. */
  export const outboundSchema = ListIntegrationsResponse$outboundSchema;
  /** @deprecated use `ListIntegrationsResponse$Outbound` instead. */
  export type Outbound = ListIntegrationsResponse$Outbound;
}

export function listIntegrationsResponseToJSON(
  listIntegrationsResponse: ListIntegrationsResponse,
): string {
  return JSON.stringify(
    ListIntegrationsResponse$outboundSchema.parse(listIntegrationsResponse),
  );
}

export function listIntegrationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIntegrationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIntegrationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIntegrationsResponse' from JSON`,
  );
}
