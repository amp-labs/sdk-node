/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetHydratedRevisionServerList = [
  "https://api.withampersand.com/v1",
] as const;

export type GetHydratedRevisionRequest = {
  projectIdOrName: string;
  integrationId: string;
  revisionId: string;
  connectionId: string;
};

/**
 * A Problem Details object (RFC 9457).
 *
 * @remarks
 *
 * Additional properties specific to the problem type may be present.
 */
export type GetHydratedRevisionRevisionResponseBody = {
  /**
   * An absolute URI that identifies the problem type
   */
  type?: string | undefined;
  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   */
  href?: string | undefined;
  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   */
  title?: string | undefined;
  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * A human-readable explanation specific to this occurrence of the problem
   */
  detail?: string | undefined;
  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   */
  instance?: string | undefined;
  /**
   * The subsystem that generated the problem
   */
  subsystem?: string | undefined;
  /**
   * The time the problem occurred, formatted as RFC-3339
   */
  time?: Date | undefined;
  /**
   * A unique identifier for the request, useful for debugging
   */
  requestId?: string | undefined;
  /**
   * A list of problems that caused this problem. This can be used to represent multiple
   *
   * @remarks
   * root causes. There is no guaranteed ordering of the causes.
   */
  causes?: Array<string> | undefined;
  /**
   * A brief description of how to resolve the problem
   */
  remedy?: string | undefined;
  /**
   * An email address to contact for support
   */
  supportEmail?: string | undefined;
  /**
   * A phone number to contact for support
   */
  supportPhone?: string | undefined;
  /**
   * A URL to contact for support
   */
  supportUrl?: string | undefined;
  /**
   * Whether the request can be retried
   */
  retryable?: boolean | undefined;
  /**
   * A timestamp after which the request can be retried, formatted as RFC-3339
   */
  retryAfter?: Date | undefined;
  /**
   * Additional context for the problem
   */
  context?: { [k: string]: any } | undefined;
};

export type RequiredFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type RequiredFields1 = {
  fieldName: string;
  displayName: string;
  /**
   * The field name to map to in the destination.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to in the destination.
   */
  mapToDisplayName?: string | undefined;
};

export type GetHydratedRevisionRequiredFields =
  | RequiredFields1
  | RequiredFields2;

export type GetHydratedRevisionOptionalFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type GetHydratedRevisionOptionalFields1 = {
  fieldName: string;
  displayName: string;
  /**
   * The field name to map to in the destination.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to in the destination.
   */
  mapToDisplayName?: string | undefined;
};

export type GetHydratedRevisionOptionalFields =
  | GetHydratedRevisionOptionalFields1
  | GetHydratedRevisionOptionalFields2;

export const GetHydratedRevisionOptionalFieldsAuto = {
  All: "all",
} as const;
export type GetHydratedRevisionOptionalFieldsAuto = ClosedEnum<
  typeof GetHydratedRevisionOptionalFieldsAuto
>;

export type AllFields2 = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

export type AllFields1 = {
  fieldName: string;
  displayName: string;
  /**
   * The field name to map to in the destination.
   */
  mapToName?: string | undefined;
  /**
   * The display name to map to in the destination.
   */
  mapToDisplayName?: string | undefined;
};

export type AllFields = AllFields1 | AllFields2;

/**
 * A normalized field type
 */
export const GetHydratedRevisionValueType = {
  String: "string",
  Boolean: "boolean",
  SingleSelect: "singleSelect",
  MultiSelect: "multiSelect",
  Date: "date",
  Datetime: "datetime",
  Int: "int",
  Float: "float",
  Other: "other",
} as const;
/**
 * A normalized field type
 */
export type GetHydratedRevisionValueType = ClosedEnum<
  typeof GetHydratedRevisionValueType
>;

/**
 * Represents a field value
 */
export type GetHydratedRevisionValues = {
  /**
   * The internal value used by the system
   */
  value: string;
  /**
   * The human-readable display value
   */
  displayValue: string;
};

export type AllFieldsMetadata = {
  /**
   * The name of the field from the provider API.
   */
  fieldName: string;
  /**
   * The display name of the field from the provider API.
   */
  displayName: string;
  /**
   * A normalized field type
   */
  valueType?: GetHydratedRevisionValueType | undefined;
  /**
   * Raw field type from the provider API.
   */
  providerType?: string | undefined;
  /**
   * Whether the field is read-only.
   */
  readOnly?: boolean | undefined;
  /**
   * If the valueType is singleSelect or multiSelect, this is a list of possible values
   */
  values?: Array<GetHydratedRevisionValues> | undefined;
};

export type GetHydratedRevisionDefaultPeriod = {
  /**
   * Number of days in past to backfill from. 0 is no backfill. e.g) if 10, then backfill last 10 days of data. Required if fullHistory is not set.
   */
  days?: number | undefined;
  /**
   * If true, backfill all history. Required if days is not set.
   */
  fullHistory?: boolean | undefined;
};

export type GetHydratedRevisionBackfill = {
  defaultPeriod: GetHydratedRevisionDefaultPeriod;
};

export type GetHydratedRevisionObjects = {
  objectName: string;
  displayName: string;
  /**
   * An object name to map to.
   */
  mapToName?: string | undefined;
  /**
   * A display name to map to.
   */
  mapToDisplayName?: string | undefined;
  destination: string;
  schedule: string;
  requiredFields?: Array<RequiredFields1 | RequiredFields2> | undefined;
  optionalFields?:
    | Array<
      GetHydratedRevisionOptionalFields1 | GetHydratedRevisionOptionalFields2
    >
    | undefined;
  optionalFieldsAuto?: GetHydratedRevisionOptionalFieldsAuto | undefined;
  /**
   * This is a list of all fields on the object for a particular SaaS instance, including their display names.
   */
  allFields?: Array<AllFields1 | AllFields2> | undefined;
  /**
   * This is a map of all fields on the object including their metadata (such as display name and type), the keys of the map are the field names.
   */
  allFieldsMetadata?: { [k: string]: AllFieldsMetadata } | undefined;
  backfill?: GetHydratedRevisionBackfill | undefined;
};

export type GetHydratedRevisionRead = {
  objects?: Array<GetHydratedRevisionObjects> | undefined;
};

/**
 * Configuration to set default write values for object fields.
 */
export type GetHydratedRevisionValueDefaults = {
  /**
   * If true, users can set default values for any field.
   */
  allowAnyFields?: boolean | undefined;
};

export type GetHydratedRevisionRevisionObjects = {
  objectName: string;
  displayName: string;
  /**
   * Configuration to set default write values for object fields.
   */
  valueDefaults?: GetHydratedRevisionValueDefaults | undefined;
};

export type GetHydratedRevisionWrite = {
  objects?: Array<GetHydratedRevisionRevisionObjects> | undefined;
};

export type GetHydratedRevisionProxy = {
  enabled?: boolean | undefined;
};

export type GetHydratedRevisionContent = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: GetHydratedRevisionRead | undefined;
  write?: GetHydratedRevisionWrite | undefined;
  proxy?: GetHydratedRevisionProxy | undefined;
};

/**
 * Hydrated revision
 */
export type GetHydratedRevisionResponseBody = {
  /**
   * The revision ID.
   */
  id: string;
  /**
   * The spec version string.
   */
  specVersion: string;
  /**
   * The time the revision was created.
   */
  createTime: Date;
  content: GetHydratedRevisionContent;
};

export type GetHydratedRevisionResponse =
  | GetHydratedRevisionResponseBody
  | GetHydratedRevisionRevisionResponseBody;

/** @internal */
export const GetHydratedRevisionRequest$inboundSchema: z.ZodType<
  GetHydratedRevisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  revisionId: z.string(),
  connectionId: z.string(),
});

/** @internal */
export type GetHydratedRevisionRequest$Outbound = {
  projectIdOrName: string;
  integrationId: string;
  revisionId: string;
  connectionId: string;
};

/** @internal */
export const GetHydratedRevisionRequest$outboundSchema: z.ZodType<
  GetHydratedRevisionRequest$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionRequest
> = z.object({
  projectIdOrName: z.string(),
  integrationId: z.string(),
  revisionId: z.string(),
  connectionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRequest$ {
  /** @deprecated use `GetHydratedRevisionRequest$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionRequest$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRequest$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionRequest$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRequest$Outbound` instead. */
  export type Outbound = GetHydratedRevisionRequest$Outbound;
}

export function getHydratedRevisionRequestToJSON(
  getHydratedRevisionRequest: GetHydratedRevisionRequest,
): string {
  return JSON.stringify(
    GetHydratedRevisionRequest$outboundSchema.parse(getHydratedRevisionRequest),
  );
}

export function getHydratedRevisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionRequest' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionRevisionResponseBody$inboundSchema: z.ZodType<
  GetHydratedRevisionRevisionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  context: z.record(z.any()).optional(),
});

/** @internal */
export type GetHydratedRevisionRevisionResponseBody$Outbound = {
  type: string;
  href?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  subsystem?: string | undefined;
  time?: string | undefined;
  requestId?: string | undefined;
  causes?: Array<string> | undefined;
  remedy?: string | undefined;
  supportEmail?: string | undefined;
  supportPhone?: string | undefined;
  supportUrl?: string | undefined;
  retryable?: boolean | undefined;
  retryAfter?: string | undefined;
  context?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetHydratedRevisionRevisionResponseBody$outboundSchema: z.ZodType<
  GetHydratedRevisionRevisionResponseBody$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionRevisionResponseBody
> = z.object({
  type: z.string().default("about:blank"),
  href: z.string().optional(),
  title: z.string().optional(),
  status: z.number().int().optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
  subsystem: z.string().optional(),
  time: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  causes: z.array(z.string()).optional(),
  remedy: z.string().optional(),
  supportEmail: z.string().optional(),
  supportPhone: z.string().optional(),
  supportUrl: z.string().optional(),
  retryable: z.boolean().optional(),
  retryAfter: z.date().transform(v => v.toISOString()).optional(),
  context: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRevisionResponseBody$ {
  /** @deprecated use `GetHydratedRevisionRevisionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionRevisionResponseBody$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRevisionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionRevisionResponseBody$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRevisionResponseBody$Outbound` instead. */
  export type Outbound = GetHydratedRevisionRevisionResponseBody$Outbound;
}

export function getHydratedRevisionRevisionResponseBodyToJSON(
  getHydratedRevisionRevisionResponseBody:
    GetHydratedRevisionRevisionResponseBody,
): string {
  return JSON.stringify(
    GetHydratedRevisionRevisionResponseBody$outboundSchema.parse(
      getHydratedRevisionRevisionResponseBody,
    ),
  );
}

export function getHydratedRevisionRevisionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetHydratedRevisionRevisionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionRevisionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetHydratedRevisionRevisionResponseBody' from JSON`,
  );
}

/** @internal */
export const RequiredFields2$inboundSchema: z.ZodType<
  RequiredFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type RequiredFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const RequiredFields2$outboundSchema: z.ZodType<
  RequiredFields2$Outbound,
  z.ZodTypeDef,
  RequiredFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequiredFields2$ {
  /** @deprecated use `RequiredFields2$inboundSchema` instead. */
  export const inboundSchema = RequiredFields2$inboundSchema;
  /** @deprecated use `RequiredFields2$outboundSchema` instead. */
  export const outboundSchema = RequiredFields2$outboundSchema;
  /** @deprecated use `RequiredFields2$Outbound` instead. */
  export type Outbound = RequiredFields2$Outbound;
}

export function requiredFields2ToJSON(
  requiredFields2: RequiredFields2,
): string {
  return JSON.stringify(RequiredFields2$outboundSchema.parse(requiredFields2));
}

export function requiredFields2FromJSON(
  jsonString: string,
): SafeParseResult<RequiredFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequiredFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequiredFields2' from JSON`,
  );
}

/** @internal */
export const RequiredFields1$inboundSchema: z.ZodType<
  RequiredFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type RequiredFields1$Outbound = {
  fieldName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const RequiredFields1$outboundSchema: z.ZodType<
  RequiredFields1$Outbound,
  z.ZodTypeDef,
  RequiredFields1
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequiredFields1$ {
  /** @deprecated use `RequiredFields1$inboundSchema` instead. */
  export const inboundSchema = RequiredFields1$inboundSchema;
  /** @deprecated use `RequiredFields1$outboundSchema` instead. */
  export const outboundSchema = RequiredFields1$outboundSchema;
  /** @deprecated use `RequiredFields1$Outbound` instead. */
  export type Outbound = RequiredFields1$Outbound;
}

export function requiredFields1ToJSON(
  requiredFields1: RequiredFields1,
): string {
  return JSON.stringify(RequiredFields1$outboundSchema.parse(requiredFields1));
}

export function requiredFields1FromJSON(
  jsonString: string,
): SafeParseResult<RequiredFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequiredFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequiredFields1' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionRequiredFields$inboundSchema: z.ZodType<
  GetHydratedRevisionRequiredFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RequiredFields1$inboundSchema),
  z.lazy(() => RequiredFields2$inboundSchema),
]);

/** @internal */
export type GetHydratedRevisionRequiredFields$Outbound =
  | RequiredFields1$Outbound
  | RequiredFields2$Outbound;

/** @internal */
export const GetHydratedRevisionRequiredFields$outboundSchema: z.ZodType<
  GetHydratedRevisionRequiredFields$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionRequiredFields
> = z.union([
  z.lazy(() => RequiredFields1$outboundSchema),
  z.lazy(() => RequiredFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRequiredFields$ {
  /** @deprecated use `GetHydratedRevisionRequiredFields$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionRequiredFields$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRequiredFields$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionRequiredFields$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRequiredFields$Outbound` instead. */
  export type Outbound = GetHydratedRevisionRequiredFields$Outbound;
}

export function getHydratedRevisionRequiredFieldsToJSON(
  getHydratedRevisionRequiredFields: GetHydratedRevisionRequiredFields,
): string {
  return JSON.stringify(
    GetHydratedRevisionRequiredFields$outboundSchema.parse(
      getHydratedRevisionRequiredFields,
    ),
  );
}

export function getHydratedRevisionRequiredFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionRequiredFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionRequiredFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionRequiredFields' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionOptionalFields2$inboundSchema: z.ZodType<
  GetHydratedRevisionOptionalFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type GetHydratedRevisionOptionalFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const GetHydratedRevisionOptionalFields2$outboundSchema: z.ZodType<
  GetHydratedRevisionOptionalFields2$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionOptionalFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionOptionalFields2$ {
  /** @deprecated use `GetHydratedRevisionOptionalFields2$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionOptionalFields2$inboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFields2$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionOptionalFields2$outboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFields2$Outbound` instead. */
  export type Outbound = GetHydratedRevisionOptionalFields2$Outbound;
}

export function getHydratedRevisionOptionalFields2ToJSON(
  getHydratedRevisionOptionalFields2: GetHydratedRevisionOptionalFields2,
): string {
  return JSON.stringify(
    GetHydratedRevisionOptionalFields2$outboundSchema.parse(
      getHydratedRevisionOptionalFields2,
    ),
  );
}

export function getHydratedRevisionOptionalFields2FromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionOptionalFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionOptionalFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionOptionalFields2' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionOptionalFields1$inboundSchema: z.ZodType<
  GetHydratedRevisionOptionalFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type GetHydratedRevisionOptionalFields1$Outbound = {
  fieldName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const GetHydratedRevisionOptionalFields1$outboundSchema: z.ZodType<
  GetHydratedRevisionOptionalFields1$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionOptionalFields1
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionOptionalFields1$ {
  /** @deprecated use `GetHydratedRevisionOptionalFields1$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionOptionalFields1$inboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFields1$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionOptionalFields1$outboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFields1$Outbound` instead. */
  export type Outbound = GetHydratedRevisionOptionalFields1$Outbound;
}

export function getHydratedRevisionOptionalFields1ToJSON(
  getHydratedRevisionOptionalFields1: GetHydratedRevisionOptionalFields1,
): string {
  return JSON.stringify(
    GetHydratedRevisionOptionalFields1$outboundSchema.parse(
      getHydratedRevisionOptionalFields1,
    ),
  );
}

export function getHydratedRevisionOptionalFields1FromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionOptionalFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionOptionalFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionOptionalFields1' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionOptionalFields$inboundSchema: z.ZodType<
  GetHydratedRevisionOptionalFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetHydratedRevisionOptionalFields1$inboundSchema),
  z.lazy(() => GetHydratedRevisionOptionalFields2$inboundSchema),
]);

/** @internal */
export type GetHydratedRevisionOptionalFields$Outbound =
  | GetHydratedRevisionOptionalFields1$Outbound
  | GetHydratedRevisionOptionalFields2$Outbound;

/** @internal */
export const GetHydratedRevisionOptionalFields$outboundSchema: z.ZodType<
  GetHydratedRevisionOptionalFields$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionOptionalFields
> = z.union([
  z.lazy(() => GetHydratedRevisionOptionalFields1$outboundSchema),
  z.lazy(() => GetHydratedRevisionOptionalFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionOptionalFields$ {
  /** @deprecated use `GetHydratedRevisionOptionalFields$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionOptionalFields$inboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFields$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionOptionalFields$outboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFields$Outbound` instead. */
  export type Outbound = GetHydratedRevisionOptionalFields$Outbound;
}

export function getHydratedRevisionOptionalFieldsToJSON(
  getHydratedRevisionOptionalFields: GetHydratedRevisionOptionalFields,
): string {
  return JSON.stringify(
    GetHydratedRevisionOptionalFields$outboundSchema.parse(
      getHydratedRevisionOptionalFields,
    ),
  );
}

export function getHydratedRevisionOptionalFieldsFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionOptionalFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionOptionalFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionOptionalFields' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionOptionalFieldsAuto$inboundSchema:
  z.ZodNativeEnum<typeof GetHydratedRevisionOptionalFieldsAuto> = z.nativeEnum(
    GetHydratedRevisionOptionalFieldsAuto,
  );

/** @internal */
export const GetHydratedRevisionOptionalFieldsAuto$outboundSchema:
  z.ZodNativeEnum<typeof GetHydratedRevisionOptionalFieldsAuto> =
    GetHydratedRevisionOptionalFieldsAuto$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionOptionalFieldsAuto$ {
  /** @deprecated use `GetHydratedRevisionOptionalFieldsAuto$inboundSchema` instead. */
  export const inboundSchema =
    GetHydratedRevisionOptionalFieldsAuto$inboundSchema;
  /** @deprecated use `GetHydratedRevisionOptionalFieldsAuto$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionOptionalFieldsAuto$outboundSchema;
}

/** @internal */
export const AllFields2$inboundSchema: z.ZodType<
  AllFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/** @internal */
export type AllFields2$Outbound = {
  mapToName: string;
  mapToDisplayName?: string | undefined;
  default?: string | undefined;
  prompt?: string | undefined;
};

/** @internal */
export const AllFields2$outboundSchema: z.ZodType<
  AllFields2$Outbound,
  z.ZodTypeDef,
  AllFields2
> = z.object({
  mapToName: z.string(),
  mapToDisplayName: z.string().optional(),
  default: z.string().optional(),
  prompt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllFields2$ {
  /** @deprecated use `AllFields2$inboundSchema` instead. */
  export const inboundSchema = AllFields2$inboundSchema;
  /** @deprecated use `AllFields2$outboundSchema` instead. */
  export const outboundSchema = AllFields2$outboundSchema;
  /** @deprecated use `AllFields2$Outbound` instead. */
  export type Outbound = AllFields2$Outbound;
}

export function allFields2ToJSON(allFields2: AllFields2): string {
  return JSON.stringify(AllFields2$outboundSchema.parse(allFields2));
}

export function allFields2FromJSON(
  jsonString: string,
): SafeParseResult<AllFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllFields2' from JSON`,
  );
}

/** @internal */
export const AllFields1$inboundSchema: z.ZodType<
  AllFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/** @internal */
export type AllFields1$Outbound = {
  fieldName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
};

/** @internal */
export const AllFields1$outboundSchema: z.ZodType<
  AllFields1$Outbound,
  z.ZodTypeDef,
  AllFields1
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllFields1$ {
  /** @deprecated use `AllFields1$inboundSchema` instead. */
  export const inboundSchema = AllFields1$inboundSchema;
  /** @deprecated use `AllFields1$outboundSchema` instead. */
  export const outboundSchema = AllFields1$outboundSchema;
  /** @deprecated use `AllFields1$Outbound` instead. */
  export type Outbound = AllFields1$Outbound;
}

export function allFields1ToJSON(allFields1: AllFields1): string {
  return JSON.stringify(AllFields1$outboundSchema.parse(allFields1));
}

export function allFields1FromJSON(
  jsonString: string,
): SafeParseResult<AllFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllFields1' from JSON`,
  );
}

/** @internal */
export const AllFields$inboundSchema: z.ZodType<
  AllFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AllFields1$inboundSchema),
  z.lazy(() => AllFields2$inboundSchema),
]);

/** @internal */
export type AllFields$Outbound = AllFields1$Outbound | AllFields2$Outbound;

/** @internal */
export const AllFields$outboundSchema: z.ZodType<
  AllFields$Outbound,
  z.ZodTypeDef,
  AllFields
> = z.union([
  z.lazy(() => AllFields1$outboundSchema),
  z.lazy(() => AllFields2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllFields$ {
  /** @deprecated use `AllFields$inboundSchema` instead. */
  export const inboundSchema = AllFields$inboundSchema;
  /** @deprecated use `AllFields$outboundSchema` instead. */
  export const outboundSchema = AllFields$outboundSchema;
  /** @deprecated use `AllFields$Outbound` instead. */
  export type Outbound = AllFields$Outbound;
}

export function allFieldsToJSON(allFields: AllFields): string {
  return JSON.stringify(AllFields$outboundSchema.parse(allFields));
}

export function allFieldsFromJSON(
  jsonString: string,
): SafeParseResult<AllFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllFields' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionValueType$inboundSchema: z.ZodNativeEnum<
  typeof GetHydratedRevisionValueType
> = z.nativeEnum(GetHydratedRevisionValueType);

/** @internal */
export const GetHydratedRevisionValueType$outboundSchema: z.ZodNativeEnum<
  typeof GetHydratedRevisionValueType
> = GetHydratedRevisionValueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionValueType$ {
  /** @deprecated use `GetHydratedRevisionValueType$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionValueType$inboundSchema;
  /** @deprecated use `GetHydratedRevisionValueType$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionValueType$outboundSchema;
}

/** @internal */
export const GetHydratedRevisionValues$inboundSchema: z.ZodType<
  GetHydratedRevisionValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/** @internal */
export type GetHydratedRevisionValues$Outbound = {
  value: string;
  displayValue: string;
};

/** @internal */
export const GetHydratedRevisionValues$outboundSchema: z.ZodType<
  GetHydratedRevisionValues$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionValues
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionValues$ {
  /** @deprecated use `GetHydratedRevisionValues$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionValues$inboundSchema;
  /** @deprecated use `GetHydratedRevisionValues$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionValues$outboundSchema;
  /** @deprecated use `GetHydratedRevisionValues$Outbound` instead. */
  export type Outbound = GetHydratedRevisionValues$Outbound;
}

export function getHydratedRevisionValuesToJSON(
  getHydratedRevisionValues: GetHydratedRevisionValues,
): string {
  return JSON.stringify(
    GetHydratedRevisionValues$outboundSchema.parse(getHydratedRevisionValues),
  );
}

export function getHydratedRevisionValuesFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionValues' from JSON`,
  );
}

/** @internal */
export const AllFieldsMetadata$inboundSchema: z.ZodType<
  AllFieldsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: GetHydratedRevisionValueType$inboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(z.lazy(() => GetHydratedRevisionValues$inboundSchema))
    .optional(),
});

/** @internal */
export type AllFieldsMetadata$Outbound = {
  fieldName: string;
  displayName: string;
  valueType?: string | undefined;
  providerType?: string | undefined;
  readOnly?: boolean | undefined;
  values?: Array<GetHydratedRevisionValues$Outbound> | undefined;
};

/** @internal */
export const AllFieldsMetadata$outboundSchema: z.ZodType<
  AllFieldsMetadata$Outbound,
  z.ZodTypeDef,
  AllFieldsMetadata
> = z.object({
  fieldName: z.string(),
  displayName: z.string(),
  valueType: GetHydratedRevisionValueType$outboundSchema.optional(),
  providerType: z.string().optional(),
  readOnly: z.boolean().optional(),
  values: z.array(z.lazy(() => GetHydratedRevisionValues$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllFieldsMetadata$ {
  /** @deprecated use `AllFieldsMetadata$inboundSchema` instead. */
  export const inboundSchema = AllFieldsMetadata$inboundSchema;
  /** @deprecated use `AllFieldsMetadata$outboundSchema` instead. */
  export const outboundSchema = AllFieldsMetadata$outboundSchema;
  /** @deprecated use `AllFieldsMetadata$Outbound` instead. */
  export type Outbound = AllFieldsMetadata$Outbound;
}

export function allFieldsMetadataToJSON(
  allFieldsMetadata: AllFieldsMetadata,
): string {
  return JSON.stringify(
    AllFieldsMetadata$outboundSchema.parse(allFieldsMetadata),
  );
}

export function allFieldsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<AllFieldsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllFieldsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllFieldsMetadata' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionDefaultPeriod$inboundSchema: z.ZodType<
  GetHydratedRevisionDefaultPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/** @internal */
export type GetHydratedRevisionDefaultPeriod$Outbound = {
  days?: number | undefined;
  fullHistory?: boolean | undefined;
};

/** @internal */
export const GetHydratedRevisionDefaultPeriod$outboundSchema: z.ZodType<
  GetHydratedRevisionDefaultPeriod$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionDefaultPeriod
> = z.object({
  days: z.number().int().optional(),
  fullHistory: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionDefaultPeriod$ {
  /** @deprecated use `GetHydratedRevisionDefaultPeriod$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionDefaultPeriod$inboundSchema;
  /** @deprecated use `GetHydratedRevisionDefaultPeriod$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionDefaultPeriod$outboundSchema;
  /** @deprecated use `GetHydratedRevisionDefaultPeriod$Outbound` instead. */
  export type Outbound = GetHydratedRevisionDefaultPeriod$Outbound;
}

export function getHydratedRevisionDefaultPeriodToJSON(
  getHydratedRevisionDefaultPeriod: GetHydratedRevisionDefaultPeriod,
): string {
  return JSON.stringify(
    GetHydratedRevisionDefaultPeriod$outboundSchema.parse(
      getHydratedRevisionDefaultPeriod,
    ),
  );
}

export function getHydratedRevisionDefaultPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionDefaultPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionDefaultPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionDefaultPeriod' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionBackfill$inboundSchema: z.ZodType<
  GetHydratedRevisionBackfill,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPeriod: z.lazy(() => GetHydratedRevisionDefaultPeriod$inboundSchema),
});

/** @internal */
export type GetHydratedRevisionBackfill$Outbound = {
  defaultPeriod: GetHydratedRevisionDefaultPeriod$Outbound;
};

/** @internal */
export const GetHydratedRevisionBackfill$outboundSchema: z.ZodType<
  GetHydratedRevisionBackfill$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionBackfill
> = z.object({
  defaultPeriod: z.lazy(() => GetHydratedRevisionDefaultPeriod$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionBackfill$ {
  /** @deprecated use `GetHydratedRevisionBackfill$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionBackfill$inboundSchema;
  /** @deprecated use `GetHydratedRevisionBackfill$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionBackfill$outboundSchema;
  /** @deprecated use `GetHydratedRevisionBackfill$Outbound` instead. */
  export type Outbound = GetHydratedRevisionBackfill$Outbound;
}

export function getHydratedRevisionBackfillToJSON(
  getHydratedRevisionBackfill: GetHydratedRevisionBackfill,
): string {
  return JSON.stringify(
    GetHydratedRevisionBackfill$outboundSchema.parse(
      getHydratedRevisionBackfill,
    ),
  );
}

export function getHydratedRevisionBackfillFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionBackfill, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionBackfill$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionBackfill' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionObjects$inboundSchema: z.ZodType<
  GetHydratedRevisionObjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  destination: z.string(),
  schedule: z.string(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => RequiredFields1$inboundSchema),
      z.lazy(() => RequiredFields2$inboundSchema),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => GetHydratedRevisionOptionalFields1$inboundSchema),
      z.lazy(() => GetHydratedRevisionOptionalFields2$inboundSchema),
    ]),
  ).optional(),
  optionalFieldsAuto: GetHydratedRevisionOptionalFieldsAuto$inboundSchema
    .optional(),
  allFields: z.array(
    z.union([
      z.lazy(() => AllFields1$inboundSchema),
      z.lazy(() => AllFields2$inboundSchema),
    ]),
  ).optional(),
  allFieldsMetadata: z.record(z.lazy(() => AllFieldsMetadata$inboundSchema))
    .optional(),
  backfill: z.lazy(() => GetHydratedRevisionBackfill$inboundSchema).optional(),
});

/** @internal */
export type GetHydratedRevisionObjects$Outbound = {
  objectName: string;
  displayName: string;
  mapToName?: string | undefined;
  mapToDisplayName?: string | undefined;
  destination: string;
  schedule: string;
  requiredFields?:
    | Array<RequiredFields1$Outbound | RequiredFields2$Outbound>
    | undefined;
  optionalFields?:
    | Array<
      | GetHydratedRevisionOptionalFields1$Outbound
      | GetHydratedRevisionOptionalFields2$Outbound
    >
    | undefined;
  optionalFieldsAuto?: string | undefined;
  allFields?: Array<AllFields1$Outbound | AllFields2$Outbound> | undefined;
  allFieldsMetadata?: { [k: string]: AllFieldsMetadata$Outbound } | undefined;
  backfill?: GetHydratedRevisionBackfill$Outbound | undefined;
};

/** @internal */
export const GetHydratedRevisionObjects$outboundSchema: z.ZodType<
  GetHydratedRevisionObjects$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionObjects
> = z.object({
  objectName: z.string(),
  displayName: z.string(),
  mapToName: z.string().optional(),
  mapToDisplayName: z.string().optional(),
  destination: z.string(),
  schedule: z.string(),
  requiredFields: z.array(
    z.union([
      z.lazy(() => RequiredFields1$outboundSchema),
      z.lazy(() => RequiredFields2$outboundSchema),
    ]),
  ).optional(),
  optionalFields: z.array(
    z.union([
      z.lazy(() => GetHydratedRevisionOptionalFields1$outboundSchema),
      z.lazy(() => GetHydratedRevisionOptionalFields2$outboundSchema),
    ]),
  ).optional(),
  optionalFieldsAuto: GetHydratedRevisionOptionalFieldsAuto$outboundSchema
    .optional(),
  allFields: z.array(
    z.union([
      z.lazy(() => AllFields1$outboundSchema),
      z.lazy(() => AllFields2$outboundSchema),
    ]),
  ).optional(),
  allFieldsMetadata: z.record(z.lazy(() => AllFieldsMetadata$outboundSchema))
    .optional(),
  backfill: z.lazy(() => GetHydratedRevisionBackfill$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionObjects$ {
  /** @deprecated use `GetHydratedRevisionObjects$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionObjects$inboundSchema;
  /** @deprecated use `GetHydratedRevisionObjects$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionObjects$outboundSchema;
  /** @deprecated use `GetHydratedRevisionObjects$Outbound` instead. */
  export type Outbound = GetHydratedRevisionObjects$Outbound;
}

export function getHydratedRevisionObjectsToJSON(
  getHydratedRevisionObjects: GetHydratedRevisionObjects,
): string {
  return JSON.stringify(
    GetHydratedRevisionObjects$outboundSchema.parse(getHydratedRevisionObjects),
  );
}

export function getHydratedRevisionObjectsFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionObjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionObjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionObjects' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionRead$inboundSchema: z.ZodType<
  GetHydratedRevisionRead,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(z.lazy(() => GetHydratedRevisionObjects$inboundSchema))
    .optional(),
});

/** @internal */
export type GetHydratedRevisionRead$Outbound = {
  objects?: Array<GetHydratedRevisionObjects$Outbound> | undefined;
};

/** @internal */
export const GetHydratedRevisionRead$outboundSchema: z.ZodType<
  GetHydratedRevisionRead$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionRead
> = z.object({
  objects: z.array(z.lazy(() => GetHydratedRevisionObjects$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRead$ {
  /** @deprecated use `GetHydratedRevisionRead$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionRead$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRead$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionRead$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRead$Outbound` instead. */
  export type Outbound = GetHydratedRevisionRead$Outbound;
}

export function getHydratedRevisionReadToJSON(
  getHydratedRevisionRead: GetHydratedRevisionRead,
): string {
  return JSON.stringify(
    GetHydratedRevisionRead$outboundSchema.parse(getHydratedRevisionRead),
  );
}

export function getHydratedRevisionReadFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionRead, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionRead$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionRead' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionValueDefaults$inboundSchema: z.ZodType<
  GetHydratedRevisionValueDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/** @internal */
export type GetHydratedRevisionValueDefaults$Outbound = {
  allowAnyFields?: boolean | undefined;
};

/** @internal */
export const GetHydratedRevisionValueDefaults$outboundSchema: z.ZodType<
  GetHydratedRevisionValueDefaults$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionValueDefaults
> = z.object({
  allowAnyFields: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionValueDefaults$ {
  /** @deprecated use `GetHydratedRevisionValueDefaults$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionValueDefaults$inboundSchema;
  /** @deprecated use `GetHydratedRevisionValueDefaults$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionValueDefaults$outboundSchema;
  /** @deprecated use `GetHydratedRevisionValueDefaults$Outbound` instead. */
  export type Outbound = GetHydratedRevisionValueDefaults$Outbound;
}

export function getHydratedRevisionValueDefaultsToJSON(
  getHydratedRevisionValueDefaults: GetHydratedRevisionValueDefaults,
): string {
  return JSON.stringify(
    GetHydratedRevisionValueDefaults$outboundSchema.parse(
      getHydratedRevisionValueDefaults,
    ),
  );
}

export function getHydratedRevisionValueDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionValueDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionValueDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionValueDefaults' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionRevisionObjects$inboundSchema: z.ZodType<
  GetHydratedRevisionRevisionObjects,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectName: z.string(),
  displayName: z.string(),
  valueDefaults: z.lazy(() => GetHydratedRevisionValueDefaults$inboundSchema)
    .optional(),
});

/** @internal */
export type GetHydratedRevisionRevisionObjects$Outbound = {
  objectName: string;
  displayName: string;
  valueDefaults?: GetHydratedRevisionValueDefaults$Outbound | undefined;
};

/** @internal */
export const GetHydratedRevisionRevisionObjects$outboundSchema: z.ZodType<
  GetHydratedRevisionRevisionObjects$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionRevisionObjects
> = z.object({
  objectName: z.string(),
  displayName: z.string(),
  valueDefaults: z.lazy(() => GetHydratedRevisionValueDefaults$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionRevisionObjects$ {
  /** @deprecated use `GetHydratedRevisionRevisionObjects$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionRevisionObjects$inboundSchema;
  /** @deprecated use `GetHydratedRevisionRevisionObjects$outboundSchema` instead. */
  export const outboundSchema =
    GetHydratedRevisionRevisionObjects$outboundSchema;
  /** @deprecated use `GetHydratedRevisionRevisionObjects$Outbound` instead. */
  export type Outbound = GetHydratedRevisionRevisionObjects$Outbound;
}

export function getHydratedRevisionRevisionObjectsToJSON(
  getHydratedRevisionRevisionObjects: GetHydratedRevisionRevisionObjects,
): string {
  return JSON.stringify(
    GetHydratedRevisionRevisionObjects$outboundSchema.parse(
      getHydratedRevisionRevisionObjects,
    ),
  );
}

export function getHydratedRevisionRevisionObjectsFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionRevisionObjects, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetHydratedRevisionRevisionObjects$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionRevisionObjects' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionWrite$inboundSchema: z.ZodType<
  GetHydratedRevisionWrite,
  z.ZodTypeDef,
  unknown
> = z.object({
  objects: z.array(
    z.lazy(() => GetHydratedRevisionRevisionObjects$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetHydratedRevisionWrite$Outbound = {
  objects?: Array<GetHydratedRevisionRevisionObjects$Outbound> | undefined;
};

/** @internal */
export const GetHydratedRevisionWrite$outboundSchema: z.ZodType<
  GetHydratedRevisionWrite$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionWrite
> = z.object({
  objects: z.array(
    z.lazy(() => GetHydratedRevisionRevisionObjects$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionWrite$ {
  /** @deprecated use `GetHydratedRevisionWrite$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionWrite$inboundSchema;
  /** @deprecated use `GetHydratedRevisionWrite$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionWrite$outboundSchema;
  /** @deprecated use `GetHydratedRevisionWrite$Outbound` instead. */
  export type Outbound = GetHydratedRevisionWrite$Outbound;
}

export function getHydratedRevisionWriteToJSON(
  getHydratedRevisionWrite: GetHydratedRevisionWrite,
): string {
  return JSON.stringify(
    GetHydratedRevisionWrite$outboundSchema.parse(getHydratedRevisionWrite),
  );
}

export function getHydratedRevisionWriteFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionWrite' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionProxy$inboundSchema: z.ZodType<
  GetHydratedRevisionProxy,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type GetHydratedRevisionProxy$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const GetHydratedRevisionProxy$outboundSchema: z.ZodType<
  GetHydratedRevisionProxy$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionProxy
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionProxy$ {
  /** @deprecated use `GetHydratedRevisionProxy$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionProxy$inboundSchema;
  /** @deprecated use `GetHydratedRevisionProxy$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionProxy$outboundSchema;
  /** @deprecated use `GetHydratedRevisionProxy$Outbound` instead. */
  export type Outbound = GetHydratedRevisionProxy$Outbound;
}

export function getHydratedRevisionProxyToJSON(
  getHydratedRevisionProxy: GetHydratedRevisionProxy,
): string {
  return JSON.stringify(
    GetHydratedRevisionProxy$outboundSchema.parse(getHydratedRevisionProxy),
  );
}

export function getHydratedRevisionProxyFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionProxy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionProxy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionProxy' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionContent$inboundSchema: z.ZodType<
  GetHydratedRevisionContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => GetHydratedRevisionRead$inboundSchema).optional(),
  write: z.lazy(() => GetHydratedRevisionWrite$inboundSchema).optional(),
  proxy: z.lazy(() => GetHydratedRevisionProxy$inboundSchema).optional(),
});

/** @internal */
export type GetHydratedRevisionContent$Outbound = {
  name: string;
  displayName?: string | undefined;
  provider: string;
  read?: GetHydratedRevisionRead$Outbound | undefined;
  write?: GetHydratedRevisionWrite$Outbound | undefined;
  proxy?: GetHydratedRevisionProxy$Outbound | undefined;
};

/** @internal */
export const GetHydratedRevisionContent$outboundSchema: z.ZodType<
  GetHydratedRevisionContent$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionContent
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  provider: z.string(),
  read: z.lazy(() => GetHydratedRevisionRead$outboundSchema).optional(),
  write: z.lazy(() => GetHydratedRevisionWrite$outboundSchema).optional(),
  proxy: z.lazy(() => GetHydratedRevisionProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionContent$ {
  /** @deprecated use `GetHydratedRevisionContent$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionContent$inboundSchema;
  /** @deprecated use `GetHydratedRevisionContent$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionContent$outboundSchema;
  /** @deprecated use `GetHydratedRevisionContent$Outbound` instead. */
  export type Outbound = GetHydratedRevisionContent$Outbound;
}

export function getHydratedRevisionContentToJSON(
  getHydratedRevisionContent: GetHydratedRevisionContent,
): string {
  return JSON.stringify(
    GetHydratedRevisionContent$outboundSchema.parse(getHydratedRevisionContent),
  );
}

export function getHydratedRevisionContentFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionContent' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionResponseBody$inboundSchema: z.ZodType<
  GetHydratedRevisionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  content: z.lazy(() => GetHydratedRevisionContent$inboundSchema),
});

/** @internal */
export type GetHydratedRevisionResponseBody$Outbound = {
  id: string;
  specVersion: string;
  createTime: string;
  content: GetHydratedRevisionContent$Outbound;
};

/** @internal */
export const GetHydratedRevisionResponseBody$outboundSchema: z.ZodType<
  GetHydratedRevisionResponseBody$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionResponseBody
> = z.object({
  id: z.string(),
  specVersion: z.string(),
  createTime: z.date().transform(v => v.toISOString()),
  content: z.lazy(() => GetHydratedRevisionContent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionResponseBody$ {
  /** @deprecated use `GetHydratedRevisionResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionResponseBody$inboundSchema;
  /** @deprecated use `GetHydratedRevisionResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionResponseBody$outboundSchema;
  /** @deprecated use `GetHydratedRevisionResponseBody$Outbound` instead. */
  export type Outbound = GetHydratedRevisionResponseBody$Outbound;
}

export function getHydratedRevisionResponseBodyToJSON(
  getHydratedRevisionResponseBody: GetHydratedRevisionResponseBody,
): string {
  return JSON.stringify(
    GetHydratedRevisionResponseBody$outboundSchema.parse(
      getHydratedRevisionResponseBody,
    ),
  );
}

export function getHydratedRevisionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionResponseBody' from JSON`,
  );
}

/** @internal */
export const GetHydratedRevisionResponse$inboundSchema: z.ZodType<
  GetHydratedRevisionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetHydratedRevisionResponseBody$inboundSchema),
  z.lazy(() => GetHydratedRevisionRevisionResponseBody$inboundSchema),
]);

/** @internal */
export type GetHydratedRevisionResponse$Outbound =
  | GetHydratedRevisionResponseBody$Outbound
  | GetHydratedRevisionRevisionResponseBody$Outbound;

/** @internal */
export const GetHydratedRevisionResponse$outboundSchema: z.ZodType<
  GetHydratedRevisionResponse$Outbound,
  z.ZodTypeDef,
  GetHydratedRevisionResponse
> = z.union([
  z.lazy(() => GetHydratedRevisionResponseBody$outboundSchema),
  z.lazy(() => GetHydratedRevisionRevisionResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHydratedRevisionResponse$ {
  /** @deprecated use `GetHydratedRevisionResponse$inboundSchema` instead. */
  export const inboundSchema = GetHydratedRevisionResponse$inboundSchema;
  /** @deprecated use `GetHydratedRevisionResponse$outboundSchema` instead. */
  export const outboundSchema = GetHydratedRevisionResponse$outboundSchema;
  /** @deprecated use `GetHydratedRevisionResponse$Outbound` instead. */
  export type Outbound = GetHydratedRevisionResponse$Outbound;
}

export function getHydratedRevisionResponseToJSON(
  getHydratedRevisionResponse: GetHydratedRevisionResponse,
): string {
  return JSON.stringify(
    GetHydratedRevisionResponse$outboundSchema.parse(
      getHydratedRevisionResponse,
    ),
  );
}

export function getHydratedRevisionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHydratedRevisionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHydratedRevisionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHydratedRevisionResponse' from JSON`,
  );
}
